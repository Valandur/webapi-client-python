# coding: utf-8

"""
    WebAPI

    Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/...  As a quick test try reaching the route http:/localhost:8080/api/info (remember that you can only access \"localhost\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md) 

    OpenAPI spec version: <version>
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class EntityFull(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'uuid': 'str',
        'location': 'Location',
        'link': 'str',
        '_class': 'str',
        'velocity': 'Vector3',
        'rotation': 'Vector3',
        'scale': 'Vector3'
    }

    attribute_map = {
        'type': 'type',
        'uuid': 'uuid',
        'location': 'location',
        'link': 'link',
        '_class': 'class',
        'velocity': 'velocity',
        'rotation': 'rotation',
        'scale': 'scale'
    }

    def __init__(self, type=None, uuid=None, location=None, link=None, _class=None, velocity=None, rotation=None, scale=None):
        """
        EntityFull - a model defined in Swagger
        """

        self._type = None
        self._uuid = None
        self._location = None
        self._link = None
        self.__class = None
        self._velocity = None
        self._rotation = None
        self._scale = None

        if type is not None:
          self.type = type
        if uuid is not None:
          self.uuid = uuid
        if location is not None:
          self.location = location
        if link is not None:
          self.link = link
        if _class is not None:
          self._class = _class
        if velocity is not None:
          self.velocity = velocity
        if rotation is not None:
          self.rotation = rotation
        if scale is not None:
          self.scale = scale

    @property
    def type(self):
        """
        Gets the type of this EntityFull.
        The type of the entity.

        :return: The type of this EntityFull.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this EntityFull.
        The type of the entity.

        :param type: The type of this EntityFull.
        :type: str
        """

        self._type = type

    @property
    def uuid(self):
        """
        Gets the uuid of this EntityFull.
        The uuid of the entity.

        :return: The uuid of this EntityFull.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """
        Sets the uuid of this EntityFull.
        The uuid of the entity.

        :param uuid: The uuid of this EntityFull.
        :type: str
        """

        self._uuid = uuid

    @property
    def location(self):
        """
        Gets the location of this EntityFull.

        :return: The location of this EntityFull.
        :rtype: Location
        """
        return self._location

    @location.setter
    def location(self, location):
        """
        Sets the location of this EntityFull.

        :param location: The location of this EntityFull.
        :type: Location
        """

        self._location = location

    @property
    def link(self):
        """
        Gets the link of this EntityFull.
        The API URL which contains detailed information about this entity.

        :return: The link of this EntityFull.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """
        Sets the link of this EntityFull.
        The API URL which contains detailed information about this entity.

        :param link: The link of this EntityFull.
        :type: str
        """

        self._link = link

    @property
    def _class(self):
        """
        Gets the _class of this EntityFull.
        The fully qualified classname of the entity.

        :return: The _class of this EntityFull.
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """
        Sets the _class of this EntityFull.
        The fully qualified classname of the entity.

        :param _class: The _class of this EntityFull.
        :type: str
        """

        self.__class = _class

    @property
    def velocity(self):
        """
        Gets the velocity of this EntityFull.

        :return: The velocity of this EntityFull.
        :rtype: Vector3
        """
        return self._velocity

    @velocity.setter
    def velocity(self, velocity):
        """
        Sets the velocity of this EntityFull.

        :param velocity: The velocity of this EntityFull.
        :type: Vector3
        """

        self._velocity = velocity

    @property
    def rotation(self):
        """
        Gets the rotation of this EntityFull.

        :return: The rotation of this EntityFull.
        :rtype: Vector3
        """
        return self._rotation

    @rotation.setter
    def rotation(self, rotation):
        """
        Sets the rotation of this EntityFull.

        :param rotation: The rotation of this EntityFull.
        :type: Vector3
        """

        self._rotation = rotation

    @property
    def scale(self):
        """
        Gets the scale of this EntityFull.

        :return: The scale of this EntityFull.
        :rtype: Vector3
        """
        return self._scale

    @scale.setter
    def scale(self, scale):
        """
        Sets the scale of this EntityFull.

        :param scale: The scale of this EntityFull.
        :type: Vector3
        """

        self._scale = scale

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, EntityFull):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
