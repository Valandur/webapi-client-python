# coding: utf-8

"""
    Web-API

    Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/v5...  As a quick test try reaching the route http:/localhost:8080/api/v5/info (remember that you can only access \\\"localhost\\\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # List endpoints Lots of objects offer an endpoint to list all objects (e.g. `GET: /world` to get all worlds). These endpoints return only the properties marked 'required' by default, because the list might be quite large. If you want to return ALL data for a list endpoint add the query parameter `details`, (e.g. `GET: /world?details`).  > Remember that in this case the data returned by the endpoint might be quite large.  # Debugging endpoints Apart from the `?details` flag you can also pass some other flags for debugging purposes. Remember that you must include the first query parameter with `?`, and further ones with `&`:  `details`: Includes details for list endpoints  `accept=[json/xml]`: Manually set the accept content type. This is good for browser testing, **BUT DON'T USE THIS IN PRODUCTION, YOU CAN SUPPLY THE `Accepts` HEADER FOR THAT**  `pretty`: Pretty prints the data, also good for debugging in the browser.  An example request might look like this: `http://localhost:8080/api/v5/world?details&accpet=json&pretty&key=MY-API-KEY`  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md)  # noqa: E501

    OpenAPI spec version: @version@
    Contact: inithilian@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ExecuteCommandResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cmd': 'str',
        'ok': 'bool',
        'error': 'str',
        'response': 'list[str]'
    }

    attribute_map = {
        'cmd': 'cmd',
        'ok': 'ok',
        'error': 'error',
        'response': 'response'
    }

    def __init__(self, cmd=None, ok=None, error=None, response=None):  # noqa: E501
        """ExecuteCommandResponse - a model defined in Swagger"""  # noqa: E501

        self._cmd = None
        self._ok = None
        self._error = None
        self._response = None
        self.discriminator = None

        self.cmd = cmd
        self.ok = ok
        if error is not None:
            self.error = error
        if response is not None:
            self.response = response

    @property
    def cmd(self):
        """Gets the cmd of this ExecuteCommandResponse.  # noqa: E501

        The command that was executed  # noqa: E501

        :return: The cmd of this ExecuteCommandResponse.  # noqa: E501
        :rtype: str
        """
        return self._cmd

    @cmd.setter
    def cmd(self, cmd):
        """Sets the cmd of this ExecuteCommandResponse.

        The command that was executed  # noqa: E501

        :param cmd: The cmd of this ExecuteCommandResponse.  # noqa: E501
        :type: str
        """
        if cmd is None:
            raise ValueError("Invalid value for `cmd`, must not be `None`")  # noqa: E501

        self._cmd = cmd

    @property
    def ok(self):
        """Gets the ok of this ExecuteCommandResponse.  # noqa: E501

        True if this command executed successfully, false otherwise  # noqa: E501

        :return: The ok of this ExecuteCommandResponse.  # noqa: E501
        :rtype: bool
        """
        return self._ok

    @ok.setter
    def ok(self, ok):
        """Sets the ok of this ExecuteCommandResponse.

        True if this command executed successfully, false otherwise  # noqa: E501

        :param ok: The ok of this ExecuteCommandResponse.  # noqa: E501
        :type: bool
        """
        if ok is None:
            raise ValueError("Invalid value for `ok`, must not be `None`")  # noqa: E501

        self._ok = ok

    @property
    def error(self):
        """Gets the error of this ExecuteCommandResponse.  # noqa: E501

        Any potential error that occured during execution  # noqa: E501

        :return: The error of this ExecuteCommandResponse.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this ExecuteCommandResponse.

        Any potential error that occured during execution  # noqa: E501

        :param error: The error of this ExecuteCommandResponse.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def response(self):
        """Gets the response of this ExecuteCommandResponse.  # noqa: E501

        The response chat lines that were sent when executing the command  # noqa: E501

        :return: The response of this ExecuteCommandResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._response

    @response.setter
    def response(self, response):
        """Sets the response of this ExecuteCommandResponse.

        The response chat lines that were sent when executing the command  # noqa: E501

        :param response: The response of this ExecuteCommandResponse.  # noqa: E501
        :type: list[str]
        """

        self._response = response

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExecuteCommandResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
