# coding: utf-8

"""
    Web-API

    Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/v5...  As a quick test try reaching the route http:/localhost:8080/api/v5/info (remember that you can only access \\\"localhost\\\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # List endpoints Lots of objects offer an endpoint to list all objects (e.g. `GET: /world` to get all worlds). These endpoints return only the properties marked 'required' by default, because the list might be quite large. If you want to return ALL data for a list endpoint add the query parameter `details`, (e.g. `GET: /world?details`).  > Remember that in this case the data returned by the endpoint might be quite large.  # Debugging endpoints Apart from the `?details` flag you can also pass some other flags for debugging purposes. Remember that you must include the first query parameter with `?`, and further ones with `&`:  `details`: Includes details for list endpoints  `accept=[json/xml]`: Manually set the accept content type. This is good for browser testing, **BUT DON'T USE THIS IN PRODUCTION, YOU CAN SUPPLY THE `Accepts` HEADER FOR THAT**  `pretty`: Pretty prints the data, also good for debugging in the browser.  An example request might look like this: `http://localhost:8080/api/v5/world?details&accpet=json&pretty&key=MY-API-KEY`  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md)  # noqa: E501

    OpenAPI spec version: @version@
    Contact: inithilian@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.location import Location  # noqa: F401,E501
from swagger_client.models.player import Player  # noqa: F401,E501


class MMCTicketsTicket(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'link': 'str',
        'message': 'str',
        'status': 'str',
        'timestamp': 'int',
        'comment': 'str',
        'location': 'Location',
        'notified': 'int',
        'sender': 'Player',
        'staff': 'Player'
    }

    attribute_map = {
        'id': 'id',
        'link': 'link',
        'message': 'message',
        'status': 'status',
        'timestamp': 'timestamp',
        'comment': 'comment',
        'location': 'location',
        'notified': 'notified',
        'sender': 'sender',
        'staff': 'staff'
    }

    def __init__(self, id=None, link=None, message=None, status=None, timestamp=None, comment=None, location=None, notified=None, sender=None, staff=None):  # noqa: E501
        """MMCTicketsTicket - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._link = None
        self._message = None
        self._status = None
        self._timestamp = None
        self._comment = None
        self._location = None
        self._notified = None
        self._sender = None
        self._staff = None
        self.discriminator = None

        self.id = id
        self.link = link
        self.message = message
        self.status = status
        self.timestamp = timestamp
        if comment is not None:
            self.comment = comment
        if location is not None:
            self.location = location
        if notified is not None:
            self.notified = notified
        if sender is not None:
            self.sender = sender
        if staff is not None:
            self.staff = staff

    @property
    def id(self):
        """Gets the id of this MMCTicketsTicket.  # noqa: E501

        The unique id of this ticket  # noqa: E501

        :return: The id of this MMCTicketsTicket.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MMCTicketsTicket.

        The unique id of this ticket  # noqa: E501

        :param id: The id of this MMCTicketsTicket.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def link(self):
        """Gets the link of this MMCTicketsTicket.  # noqa: E501

        The API link that can be used to obtain more information about this object  # noqa: E501

        :return: The link of this MMCTicketsTicket.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this MMCTicketsTicket.

        The API link that can be used to obtain more information about this object  # noqa: E501

        :param link: The link of this MMCTicketsTicket.  # noqa: E501
        :type: str
        """
        if link is None:
            raise ValueError("Invalid value for `link`, must not be `None`")  # noqa: E501

        self._link = link

    @property
    def message(self):
        """Gets the message of this MMCTicketsTicket.  # noqa: E501

        The message sent along with this ticket  # noqa: E501

        :return: The message of this MMCTicketsTicket.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this MMCTicketsTicket.

        The message sent along with this ticket  # noqa: E501

        :param message: The message of this MMCTicketsTicket.  # noqa: E501
        :type: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def status(self):
        """Gets the status of this MMCTicketsTicket.  # noqa: E501

        The current status of the ticket  # noqa: E501

        :return: The status of this MMCTicketsTicket.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MMCTicketsTicket.

        The current status of the ticket  # noqa: E501

        :param status: The status of this MMCTicketsTicket.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["Open", "Claimed", "Held", "Closed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def timestamp(self):
        """Gets the timestamp of this MMCTicketsTicket.  # noqa: E501

        The unix timestamp (in seconds) when this ticket was submitted  # noqa: E501

        :return: The timestamp of this MMCTicketsTicket.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this MMCTicketsTicket.

        The unix timestamp (in seconds) when this ticket was submitted  # noqa: E501

        :param timestamp: The timestamp of this MMCTicketsTicket.  # noqa: E501
        :type: int
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def comment(self):
        """Gets the comment of this MMCTicketsTicket.  # noqa: E501

        The comment added by staff to this ticket  # noqa: E501

        :return: The comment of this MMCTicketsTicket.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this MMCTicketsTicket.

        The comment added by staff to this ticket  # noqa: E501

        :param comment: The comment of this MMCTicketsTicket.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def location(self):
        """Gets the location of this MMCTicketsTicket.  # noqa: E501

        The location at which this ticket was submitted  # noqa: E501

        :return: The location of this MMCTicketsTicket.  # noqa: E501
        :rtype: Location
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this MMCTicketsTicket.

        The location at which this ticket was submitted  # noqa: E501

        :param location: The location of this MMCTicketsTicket.  # noqa: E501
        :type: Location
        """

        self._location = location

    @property
    def notified(self):
        """Gets the notified of this MMCTicketsTicket.  # noqa: E501

        True if staff has been notified about this ticket, false otherwise  # noqa: E501

        :return: The notified of this MMCTicketsTicket.  # noqa: E501
        :rtype: int
        """
        return self._notified

    @notified.setter
    def notified(self, notified):
        """Sets the notified of this MMCTicketsTicket.

        True if staff has been notified about this ticket, false otherwise  # noqa: E501

        :param notified: The notified of this MMCTicketsTicket.  # noqa: E501
        :type: int
        """

        self._notified = notified

    @property
    def sender(self):
        """Gets the sender of this MMCTicketsTicket.  # noqa: E501

        The sender of this ticket  # noqa: E501

        :return: The sender of this MMCTicketsTicket.  # noqa: E501
        :rtype: Player
        """
        return self._sender

    @sender.setter
    def sender(self, sender):
        """Sets the sender of this MMCTicketsTicket.

        The sender of this ticket  # noqa: E501

        :param sender: The sender of this MMCTicketsTicket.  # noqa: E501
        :type: Player
        """

        self._sender = sender

    @property
    def staff(self):
        """Gets the staff of this MMCTicketsTicket.  # noqa: E501

        The staff member that was assigned to this ticket  # noqa: E501

        :return: The staff of this MMCTicketsTicket.  # noqa: E501
        :rtype: Player
        """
        return self._staff

    @staff.setter
    def staff(self, staff):
        """Sets the staff of this MMCTicketsTicket.

        The staff member that was assigned to this ticket  # noqa: E501

        :param staff: The staff of this MMCTicketsTicket.  # noqa: E501
        :type: Player
        """

        self._staff = staff

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MMCTicketsTicket):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
