# coding: utf-8

"""
    WebAPI

    Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/...  As a quick test try reaching the route http:/localhost:8080/api/info (remember that you can only access \"localhost\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md) 

    OpenAPI spec version: <version>
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WorldFullBorder(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'center': 'Vector3',
        'diameter': 'float',
        'damage_amount': 'float',
        'damage_threshold': 'float',
        'new_diameter': 'float',
        'time_remaining': 'float',
        'warning_distance': 'float',
        'warning_time': 'float'
    }

    attribute_map = {
        'center': 'center',
        'diameter': 'diameter',
        'damage_amount': 'damageAmount',
        'damage_threshold': 'damageThreshold',
        'new_diameter': 'newDiameter',
        'time_remaining': 'timeRemaining',
        'warning_distance': 'warningDistance',
        'warning_time': 'warningTime'
    }

    def __init__(self, center=None, diameter=None, damage_amount=None, damage_threshold=None, new_diameter=None, time_remaining=None, warning_distance=None, warning_time=None):
        """
        WorldFullBorder - a model defined in Swagger
        """

        self._center = None
        self._diameter = None
        self._damage_amount = None
        self._damage_threshold = None
        self._new_diameter = None
        self._time_remaining = None
        self._warning_distance = None
        self._warning_time = None

        if center is not None:
          self.center = center
        if diameter is not None:
          self.diameter = diameter
        if damage_amount is not None:
          self.damage_amount = damage_amount
        if damage_threshold is not None:
          self.damage_threshold = damage_threshold
        if new_diameter is not None:
          self.new_diameter = new_diameter
        if time_remaining is not None:
          self.time_remaining = time_remaining
        if warning_distance is not None:
          self.warning_distance = warning_distance
        if warning_time is not None:
          self.warning_time = warning_time

    @property
    def center(self):
        """
        Gets the center of this WorldFullBorder.

        :return: The center of this WorldFullBorder.
        :rtype: Vector3
        """
        return self._center

    @center.setter
    def center(self, center):
        """
        Sets the center of this WorldFullBorder.

        :param center: The center of this WorldFullBorder.
        :type: Vector3
        """

        self._center = center

    @property
    def diameter(self):
        """
        Gets the diameter of this WorldFullBorder.
        The diameter of the world border.

        :return: The diameter of this WorldFullBorder.
        :rtype: float
        """
        return self._diameter

    @diameter.setter
    def diameter(self, diameter):
        """
        Sets the diameter of this WorldFullBorder.
        The diameter of the world border.

        :param diameter: The diameter of this WorldFullBorder.
        :type: float
        """

        self._diameter = diameter

    @property
    def damage_amount(self):
        """
        Gets the damage_amount of this WorldFullBorder.
        The amount of damage done to the player when outside the world border.

        :return: The damage_amount of this WorldFullBorder.
        :rtype: float
        """
        return self._damage_amount

    @damage_amount.setter
    def damage_amount(self, damage_amount):
        """
        Sets the damage_amount of this WorldFullBorder.
        The amount of damage done to the player when outside the world border.

        :param damage_amount: The damage_amount of this WorldFullBorder.
        :type: float
        """

        self._damage_amount = damage_amount

    @property
    def damage_threshold(self):
        """
        Gets the damage_threshold of this WorldFullBorder.
        The amount of time in seconds to wait before applying the damage.

        :return: The damage_threshold of this WorldFullBorder.
        :rtype: float
        """
        return self._damage_threshold

    @damage_threshold.setter
    def damage_threshold(self, damage_threshold):
        """
        Sets the damage_threshold of this WorldFullBorder.
        The amount of time in seconds to wait before applying the damage.

        :param damage_threshold: The damage_threshold of this WorldFullBorder.
        :type: float
        """

        self._damage_threshold = damage_threshold

    @property
    def new_diameter(self):
        """
        Gets the new_diameter of this WorldFullBorder.
        The new diameter the world border is going to change to.

        :return: The new_diameter of this WorldFullBorder.
        :rtype: float
        """
        return self._new_diameter

    @new_diameter.setter
    def new_diameter(self, new_diameter):
        """
        Sets the new_diameter of this WorldFullBorder.
        The new diameter the world border is going to change to.

        :param new_diameter: The new_diameter of this WorldFullBorder.
        :type: float
        """

        self._new_diameter = new_diameter

    @property
    def time_remaining(self):
        """
        Gets the time_remaining of this WorldFullBorder.
        The amount of time remaining before the world border reaches the new diameter.

        :return: The time_remaining of this WorldFullBorder.
        :rtype: float
        """
        return self._time_remaining

    @time_remaining.setter
    def time_remaining(self, time_remaining):
        """
        Sets the time_remaining of this WorldFullBorder.
        The amount of time remaining before the world border reaches the new diameter.

        :param time_remaining: The time_remaining of this WorldFullBorder.
        :type: float
        """

        self._time_remaining = time_remaining

    @property
    def warning_distance(self):
        """
        Gets the warning_distance of this WorldFullBorder.
        The distance at which a player is warned of the world border.

        :return: The warning_distance of this WorldFullBorder.
        :rtype: float
        """
        return self._warning_distance

    @warning_distance.setter
    def warning_distance(self, warning_distance):
        """
        Sets the warning_distance of this WorldFullBorder.
        The distance at which a player is warned of the world border.

        :param warning_distance: The warning_distance of this WorldFullBorder.
        :type: float
        """

        self._warning_distance = warning_distance

    @property
    def warning_time(self):
        """
        Gets the warning_time of this WorldFullBorder.
        The amount of time in seconds before a contracting world border reaches a player that the player is warned.

        :return: The warning_time of this WorldFullBorder.
        :rtype: float
        """
        return self._warning_time

    @warning_time.setter
    def warning_time(self, warning_time):
        """
        Sets the warning_time of this WorldFullBorder.
        The amount of time in seconds before a contracting world border reaches a player that the player is warned.

        :param warning_time: The warning_time of this WorldFullBorder.
        :type: float
        """

        self._warning_time = warning_time

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WorldFullBorder):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
