# coding: utf-8

"""
    Web-API

    Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/v5...  As a quick test try reaching the route http:/localhost:8080/api/v5/info (remember that you can only access \\\"localhost\\\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # List endpoints Lots of objects offer an endpoint to list all objects (e.g. `GET: /world` to get all worlds). These endpoints return only the properties marked 'required' by default, because the list might be quite large. If you want to return ALL data for a list endpoint add the query parameter `details`, (e.g. `GET: /world?details`).  > Remember that in this case the data returned by the endpoint might be quite large.  # Debugging endpoints Apart from the `?details` flag you can also pass some other flags for debugging purposes. Remember that you must include the first query parameter with `?`, and further ones with `&`:  `details`: Includes details for list endpoints  `accept=[json/xml]`: Manually set the accept content type. This is good for browser testing, **BUT DON'T USE THIS IN PRODUCTION, YOU CAN SUPPLY THE `Accepts` HEADER FOR THAT**  `pretty`: Pretty prints the data, also good for debugging in the browser.  An example request might look like this: `http://localhost:8080/api/v5/world?details&accpet=json&pretty&key=MY-API-KEY`  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md)  # noqa: E501

    OpenAPI spec version: 5.4.2-S7.1.0
    Contact: inithilian@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.plugin_dependency import PluginDependency  # noqa: F401,E501


class PluginContainer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'authors': 'list[str]',
        'dependencies': 'list[PluginDependency]',
        'id': 'str',
        'link': 'str',
        'name': 'str',
        'state': 'str',
        'type': 'str',
        'description': 'str',
        'source': 'str',
        'url': 'str',
        'version': 'str'
    }

    attribute_map = {
        'authors': 'authors',
        'dependencies': 'dependencies',
        'id': 'id',
        'link': 'link',
        'name': 'name',
        'state': 'state',
        'type': 'type',
        'description': 'description',
        'source': 'source',
        'url': 'url',
        'version': 'version'
    }

    def __init__(self, authors=None, dependencies=None, id=None, link=None, name=None, state=None, type=None, description=None, source=None, url=None, version=None):  # noqa: E501
        """PluginContainer - a model defined in Swagger"""  # noqa: E501

        self._authors = None
        self._dependencies = None
        self._id = None
        self._link = None
        self._name = None
        self._state = None
        self._type = None
        self._description = None
        self._source = None
        self._url = None
        self._version = None
        self.discriminator = None

        self.authors = authors
        self.dependencies = dependencies
        self.id = id
        self.link = link
        self.name = name
        self.state = state
        self.type = type
        if description is not None:
            self.description = description
        if source is not None:
            self.source = source
        if url is not None:
            self.url = url
        if version is not None:
            self.version = version

    @property
    def authors(self):
        """Gets the authors of this PluginContainer.  # noqa: E501

        A list of authors that created this plugin  # noqa: E501

        :return: The authors of this PluginContainer.  # noqa: E501
        :rtype: list[str]
        """
        return self._authors

    @authors.setter
    def authors(self, authors):
        """Sets the authors of this PluginContainer.

        A list of authors that created this plugin  # noqa: E501

        :param authors: The authors of this PluginContainer.  # noqa: E501
        :type: list[str]
        """
        if authors is None:
            raise ValueError("Invalid value for `authors`, must not be `None`")  # noqa: E501

        self._authors = authors

    @property
    def dependencies(self):
        """Gets the dependencies of this PluginContainer.  # noqa: E501

        Other plugins that this plugin depends on  # noqa: E501

        :return: The dependencies of this PluginContainer.  # noqa: E501
        :rtype: list[PluginDependency]
        """
        return self._dependencies

    @dependencies.setter
    def dependencies(self, dependencies):
        """Sets the dependencies of this PluginContainer.

        Other plugins that this plugin depends on  # noqa: E501

        :param dependencies: The dependencies of this PluginContainer.  # noqa: E501
        :type: list[PluginDependency]
        """
        if dependencies is None:
            raise ValueError("Invalid value for `dependencies`, must not be `None`")  # noqa: E501

        self._dependencies = dependencies

    @property
    def id(self):
        """Gets the id of this PluginContainer.  # noqa: E501

        The unique id of this plugin  # noqa: E501

        :return: The id of this PluginContainer.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PluginContainer.

        The unique id of this plugin  # noqa: E501

        :param id: The id of this PluginContainer.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def link(self):
        """Gets the link of this PluginContainer.  # noqa: E501

        The API link that can be used to obtain more information about this object  # noqa: E501

        :return: The link of this PluginContainer.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this PluginContainer.

        The API link that can be used to obtain more information about this object  # noqa: E501

        :param link: The link of this PluginContainer.  # noqa: E501
        :type: str
        """
        if link is None:
            raise ValueError("Invalid value for `link`, must not be `None`")  # noqa: E501

        self._link = link

    @property
    def name(self):
        """Gets the name of this PluginContainer.  # noqa: E501

        The name of this plugin  # noqa: E501

        :return: The name of this PluginContainer.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PluginContainer.

        The name of this plugin  # noqa: E501

        :param name: The name of this PluginContainer.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def state(self):
        """Gets the state of this PluginContainer.  # noqa: E501

        The current loaded state of the plugin  # noqa: E501

        :return: The state of this PluginContainer.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this PluginContainer.

        The current loaded state of the plugin  # noqa: E501

        :param state: The state of this PluginContainer.  # noqa: E501
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501
        allowed_values = ["Loaded", "Unloaded", "WillBeLoaded", "WillBeUnloaded"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def type(self):
        """Gets the type of this PluginContainer.  # noqa: E501

        The type of the plugin  # noqa: E501

        :return: The type of this PluginContainer.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PluginContainer.

        The type of the plugin  # noqa: E501

        :param type: The type of this PluginContainer.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["Unknown", "Sponge", "Forge", "Minecraft"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def description(self):
        """Gets the description of this PluginContainer.  # noqa: E501

        A description describing what this plugin does (hopefully)  # noqa: E501

        :return: The description of this PluginContainer.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PluginContainer.

        A description describing what this plugin does (hopefully)  # noqa: E501

        :param description: The description of this PluginContainer.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def source(self):
        """Gets the source of this PluginContainer.  # noqa: E501

        The file source where the plugin was loaded from.  # noqa: E501

        :return: The source of this PluginContainer.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this PluginContainer.

        The file source where the plugin was loaded from.  # noqa: E501

        :param source: The source of this PluginContainer.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def url(self):
        """Gets the url of this PluginContainer.  # noqa: E501

        The url that was added to the plugin (probably the homepage)  # noqa: E501

        :return: The url of this PluginContainer.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this PluginContainer.

        The url that was added to the plugin (probably the homepage)  # noqa: E501

        :param url: The url of this PluginContainer.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def version(self):
        """Gets the version of this PluginContainer.  # noqa: E501

        The current version of the plugin  # noqa: E501

        :return: The version of this PluginContainer.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this PluginContainer.

        The current version of the plugin  # noqa: E501

        :param version: The version of this PluginContainer.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PluginContainer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PluginContainer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
