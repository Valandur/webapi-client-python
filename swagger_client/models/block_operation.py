# coding: utf-8

"""
    Web-API

    Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/v5...  As a quick test try reaching the route http:/localhost:8080/api/v5/info (remember that you can only access \\\"localhost\\\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # List endpoints Lots of objects offer an endpoint to list all objects (e.g. `GET: /world` to get all worlds). These endpoints return only the properties marked 'required' by default, because the list might be quite large. If you want to return ALL data for a list endpoint add the query parameter `details`, (e.g. `GET: /world?details`).  > Remember that in this case the data returned by the endpoint might be quite large.  # Debugging endpoints Apart from the `?details` flag you can also pass some other flags for debugging purposes. Remember that you must include the first query parameter with `?`, and further ones with `&`:  `details`: Includes details for list endpoints  `accept=[json/xml]`: Manually set the accept content type. This is good for browser testing, **BUT DON'T USE THIS IN PRODUCTION, YOU CAN SUPPLY THE `Accepts` HEADER FOR THAT**  `pretty`: Pretty prints the data, also good for debugging in the browser.  An example request might look like this: `http://localhost:8080/api/v5/world?details&accpet=json&pretty&key=MY-API-KEY`  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md)  # noqa: E501

    OpenAPI spec version: @version@
    Contact: inithilian@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.vector3i import Vector3i  # noqa: F401,E501
from swagger_client.models.world import World  # noqa: F401,E501


class BlockOperation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'error': 'str',
        'errored': 'bool',
        'estimated_seconds_remaining': 'float',
        'link': 'str',
        'max': 'Vector3i',
        'min': 'Vector3i',
        'progress': 'float',
        'status': 'str',
        'type': 'str',
        'uuid': 'str',
        'world': 'World'
    }

    attribute_map = {
        'error': 'error',
        'errored': 'errored',
        'estimated_seconds_remaining': 'estimatedSecondsRemaining',
        'link': 'link',
        'max': 'max',
        'min': 'min',
        'progress': 'progress',
        'status': 'status',
        'type': 'type',
        'uuid': 'uuid',
        'world': 'world'
    }

    def __init__(self, error=None, errored=None, estimated_seconds_remaining=None, link=None, max=None, min=None, progress=None, status=None, type=None, uuid=None, world=None):  # noqa: E501
        """BlockOperation - a model defined in Swagger"""  # noqa: E501

        self._error = None
        self._errored = None
        self._estimated_seconds_remaining = None
        self._link = None
        self._max = None
        self._min = None
        self._progress = None
        self._status = None
        self._type = None
        self._uuid = None
        self._world = None
        self.discriminator = None

        self.error = error
        self.errored = errored
        self.estimated_seconds_remaining = estimated_seconds_remaining
        self.link = link
        self.max = max
        self.min = min
        self.progress = progress
        self.status = status
        self.type = type
        self.uuid = uuid
        self.world = world

    @property
    def error(self):
        """Gets the error of this BlockOperation.  # noqa: E501

        The error message, if any  # noqa: E501

        :return: The error of this BlockOperation.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this BlockOperation.

        The error message, if any  # noqa: E501

        :param error: The error of this BlockOperation.  # noqa: E501
        :type: str
        """
        if error is None:
            raise ValueError("Invalid value for `error`, must not be `None`")  # noqa: E501

        self._error = error

    @property
    def errored(self):
        """Gets the errored of this BlockOperation.  # noqa: E501

        True if this block operation produced errors, false otherwise.  # noqa: E501

        :return: The errored of this BlockOperation.  # noqa: E501
        :rtype: bool
        """
        return self._errored

    @errored.setter
    def errored(self, errored):
        """Sets the errored of this BlockOperation.

        True if this block operation produced errors, false otherwise.  # noqa: E501

        :param errored: The errored of this BlockOperation.  # noqa: E501
        :type: bool
        """
        if errored is None:
            raise ValueError("Invalid value for `errored`, must not be `None`")  # noqa: E501

        self._errored = errored

    @property
    def estimated_seconds_remaining(self):
        """Gets the estimated_seconds_remaining of this BlockOperation.  # noqa: E501

        The estimated amount of time remaining until this block operation is complete (in seconds)  # noqa: E501

        :return: The estimated_seconds_remaining of this BlockOperation.  # noqa: E501
        :rtype: float
        """
        return self._estimated_seconds_remaining

    @estimated_seconds_remaining.setter
    def estimated_seconds_remaining(self, estimated_seconds_remaining):
        """Sets the estimated_seconds_remaining of this BlockOperation.

        The estimated amount of time remaining until this block operation is complete (in seconds)  # noqa: E501

        :param estimated_seconds_remaining: The estimated_seconds_remaining of this BlockOperation.  # noqa: E501
        :type: float
        """
        if estimated_seconds_remaining is None:
            raise ValueError("Invalid value for `estimated_seconds_remaining`, must not be `None`")  # noqa: E501

        self._estimated_seconds_remaining = estimated_seconds_remaining

    @property
    def link(self):
        """Gets the link of this BlockOperation.  # noqa: E501

        The API link that can be used to obtain more information about this object  # noqa: E501

        :return: The link of this BlockOperation.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this BlockOperation.

        The API link that can be used to obtain more information about this object  # noqa: E501

        :param link: The link of this BlockOperation.  # noqa: E501
        :type: str
        """
        if link is None:
            raise ValueError("Invalid value for `link`, must not be `None`")  # noqa: E501

        self._link = link

    @property
    def max(self):
        """Gets the max of this BlockOperation.  # noqa: E501

        The maximum block belonging to this operation  # noqa: E501

        :return: The max of this BlockOperation.  # noqa: E501
        :rtype: Vector3i
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this BlockOperation.

        The maximum block belonging to this operation  # noqa: E501

        :param max: The max of this BlockOperation.  # noqa: E501
        :type: Vector3i
        """
        if max is None:
            raise ValueError("Invalid value for `max`, must not be `None`")  # noqa: E501

        self._max = max

    @property
    def min(self):
        """Gets the min of this BlockOperation.  # noqa: E501

        The minimum block belonging to this operation  # noqa: E501

        :return: The min of this BlockOperation.  # noqa: E501
        :rtype: Vector3i
        """
        return self._min

    @min.setter
    def min(self, min):
        """Sets the min of this BlockOperation.

        The minimum block belonging to this operation  # noqa: E501

        :param min: The min of this BlockOperation.  # noqa: E501
        :type: Vector3i
        """
        if min is None:
            raise ValueError("Invalid value for `min`, must not be `None`")  # noqa: E501

        self._min = min

    @property
    def progress(self):
        """Gets the progress of this BlockOperation.  # noqa: E501

        The current progress of the block operation, from 0 (=started) to 1 (=finished)  # noqa: E501

        :return: The progress of this BlockOperation.  # noqa: E501
        :rtype: float
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this BlockOperation.

        The current progress of the block operation, from 0 (=started) to 1 (=finished)  # noqa: E501

        :param progress: The progress of this BlockOperation.  # noqa: E501
        :type: float
        """
        if progress is None:
            raise ValueError("Invalid value for `progress`, must not be `None`")  # noqa: E501

        self._progress = progress

    @property
    def status(self):
        """Gets the status of this BlockOperation.  # noqa: E501

        The current status of the block operation  # noqa: E501

        :return: The status of this BlockOperation.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BlockOperation.

        The current status of the block operation  # noqa: E501

        :param status: The status of this BlockOperation.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["INIT", "RUNNING", "PAUSED", "DONE", "ERRORED", "CANCELED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def type(self):
        """Gets the type of this BlockOperation.  # noqa: E501

        The type of block operation  # noqa: E501

        :return: The type of this BlockOperation.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BlockOperation.

        The type of block operation  # noqa: E501

        :param type: The type of this BlockOperation.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["GET", "CHANGE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def uuid(self):
        """Gets the uuid of this BlockOperation.  # noqa: E501

        The unique UUID identifying this block operation  # noqa: E501

        :return: The uuid of this BlockOperation.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this BlockOperation.

        The unique UUID identifying this block operation  # noqa: E501

        :param uuid: The uuid of this BlockOperation.  # noqa: E501
        :type: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid

    @property
    def world(self):
        """Gets the world of this BlockOperation.  # noqa: E501

        The world in which this block operation is running  # noqa: E501

        :return: The world of this BlockOperation.  # noqa: E501
        :rtype: World
        """
        return self._world

    @world.setter
    def world(self, world):
        """Sets the world of this BlockOperation.

        The world in which this block operation is running  # noqa: E501

        :param world: The world of this BlockOperation.  # noqa: E501
        :type: World
        """
        if world is None:
            raise ValueError("Invalid value for `world`, must not be `None`")  # noqa: E501

        self._world = world

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BlockOperation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
