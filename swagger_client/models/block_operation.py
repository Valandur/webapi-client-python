# coding: utf-8

"""
    WebAPI

    Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/...  As a quick test try reaching the route http:/localhost:8080/api/info (remember that you can only access \"localhost\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md) 

    OpenAPI spec version: <version>
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class BlockOperation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uuid': 'str',
        'type': 'str',
        'status': 'str',
        'progress': 'float',
        'est_time_remaining': 'float',
        'link': 'str'
    }

    attribute_map = {
        'uuid': 'uuid',
        'type': 'type',
        'status': 'status',
        'progress': 'progress',
        'est_time_remaining': 'estTimeRemaining',
        'link': 'link'
    }

    def __init__(self, uuid=None, type=None, status=None, progress=None, est_time_remaining=None, link=None):
        """
        BlockOperation - a model defined in Swagger
        """

        self._uuid = None
        self._type = None
        self._status = None
        self._progress = None
        self._est_time_remaining = None
        self._link = None

        if uuid is not None:
          self.uuid = uuid
        if type is not None:
          self.type = type
        if status is not None:
          self.status = status
        if progress is not None:
          self.progress = progress
        if est_time_remaining is not None:
          self.est_time_remaining = est_time_remaining
        if link is not None:
          self.link = link

    @property
    def uuid(self):
        """
        Gets the uuid of this BlockOperation.
        The UUID of the block update operation.

        :return: The uuid of this BlockOperation.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """
        Sets the uuid of this BlockOperation.
        The UUID of the block update operation.

        :param uuid: The uuid of this BlockOperation.
        :type: str
        """

        self._uuid = uuid

    @property
    def type(self):
        """
        Gets the type of this BlockOperation.
        The type of action that is being performed by this operation.

        :return: The type of this BlockOperation.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this BlockOperation.
        The type of action that is being performed by this operation.

        :param type: The type of this BlockOperation.
        :type: str
        """
        allowed_values = ["GET", "UPDATE"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def status(self):
        """
        Gets the status of this BlockOperation.
        The current status of the operation, one of: INIT, RUNNING, PAUSED, DONE, ERRORED. 

        :return: The status of this BlockOperation.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this BlockOperation.
        The current status of the operation, one of: INIT, RUNNING, PAUSED, DONE, ERRORED. 

        :param status: The status of this BlockOperation.
        :type: str
        """

        self._status = status

    @property
    def progress(self):
        """
        Gets the progress of this BlockOperation.
        The update progress of this operation, from 0 (nothing done) to 1 (completely done).

        :return: The progress of this BlockOperation.
        :rtype: float
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """
        Sets the progress of this BlockOperation.
        The update progress of this operation, from 0 (nothing done) to 1 (completely done).

        :param progress: The progress of this BlockOperation.
        :type: float
        """

        self._progress = progress

    @property
    def est_time_remaining(self):
        """
        Gets the est_time_remaining of this BlockOperation.
        The estimated amount of seconds remaining before this operation is completed.

        :return: The est_time_remaining of this BlockOperation.
        :rtype: float
        """
        return self._est_time_remaining

    @est_time_remaining.setter
    def est_time_remaining(self, est_time_remaining):
        """
        Sets the est_time_remaining of this BlockOperation.
        The estimated amount of seconds remaining before this operation is completed.

        :param est_time_remaining: The est_time_remaining of this BlockOperation.
        :type: float
        """

        self._est_time_remaining = est_time_remaining

    @property
    def link(self):
        """
        Gets the link of this BlockOperation.
        The Web-API url to access for details about this operation.

        :return: The link of this BlockOperation.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """
        Sets the link of this BlockOperation.
        The Web-API url to access for details about this operation.

        :param link: The link of this BlockOperation.
        :type: str
        """

        self._link = link

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, BlockOperation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
