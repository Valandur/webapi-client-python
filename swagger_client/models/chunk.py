# coding: utf-8

"""
    Web-API

    Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/v5...  As a quick test try reaching the route http:/localhost:8080/api/v5/info (remember that you can only access \\\"localhost\\\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # List endpoints Lots of objects offer an endpoint to list all objects (e.g. `GET: /world` to get all worlds). These endpoints return only the properties marked 'required' by default, because the list might be quite large. If you want to return ALL data for a list endpoint add the query parameter `details`, (e.g. `GET: /world?details`).  > Remember that in this case the data returned by the endpoint might be quite large.  # Debugging endpoints Apart from the `?details` flag you can also pass some other flags for debugging purposes. Remember that you must include the first query parameter with `?`, and further ones with `&`:  `details`: Includes details for list endpoints  `accept=[json/xml]`: Manually set the accept content type. This is good for browser testing, **BUT DON'T USE THIS IN PRODUCTION, YOU CAN SUPPLY THE `Accepts` HEADER FOR THAT**  `pretty`: Pretty prints the data, also good for debugging in the browser.  An example request might look like this: `http://localhost:8080/api/v5/world?details&accpet=json&pretty&key=MY-API-KEY`  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md)  # noqa: E501

    OpenAPI spec version: @version@
    Contact: inithilian@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.vector3i import Vector3i  # noqa: F401,E501
from swagger_client.models.world import World  # noqa: F401,E501


class Chunk(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'link': 'str',
        'loaded': 'bool',
        'position': 'Vector3i',
        'uuid': 'str',
        'block_max': 'Vector3i',
        'block_min': 'Vector3i',
        'inhabited_time': 'int',
        'regional_difficulty_factor': 'float',
        'regional_difficulty_percentage': 'float',
        'world': 'World'
    }

    attribute_map = {
        'link': 'link',
        'loaded': 'loaded',
        'position': 'position',
        'uuid': 'uuid',
        'block_max': 'blockMax',
        'block_min': 'blockMin',
        'inhabited_time': 'inhabitedTime',
        'regional_difficulty_factor': 'regionalDifficultyFactor',
        'regional_difficulty_percentage': 'regionalDifficultyPercentage',
        'world': 'world'
    }

    def __init__(self, link=None, loaded=None, position=None, uuid=None, block_max=None, block_min=None, inhabited_time=None, regional_difficulty_factor=None, regional_difficulty_percentage=None, world=None):  # noqa: E501
        """Chunk - a model defined in Swagger"""  # noqa: E501

        self._link = None
        self._loaded = None
        self._position = None
        self._uuid = None
        self._block_max = None
        self._block_min = None
        self._inhabited_time = None
        self._regional_difficulty_factor = None
        self._regional_difficulty_percentage = None
        self._world = None
        self.discriminator = None

        self.link = link
        self.loaded = loaded
        self.position = position
        self.uuid = uuid
        if block_max is not None:
            self.block_max = block_max
        if block_min is not None:
            self.block_min = block_min
        if inhabited_time is not None:
            self.inhabited_time = inhabited_time
        if regional_difficulty_factor is not None:
            self.regional_difficulty_factor = regional_difficulty_factor
        if regional_difficulty_percentage is not None:
            self.regional_difficulty_percentage = regional_difficulty_percentage
        if world is not None:
            self.world = world

    @property
    def link(self):
        """Gets the link of this Chunk.  # noqa: E501

        The API link that can be used to obtain more information about this object  # noqa: E501

        :return: The link of this Chunk.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this Chunk.

        The API link that can be used to obtain more information about this object  # noqa: E501

        :param link: The link of this Chunk.  # noqa: E501
        :type: str
        """
        if link is None:
            raise ValueError("Invalid value for `link`, must not be `None`")  # noqa: E501

        self._link = link

    @property
    def loaded(self):
        """Gets the loaded of this Chunk.  # noqa: E501

        True if this chunk is currently loaded, false otherwise  # noqa: E501

        :return: The loaded of this Chunk.  # noqa: E501
        :rtype: bool
        """
        return self._loaded

    @loaded.setter
    def loaded(self, loaded):
        """Sets the loaded of this Chunk.

        True if this chunk is currently loaded, false otherwise  # noqa: E501

        :param loaded: The loaded of this Chunk.  # noqa: E501
        :type: bool
        """
        if loaded is None:
            raise ValueError("Invalid value for `loaded`, must not be `None`")  # noqa: E501

        self._loaded = loaded

    @property
    def position(self):
        """Gets the position of this Chunk.  # noqa: E501

        The position of this chunk (in chunk coordinates)  # noqa: E501

        :return: The position of this Chunk.  # noqa: E501
        :rtype: Vector3i
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this Chunk.

        The position of this chunk (in chunk coordinates)  # noqa: E501

        :param position: The position of this Chunk.  # noqa: E501
        :type: Vector3i
        """
        if position is None:
            raise ValueError("Invalid value for `position`, must not be `None`")  # noqa: E501

        self._position = position

    @property
    def uuid(self):
        """Gets the uuid of this Chunk.  # noqa: E501

        The unique id of this chunk  # noqa: E501

        :return: The uuid of this Chunk.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Chunk.

        The unique id of this chunk  # noqa: E501

        :param uuid: The uuid of this Chunk.  # noqa: E501
        :type: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid

    @property
    def block_max(self):
        """Gets the block_max of this Chunk.  # noqa: E501

        The bock with the largest coordinates that is still part of this chunk  # noqa: E501

        :return: The block_max of this Chunk.  # noqa: E501
        :rtype: Vector3i
        """
        return self._block_max

    @block_max.setter
    def block_max(self, block_max):
        """Sets the block_max of this Chunk.

        The bock with the largest coordinates that is still part of this chunk  # noqa: E501

        :param block_max: The block_max of this Chunk.  # noqa: E501
        :type: Vector3i
        """

        self._block_max = block_max

    @property
    def block_min(self):
        """Gets the block_min of this Chunk.  # noqa: E501

        The bock with the smallest coordinates that is still part of this chunk  # noqa: E501

        :return: The block_min of this Chunk.  # noqa: E501
        :rtype: Vector3i
        """
        return self._block_min

    @block_min.setter
    def block_min(self, block_min):
        """Sets the block_min of this Chunk.

        The bock with the smallest coordinates that is still part of this chunk  # noqa: E501

        :param block_min: The block_min of this Chunk.  # noqa: E501
        :type: Vector3i
        """

        self._block_min = block_min

    @property
    def inhabited_time(self):
        """Gets the inhabited_time of this Chunk.  # noqa: E501

        The total amount of time (in server ticks) this chunk has been inhabited by players.  # noqa: E501

        :return: The inhabited_time of this Chunk.  # noqa: E501
        :rtype: int
        """
        return self._inhabited_time

    @inhabited_time.setter
    def inhabited_time(self, inhabited_time):
        """Sets the inhabited_time of this Chunk.

        The total amount of time (in server ticks) this chunk has been inhabited by players.  # noqa: E501

        :param inhabited_time: The inhabited_time of this Chunk.  # noqa: E501
        :type: int
        """

        self._inhabited_time = inhabited_time

    @property
    def regional_difficulty_factor(self):
        """Gets the regional_difficulty_factor of this Chunk.  # noqa: E501

        The increase in difficulty due to the presence of players in the chunk  # noqa: E501

        :return: The regional_difficulty_factor of this Chunk.  # noqa: E501
        :rtype: float
        """
        return self._regional_difficulty_factor

    @regional_difficulty_factor.setter
    def regional_difficulty_factor(self, regional_difficulty_factor):
        """Sets the regional_difficulty_factor of this Chunk.

        The increase in difficulty due to the presence of players in the chunk  # noqa: E501

        :param regional_difficulty_factor: The regional_difficulty_factor of this Chunk.  # noqa: E501
        :type: float
        """

        self._regional_difficulty_factor = regional_difficulty_factor

    @property
    def regional_difficulty_percentage(self):
        """Gets the regional_difficulty_percentage of this Chunk.  # noqa: E501

        The increase in difficulty due to the presence of players in the chunk as a percentage  # noqa: E501

        :return: The regional_difficulty_percentage of this Chunk.  # noqa: E501
        :rtype: float
        """
        return self._regional_difficulty_percentage

    @regional_difficulty_percentage.setter
    def regional_difficulty_percentage(self, regional_difficulty_percentage):
        """Sets the regional_difficulty_percentage of this Chunk.

        The increase in difficulty due to the presence of players in the chunk as a percentage  # noqa: E501

        :param regional_difficulty_percentage: The regional_difficulty_percentage of this Chunk.  # noqa: E501
        :type: float
        """

        self._regional_difficulty_percentage = regional_difficulty_percentage

    @property
    def world(self):
        """Gets the world of this Chunk.  # noqa: E501

        The world the chunk is in  # noqa: E501

        :return: The world of this Chunk.  # noqa: E501
        :rtype: World
        """
        return self._world

    @world.setter
    def world(self, world):
        """Sets the world of this Chunk.

        The world the chunk is in  # noqa: E501

        :param world: The world of this Chunk.  # noqa: E501
        :type: World
        """

        self._world = world

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Chunk):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
