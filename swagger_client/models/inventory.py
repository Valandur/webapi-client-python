# coding: utf-8

"""
    Web-API

    Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/v5...  As a quick test try reaching the route http:/localhost:8080/api/v5/info (remember that you can only access \\\"localhost\\\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # List endpoints Lots of objects offer an endpoint to list all objects (e.g. `GET: /world` to get all worlds). These endpoints return only the properties marked 'required' by default, because the list might be quite large. If you want to return ALL data for a list endpoint add the query parameter `details`, (e.g. `GET: /world?details`).  > Remember that in this case the data returned by the endpoint might be quite large.  # Debugging endpoints Apart from the `?details` flag you can also pass some other flags for debugging purposes. Remember that you must include the first query parameter with `?`, and further ones with `&`:  `details`: Includes details for list endpoints  `accept=[json/xml]`: Manually set the accept content type. This is good for browser testing, **BUT DON'T USE THIS IN PRODUCTION, YOU CAN SUPPLY THE `Accepts` HEADER FOR THAT**  `pretty`: Pretty prints the data, also good for debugging in the browser.  An example request might look like this: `http://localhost:8080/api/v5/world?details&accpet=json&pretty&key=MY-API-KEY`  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md)  # noqa: E501

    OpenAPI spec version: @version@
    Contact: inithilian@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.catalog_type import CatalogType  # noqa: F401,E501
from swagger_client.models.item_stack import ItemStack  # noqa: F401,E501


class Inventory(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'capacity': 'int',
        'item_stacks': 'list[ItemStack]',
        'link': 'str',
        'name': 'str',
        'total_items': 'int',
        'type': 'CatalogType'
    }

    attribute_map = {
        'capacity': 'capacity',
        'item_stacks': 'itemStacks',
        'link': 'link',
        'name': 'name',
        'total_items': 'totalItems',
        'type': 'type'
    }

    def __init__(self, capacity=None, item_stacks=None, link=None, name=None, total_items=None, type=None):  # noqa: E501
        """Inventory - a model defined in Swagger"""  # noqa: E501

        self._capacity = None
        self._item_stacks = None
        self._link = None
        self._name = None
        self._total_items = None
        self._type = None
        self.discriminator = None

        self.capacity = capacity
        self.item_stacks = item_stacks
        self.link = link
        self.name = name
        self.total_items = total_items
        self.type = type

    @property
    def capacity(self):
        """Gets the capacity of this Inventory.  # noqa: E501

        The maximum capacity of the inventory (maximum number of stacks)  # noqa: E501

        :return: The capacity of this Inventory.  # noqa: E501
        :rtype: int
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this Inventory.

        The maximum capacity of the inventory (maximum number of stacks)  # noqa: E501

        :param capacity: The capacity of this Inventory.  # noqa: E501
        :type: int
        """
        if capacity is None:
            raise ValueError("Invalid value for `capacity`, must not be `None`")  # noqa: E501

        self._capacity = capacity

    @property
    def item_stacks(self):
        """Gets the item_stacks of this Inventory.  # noqa: E501

        Gets a list of item stacks in the inventory  # noqa: E501

        :return: The item_stacks of this Inventory.  # noqa: E501
        :rtype: list[ItemStack]
        """
        return self._item_stacks

    @item_stacks.setter
    def item_stacks(self, item_stacks):
        """Sets the item_stacks of this Inventory.

        Gets a list of item stacks in the inventory  # noqa: E501

        :param item_stacks: The item_stacks of this Inventory.  # noqa: E501
        :type: list[ItemStack]
        """
        if item_stacks is None:
            raise ValueError("Invalid value for `item_stacks`, must not be `None`")  # noqa: E501

        self._item_stacks = item_stacks

    @property
    def link(self):
        """Gets the link of this Inventory.  # noqa: E501

        The API link that can be used to obtain more information about this object  # noqa: E501

        :return: The link of this Inventory.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this Inventory.

        The API link that can be used to obtain more information about this object  # noqa: E501

        :param link: The link of this Inventory.  # noqa: E501
        :type: str
        """
        if link is None:
            raise ValueError("Invalid value for `link`, must not be `None`")  # noqa: E501

        self._link = link

    @property
    def name(self):
        """Gets the name of this Inventory.  # noqa: E501

        The name of the inventory  # noqa: E501

        :return: The name of this Inventory.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Inventory.

        The name of the inventory  # noqa: E501

        :param name: The name of this Inventory.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def total_items(self):
        """Gets the total_items of this Inventory.  # noqa: E501

        The total amount of items currently in the inventory  # noqa: E501

        :return: The total_items of this Inventory.  # noqa: E501
        :rtype: int
        """
        return self._total_items

    @total_items.setter
    def total_items(self, total_items):
        """Sets the total_items of this Inventory.

        The total amount of items currently in the inventory  # noqa: E501

        :param total_items: The total_items of this Inventory.  # noqa: E501
        :type: int
        """
        if total_items is None:
            raise ValueError("Invalid value for `total_items`, must not be `None`")  # noqa: E501

        self._total_items = total_items

    @property
    def type(self):
        """Gets the type of this Inventory.  # noqa: E501

        The type of the inventory  # noqa: E501

        :return: The type of this Inventory.  # noqa: E501
        :rtype: CatalogType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Inventory.

        The type of the inventory  # noqa: E501

        :param type: The type of this Inventory.  # noqa: E501
        :type: CatalogType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Inventory):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
