# coding: utf-8

"""
    WebAPI

    Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/...  As a quick test try reaching the route http:/localhost:8080/api/info (remember that you can only access \"localhost\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md) 

    OpenAPI spec version: <version>
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WorldFull(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'uuid': 'str',
        'link': 'str',
        'border': 'WorldFullBorder',
        'difficulty': 'str',
        'dimension': 'WorldFullDimension',
        'game_mode': 'str',
        'generator': 'WorldFullGenerator',
        'seed': 'float',
        'spawn': 'Vector3',
        'time': 'float',
        'weather': 'str'
    }

    attribute_map = {
        'name': 'name',
        'uuid': 'uuid',
        'link': 'link',
        'border': 'border',
        'difficulty': 'difficulty',
        'dimension': 'dimension',
        'game_mode': 'gameMode',
        'generator': 'generator',
        'seed': 'seed',
        'spawn': 'spawn',
        'time': 'time',
        'weather': 'weather'
    }

    def __init__(self, name=None, uuid=None, link=None, border=None, difficulty=None, dimension=None, game_mode=None, generator=None, seed=None, spawn=None, time=None, weather=None):
        """
        WorldFull - a model defined in Swagger
        """

        self._name = None
        self._uuid = None
        self._link = None
        self._border = None
        self._difficulty = None
        self._dimension = None
        self._game_mode = None
        self._generator = None
        self._seed = None
        self._spawn = None
        self._time = None
        self._weather = None

        if name is not None:
          self.name = name
        if uuid is not None:
          self.uuid = uuid
        if link is not None:
          self.link = link
        if border is not None:
          self.border = border
        if difficulty is not None:
          self.difficulty = difficulty
        if dimension is not None:
          self.dimension = dimension
        if game_mode is not None:
          self.game_mode = game_mode
        if generator is not None:
          self.generator = generator
        if seed is not None:
          self.seed = seed
        if spawn is not None:
          self.spawn = spawn
        if time is not None:
          self.time = time
        if weather is not None:
          self.weather = weather

    @property
    def name(self):
        """
        Gets the name of this WorldFull.
        The name of the world.

        :return: The name of this WorldFull.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this WorldFull.
        The name of the world.

        :param name: The name of this WorldFull.
        :type: str
        """

        self._name = name

    @property
    def uuid(self):
        """
        Gets the uuid of this WorldFull.
        The unique id of the world.

        :return: The uuid of this WorldFull.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """
        Sets the uuid of this WorldFull.
        The unique id of the world.

        :param uuid: The uuid of this WorldFull.
        :type: str
        """

        self._uuid = uuid

    @property
    def link(self):
        """
        Gets the link of this WorldFull.
        The API URL which contains detailed information about this world.

        :return: The link of this WorldFull.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """
        Sets the link of this WorldFull.
        The API URL which contains detailed information about this world.

        :param link: The link of this WorldFull.
        :type: str
        """

        self._link = link

    @property
    def border(self):
        """
        Gets the border of this WorldFull.

        :return: The border of this WorldFull.
        :rtype: WorldFullBorder
        """
        return self._border

    @border.setter
    def border(self, border):
        """
        Sets the border of this WorldFull.

        :param border: The border of this WorldFull.
        :type: WorldFullBorder
        """

        self._border = border

    @property
    def difficulty(self):
        """
        Gets the difficulty of this WorldFull.
        The current difficulty of the world.

        :return: The difficulty of this WorldFull.
        :rtype: str
        """
        return self._difficulty

    @difficulty.setter
    def difficulty(self, difficulty):
        """
        Sets the difficulty of this WorldFull.
        The current difficulty of the world.

        :param difficulty: The difficulty of this WorldFull.
        :type: str
        """

        self._difficulty = difficulty

    @property
    def dimension(self):
        """
        Gets the dimension of this WorldFull.

        :return: The dimension of this WorldFull.
        :rtype: WorldFullDimension
        """
        return self._dimension

    @dimension.setter
    def dimension(self, dimension):
        """
        Sets the dimension of this WorldFull.

        :param dimension: The dimension of this WorldFull.
        :type: WorldFullDimension
        """

        self._dimension = dimension

    @property
    def game_mode(self):
        """
        Gets the game_mode of this WorldFull.
        The default game mode of the world.

        :return: The game_mode of this WorldFull.
        :rtype: str
        """
        return self._game_mode

    @game_mode.setter
    def game_mode(self, game_mode):
        """
        Sets the game_mode of this WorldFull.
        The default game mode of the world.

        :param game_mode: The game_mode of this WorldFull.
        :type: str
        """

        self._game_mode = game_mode

    @property
    def generator(self):
        """
        Gets the generator of this WorldFull.

        :return: The generator of this WorldFull.
        :rtype: WorldFullGenerator
        """
        return self._generator

    @generator.setter
    def generator(self, generator):
        """
        Sets the generator of this WorldFull.

        :param generator: The generator of this WorldFull.
        :type: WorldFullGenerator
        """

        self._generator = generator

    @property
    def seed(self):
        """
        Gets the seed of this WorldFull.
        The seed used to generate this world.

        :return: The seed of this WorldFull.
        :rtype: float
        """
        return self._seed

    @seed.setter
    def seed(self, seed):
        """
        Sets the seed of this WorldFull.
        The seed used to generate this world.

        :param seed: The seed of this WorldFull.
        :type: float
        """

        self._seed = seed

    @property
    def spawn(self):
        """
        Gets the spawn of this WorldFull.

        :return: The spawn of this WorldFull.
        :rtype: Vector3
        """
        return self._spawn

    @spawn.setter
    def spawn(self, spawn):
        """
        Sets the spawn of this WorldFull.

        :param spawn: The spawn of this WorldFull.
        :type: Vector3
        """

        self._spawn = spawn

    @property
    def time(self):
        """
        Gets the time of this WorldFull.
        The current in game time.

        :return: The time of this WorldFull.
        :rtype: float
        """
        return self._time

    @time.setter
    def time(self, time):
        """
        Sets the time of this WorldFull.
        The current in game time.

        :param time: The time of this WorldFull.
        :type: float
        """

        self._time = time

    @property
    def weather(self):
        """
        Gets the weather of this WorldFull.
        The current weather of the world.

        :return: The weather of this WorldFull.
        :rtype: str
        """
        return self._weather

    @weather.setter
    def weather(self, weather):
        """
        Sets the weather of this WorldFull.
        The current weather of the world.

        :param weather: The weather of this WorldFull.
        :type: str
        """

        self._weather = weather

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WorldFull):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
