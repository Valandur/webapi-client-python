# coding: utf-8

"""
    WebAPI

    Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/...  As a quick test try reaching the route http:/localhost:8080/api/info (remember that you can only access \"localhost\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md) 

    OpenAPI spec version: <version>
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class MessageFull(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uuid': 'str',
        'id': 'str',
        'target': 'str',
        'message': 'str',
        'once': 'bool',
        'options': 'list[MessageOption]'
    }

    attribute_map = {
        'uuid': 'uuid',
        'id': 'id',
        'target': 'target',
        'message': 'message',
        'once': 'once',
        'options': 'options'
    }

    def __init__(self, uuid=None, id=None, target=None, message=None, once=None, options=None):
        """
        MessageFull - a model defined in Swagger
        """

        self._uuid = None
        self._id = None
        self._target = None
        self._message = None
        self._once = None
        self._options = None

        if uuid is not None:
          self.uuid = uuid
        if id is not None:
          self.id = id
        if target is not None:
          self.target = target
        if message is not None:
          self.message = message
        if once is not None:
          self.once = once
        if options is not None:
          self.options = options

    @property
    def uuid(self):
        """
        Gets the uuid of this MessageFull.
        The unique UUID assigned to the message by the Web-API.

        :return: The uuid of this MessageFull.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """
        Sets the uuid of this MessageFull.
        The unique UUID assigned to the message by the Web-API.

        :param uuid: The uuid of this MessageFull.
        :type: str
        """

        self._uuid = uuid

    @property
    def id(self):
        """
        Gets the id of this MessageFull.
        The id of the message. This will be sent back in the reply, so you can identify the request.

        :return: The id of this MessageFull.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this MessageFull.
        The id of the message. This will be sent back in the reply, so you can identify the request.

        :param id: The id of this MessageFull.
        :type: str
        """

        self._id = id

    @property
    def target(self):
        """
        Gets the target of this MessageFull.
        The UUID of the player this message is sent to.

        :return: The target of this MessageFull.
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """
        Sets the target of this MessageFull.
        The UUID of the player this message is sent to.

        :param target: The target of this MessageFull.
        :type: str
        """

        self._target = target

    @property
    def message(self):
        """
        Gets the message of this MessageFull.
        The message sent to the player. Text formatting can be applied with ampersand formatting.

        :return: The message of this MessageFull.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """
        Sets the message of this MessageFull.
        The message sent to the player. Text formatting can be applied with ampersand formatting.

        :param message: The message of this MessageFull.
        :type: str
        """

        self._message = message

    @property
    def once(self):
        """
        Gets the once of this MessageFull.
        True if the target can only select one response for this message (further responses are not sent to the webhook endpoint) 

        :return: The once of this MessageFull.
        :rtype: bool
        """
        return self._once

    @once.setter
    def once(self, once):
        """
        Sets the once of this MessageFull.
        True if the target can only select one response for this message (further responses are not sent to the webhook endpoint) 

        :param once: The once of this MessageFull.
        :type: bool
        """

        self._once = once

    @property
    def options(self):
        """
        Gets the options of this MessageFull.
        These are the options the player can choose from. The key is sent back to the server, the value is displayed to the player. 

        :return: The options of this MessageFull.
        :rtype: list[MessageOption]
        """
        return self._options

    @options.setter
    def options(self, options):
        """
        Sets the options of this MessageFull.
        These are the options the player can choose from. The key is sent back to the server, the value is displayed to the player. 

        :param options: The options of this MessageFull.
        :type: list[MessageOption]
        """

        self._options = options

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, MessageFull):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
