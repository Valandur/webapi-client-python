# coding: utf-8

"""
    WebAPI

    Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/...  As a quick test try reaching the route http:/localhost:8080/api/info (remember that you can only access \"localhost\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md) 

    OpenAPI spec version: <version>
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class UpdateWorldRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'seed': 'float',
        'generator': 'str',
        'game_mode': 'str',
        'difficulty': 'str',
        'load_on_startup': 'bool',
        'keep_spawn_loaded': 'bool',
        'allow_commands': 'bool',
        'uses_map_features': 'bool',
        'loaded': 'bool',
        'game_rules': 'object'
    }

    attribute_map = {
        'name': 'name',
        'seed': 'seed',
        'generator': 'generator',
        'game_mode': 'gameMode',
        'difficulty': 'difficulty',
        'load_on_startup': 'loadOnStartup',
        'keep_spawn_loaded': 'keepSpawnLoaded',
        'allow_commands': 'allowCommands',
        'uses_map_features': 'usesMapFeatures',
        'loaded': 'loaded',
        'game_rules': 'gameRules'
    }

    def __init__(self, name=None, seed=None, generator=None, game_mode=None, difficulty=None, load_on_startup=None, keep_spawn_loaded=None, allow_commands=None, uses_map_features=None, loaded=None, game_rules=None):
        """
        UpdateWorldRequest - a model defined in Swagger
        """

        self._name = None
        self._seed = None
        self._generator = None
        self._game_mode = None
        self._difficulty = None
        self._load_on_startup = None
        self._keep_spawn_loaded = None
        self._allow_commands = None
        self._uses_map_features = None
        self._loaded = None
        self._game_rules = None

        if name is not None:
          self.name = name
        if seed is not None:
          self.seed = seed
        if generator is not None:
          self.generator = generator
        if game_mode is not None:
          self.game_mode = game_mode
        if difficulty is not None:
          self.difficulty = difficulty
        if load_on_startup is not None:
          self.load_on_startup = load_on_startup
        if keep_spawn_loaded is not None:
          self.keep_spawn_loaded = keep_spawn_loaded
        if allow_commands is not None:
          self.allow_commands = allow_commands
        if uses_map_features is not None:
          self.uses_map_features = uses_map_features
        if loaded is not None:
          self.loaded = loaded
        if game_rules is not None:
          self.game_rules = game_rules

    @property
    def name(self):
        """
        Gets the name of this UpdateWorldRequest.
        The name of the world.

        :return: The name of this UpdateWorldRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this UpdateWorldRequest.
        The name of the world.

        :param name: The name of this UpdateWorldRequest.
        :type: str
        """

        self._name = name

    @property
    def seed(self):
        """
        Gets the seed of this UpdateWorldRequest.
        The seed number. A random seed is generated if not provided.

        :return: The seed of this UpdateWorldRequest.
        :rtype: float
        """
        return self._seed

    @seed.setter
    def seed(self, seed):
        """
        Sets the seed of this UpdateWorldRequest.
        The seed number. A random seed is generated if not provided.

        :param seed: The seed of this UpdateWorldRequest.
        :type: float
        """

        self._seed = seed

    @property
    def generator(self):
        """
        Gets the generator of this UpdateWorldRequest.
        The id of the generator type to use. Check `/registry/org.spongepowered.api.world.GeneratorType`.

        :return: The generator of this UpdateWorldRequest.
        :rtype: str
        """
        return self._generator

    @generator.setter
    def generator(self, generator):
        """
        Sets the generator of this UpdateWorldRequest.
        The id of the generator type to use. Check `/registry/org.spongepowered.api.world.GeneratorType`.

        :param generator: The generator of this UpdateWorldRequest.
        :type: str
        """

        self._generator = generator

    @property
    def game_mode(self):
        """
        Gets the game_mode of this UpdateWorldRequest.
        The id of the game mode to use. Check `/registry/org.spongepowered.api.entity.living.player.gamemode.GameMode`.

        :return: The game_mode of this UpdateWorldRequest.
        :rtype: str
        """
        return self._game_mode

    @game_mode.setter
    def game_mode(self, game_mode):
        """
        Sets the game_mode of this UpdateWorldRequest.
        The id of the game mode to use. Check `/registry/org.spongepowered.api.entity.living.player.gamemode.GameMode`.

        :param game_mode: The game_mode of this UpdateWorldRequest.
        :type: str
        """

        self._game_mode = game_mode

    @property
    def difficulty(self):
        """
        Gets the difficulty of this UpdateWorldRequest.
        The id of the difficutly to use. Check `/registry/org.spongepowered.api.world.difficulty.Difficulty`.

        :return: The difficulty of this UpdateWorldRequest.
        :rtype: str
        """
        return self._difficulty

    @difficulty.setter
    def difficulty(self, difficulty):
        """
        Sets the difficulty of this UpdateWorldRequest.
        The id of the difficutly to use. Check `/registry/org.spongepowered.api.world.difficulty.Difficulty`.

        :param difficulty: The difficulty of this UpdateWorldRequest.
        :type: str
        """

        self._difficulty = difficulty

    @property
    def load_on_startup(self):
        """
        Gets the load_on_startup of this UpdateWorldRequest.
        True if the world is loaded when the server starts, false otherwise.

        :return: The load_on_startup of this UpdateWorldRequest.
        :rtype: bool
        """
        return self._load_on_startup

    @load_on_startup.setter
    def load_on_startup(self, load_on_startup):
        """
        Sets the load_on_startup of this UpdateWorldRequest.
        True if the world is loaded when the server starts, false otherwise.

        :param load_on_startup: The load_on_startup of this UpdateWorldRequest.
        :type: bool
        """

        self._load_on_startup = load_on_startup

    @property
    def keep_spawn_loaded(self):
        """
        Gets the keep_spawn_loaded of this UpdateWorldRequest.
        True to keep the spawn area of the world loaded, even if it is empty.

        :return: The keep_spawn_loaded of this UpdateWorldRequest.
        :rtype: bool
        """
        return self._keep_spawn_loaded

    @keep_spawn_loaded.setter
    def keep_spawn_loaded(self, keep_spawn_loaded):
        """
        Sets the keep_spawn_loaded of this UpdateWorldRequest.
        True to keep the spawn area of the world loaded, even if it is empty.

        :param keep_spawn_loaded: The keep_spawn_loaded of this UpdateWorldRequest.
        :type: bool
        """

        self._keep_spawn_loaded = keep_spawn_loaded

    @property
    def allow_commands(self):
        """
        Gets the allow_commands of this UpdateWorldRequest.
        True if executing commands is allowed in the world.

        :return: The allow_commands of this UpdateWorldRequest.
        :rtype: bool
        """
        return self._allow_commands

    @allow_commands.setter
    def allow_commands(self, allow_commands):
        """
        Sets the allow_commands of this UpdateWorldRequest.
        True if executing commands is allowed in the world.

        :param allow_commands: The allow_commands of this UpdateWorldRequest.
        :type: bool
        """

        self._allow_commands = allow_commands

    @property
    def uses_map_features(self):
        """
        Gets the uses_map_features of this UpdateWorldRequest.
        True to use map features of the generator (such as villages).

        :return: The uses_map_features of this UpdateWorldRequest.
        :rtype: bool
        """
        return self._uses_map_features

    @uses_map_features.setter
    def uses_map_features(self, uses_map_features):
        """
        Sets the uses_map_features of this UpdateWorldRequest.
        True to use map features of the generator (such as villages).

        :param uses_map_features: The uses_map_features of this UpdateWorldRequest.
        :type: bool
        """

        self._uses_map_features = uses_map_features

    @property
    def loaded(self):
        """
        Gets the loaded of this UpdateWorldRequest.
        True to load the world, false to unload it.

        :return: The loaded of this UpdateWorldRequest.
        :rtype: bool
        """
        return self._loaded

    @loaded.setter
    def loaded(self, loaded):
        """
        Sets the loaded of this UpdateWorldRequest.
        True to load the world, false to unload it.

        :param loaded: The loaded of this UpdateWorldRequest.
        :type: bool
        """

        self._loaded = loaded

    @property
    def game_rules(self):
        """
        Gets the game_rules of this UpdateWorldRequest.
        A map of keys to values for the game rules of the world.

        :return: The game_rules of this UpdateWorldRequest.
        :rtype: object
        """
        return self._game_rules

    @game_rules.setter
    def game_rules(self, game_rules):
        """
        Sets the game_rules of this UpdateWorldRequest.
        A map of keys to values for the game rules of the world.

        :param game_rules: The game_rules of this UpdateWorldRequest.
        :type: object
        """

        self._game_rules = game_rules

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, UpdateWorldRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
