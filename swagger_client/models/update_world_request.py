# coding: utf-8

"""
    Web-API

    Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/v5...  As a quick test try reaching the route http:/localhost:8080/api/v5/info (remember that you can only access \\\"localhost\\\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # List endpoints Lots of objects offer an endpoint to list all objects (e.g. `GET: /world` to get all worlds). These endpoints return only the properties marked 'required' by default, because the list might be quite large. If you want to return ALL data for a list endpoint add the query parameter `details`, (e.g. `GET: /world?details`).  > Remember that in this case the data returned by the endpoint might be quite large.  # Debugging endpoints Apart from the `?details` flag you can also pass some other flags for debugging purposes. Remember that you must include the first query parameter with `?`, and further ones with `&`:  `details`: Includes details for list endpoints  `accept=[json/xml]`: Manually set the accept content type. This is good for browser testing, **BUT DON'T USE THIS IN PRODUCTION, YOU CAN SUPPLY THE `Accepts` HEADER FOR THAT**  `pretty`: Pretty prints the data, also good for debugging in the browser.  An example request might look like this: `http://localhost:8080/api/v5/world?details&accpet=json&pretty&key=MY-API-KEY`  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md)  # noqa: E501

    OpenAPI spec version: @version@
    Contact: inithilian@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.catalog_type import CatalogType  # noqa: F401,E501
from swagger_client.models.game_mode import GameMode  # noqa: F401,E501


class UpdateWorldRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'allow_commands': 'bool',
        'difficulty': 'CatalogType',
        'game_mode': 'GameMode',
        'game_rules': 'dict(str, str)',
        'generator': 'CatalogType',
        'keep_spawn_loaded': 'bool',
        'load_on_startup': 'bool',
        'loaded': 'bool',
        'seed': 'int',
        'uses_map_features': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'allow_commands': 'allowCommands',
        'difficulty': 'difficulty',
        'game_mode': 'gameMode',
        'game_rules': 'gameRules',
        'generator': 'generator',
        'keep_spawn_loaded': 'keepSpawnLoaded',
        'load_on_startup': 'loadOnStartup',
        'loaded': 'loaded',
        'seed': 'seed',
        'uses_map_features': 'usesMapFeatures'
    }

    def __init__(self, name=None, allow_commands=None, difficulty=None, game_mode=None, game_rules=None, generator=None, keep_spawn_loaded=None, load_on_startup=None, loaded=None, seed=None, uses_map_features=None):  # noqa: E501
        """UpdateWorldRequest - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._allow_commands = None
        self._difficulty = None
        self._game_mode = None
        self._game_rules = None
        self._generator = None
        self._keep_spawn_loaded = None
        self._load_on_startup = None
        self._loaded = None
        self._seed = None
        self._uses_map_features = None
        self.discriminator = None

        self.name = name
        if allow_commands is not None:
            self.allow_commands = allow_commands
        if difficulty is not None:
            self.difficulty = difficulty
        if game_mode is not None:
            self.game_mode = game_mode
        if game_rules is not None:
            self.game_rules = game_rules
        if generator is not None:
            self.generator = generator
        if keep_spawn_loaded is not None:
            self.keep_spawn_loaded = keep_spawn_loaded
        if load_on_startup is not None:
            self.load_on_startup = load_on_startup
        if loaded is not None:
            self.loaded = loaded
        if seed is not None:
            self.seed = seed
        if uses_map_features is not None:
            self.uses_map_features = uses_map_features

    @property
    def name(self):
        """Gets the name of this UpdateWorldRequest.  # noqa: E501

        The name of the world  # noqa: E501

        :return: The name of this UpdateWorldRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateWorldRequest.

        The name of the world  # noqa: E501

        :param name: The name of this UpdateWorldRequest.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def allow_commands(self):
        """Gets the allow_commands of this UpdateWorldRequest.  # noqa: E501


        :return: The allow_commands of this UpdateWorldRequest.  # noqa: E501
        :rtype: bool
        """
        return self._allow_commands

    @allow_commands.setter
    def allow_commands(self, allow_commands):
        """Sets the allow_commands of this UpdateWorldRequest.


        :param allow_commands: The allow_commands of this UpdateWorldRequest.  # noqa: E501
        :type: bool
        """

        self._allow_commands = allow_commands

    @property
    def difficulty(self):
        """Gets the difficulty of this UpdateWorldRequest.  # noqa: E501

        Which difficulty the world is set to  # noqa: E501

        :return: The difficulty of this UpdateWorldRequest.  # noqa: E501
        :rtype: CatalogType
        """
        return self._difficulty

    @difficulty.setter
    def difficulty(self, difficulty):
        """Sets the difficulty of this UpdateWorldRequest.

        Which difficulty the world is set to  # noqa: E501

        :param difficulty: The difficulty of this UpdateWorldRequest.  # noqa: E501
        :type: CatalogType
        """

        self._difficulty = difficulty

    @property
    def game_mode(self):
        """Gets the game_mode of this UpdateWorldRequest.  # noqa: E501

        Which game mode the world defaults to  # noqa: E501

        :return: The game_mode of this UpdateWorldRequest.  # noqa: E501
        :rtype: GameMode
        """
        return self._game_mode

    @game_mode.setter
    def game_mode(self, game_mode):
        """Sets the game_mode of this UpdateWorldRequest.

        Which game mode the world defaults to  # noqa: E501

        :param game_mode: The game_mode of this UpdateWorldRequest.  # noqa: E501
        :type: GameMode
        """

        self._game_mode = game_mode

    @property
    def game_rules(self):
        """Gets the game_rules of this UpdateWorldRequest.  # noqa: E501

        The game rule settings of this world  # noqa: E501

        :return: The game_rules of this UpdateWorldRequest.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._game_rules

    @game_rules.setter
    def game_rules(self, game_rules):
        """Sets the game_rules of this UpdateWorldRequest.

        The game rule settings of this world  # noqa: E501

        :param game_rules: The game_rules of this UpdateWorldRequest.  # noqa: E501
        :type: dict(str, str)
        """

        self._game_rules = game_rules

    @property
    def generator(self):
        """Gets the generator of this UpdateWorldRequest.  # noqa: E501

        Which generator to use for the world  # noqa: E501

        :return: The generator of this UpdateWorldRequest.  # noqa: E501
        :rtype: CatalogType
        """
        return self._generator

    @generator.setter
    def generator(self, generator):
        """Sets the generator of this UpdateWorldRequest.

        Which generator to use for the world  # noqa: E501

        :param generator: The generator of this UpdateWorldRequest.  # noqa: E501
        :type: CatalogType
        """

        self._generator = generator

    @property
    def keep_spawn_loaded(self):
        """Gets the keep_spawn_loaded of this UpdateWorldRequest.  # noqa: E501


        :return: The keep_spawn_loaded of this UpdateWorldRequest.  # noqa: E501
        :rtype: bool
        """
        return self._keep_spawn_loaded

    @keep_spawn_loaded.setter
    def keep_spawn_loaded(self, keep_spawn_loaded):
        """Sets the keep_spawn_loaded of this UpdateWorldRequest.


        :param keep_spawn_loaded: The keep_spawn_loaded of this UpdateWorldRequest.  # noqa: E501
        :type: bool
        """

        self._keep_spawn_loaded = keep_spawn_loaded

    @property
    def load_on_startup(self):
        """Gets the load_on_startup of this UpdateWorldRequest.  # noqa: E501


        :return: The load_on_startup of this UpdateWorldRequest.  # noqa: E501
        :rtype: bool
        """
        return self._load_on_startup

    @load_on_startup.setter
    def load_on_startup(self, load_on_startup):
        """Sets the load_on_startup of this UpdateWorldRequest.


        :param load_on_startup: The load_on_startup of this UpdateWorldRequest.  # noqa: E501
        :type: bool
        """

        self._load_on_startup = load_on_startup

    @property
    def loaded(self):
        """Gets the loaded of this UpdateWorldRequest.  # noqa: E501

        True if the world should be loaded, false otherwise  # noqa: E501

        :return: The loaded of this UpdateWorldRequest.  # noqa: E501
        :rtype: bool
        """
        return self._loaded

    @loaded.setter
    def loaded(self, loaded):
        """Sets the loaded of this UpdateWorldRequest.

        True if the world should be loaded, false otherwise  # noqa: E501

        :param loaded: The loaded of this UpdateWorldRequest.  # noqa: E501
        :type: bool
        """

        self._loaded = loaded

    @property
    def seed(self):
        """Gets the seed of this UpdateWorldRequest.  # noqa: E501

        The seed of the world  # noqa: E501

        :return: The seed of this UpdateWorldRequest.  # noqa: E501
        :rtype: int
        """
        return self._seed

    @seed.setter
    def seed(self, seed):
        """Sets the seed of this UpdateWorldRequest.

        The seed of the world  # noqa: E501

        :param seed: The seed of this UpdateWorldRequest.  # noqa: E501
        :type: int
        """

        self._seed = seed

    @property
    def uses_map_features(self):
        """Gets the uses_map_features of this UpdateWorldRequest.  # noqa: E501


        :return: The uses_map_features of this UpdateWorldRequest.  # noqa: E501
        :rtype: bool
        """
        return self._uses_map_features

    @uses_map_features.setter
    def uses_map_features(self, uses_map_features):
        """Sets the uses_map_features of this UpdateWorldRequest.


        :param uses_map_features: The uses_map_features of this UpdateWorldRequest.  # noqa: E501
        :type: bool
        """

        self._uses_map_features = uses_map_features

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateWorldRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
