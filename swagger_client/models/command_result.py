# coding: utf-8

"""
    Web-API

    Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/v5...  As a quick test try reaching the route http:/localhost:8080/api/v5/info (remember that you can only access \\\"localhost\\\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # List endpoints Lots of objects offer an endpoint to list all objects (e.g. `GET: /world` to get all worlds). These endpoints return only the properties marked 'required' by default, because the list might be quite large. If you want to return ALL data for a list endpoint add the query parameter `details`, (e.g. `GET: /world?details`).  > Remember that in this case the data returned by the endpoint might be quite large.  # Debugging endpoints Apart from the `?details` flag you can also pass some other flags for debugging purposes. Remember that you must include the first query parameter with `?`, and further ones with `&`:  `details`: Includes details for list endpoints  `accept=[json/xml]`: Manually set the accept content type. This is good for browser testing, **BUT DON'T USE THIS IN PRODUCTION, YOU CAN SUPPLY THE `Accepts` HEADER FOR THAT**  `pretty`: Pretty prints the data, also good for debugging in the browser.  An example request might look like this: `http://localhost:8080/api/v5/world?details&accpet=json&pretty&key=MY-API-KEY`  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md)  # noqa: E501

    OpenAPI spec version: 5.4.2-S7.1.0
    Contact: inithilian@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CommandResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'affected_blocks': 'int',
        'affected_entities': 'int',
        'affected_items': 'int',
        'query_result': 'int',
        'success_count': 'int'
    }

    attribute_map = {
        'affected_blocks': 'affectedBlocks',
        'affected_entities': 'affectedEntities',
        'affected_items': 'affectedItems',
        'query_result': 'queryResult',
        'success_count': 'successCount'
    }

    def __init__(self, affected_blocks=None, affected_entities=None, affected_items=None, query_result=None, success_count=None):  # noqa: E501
        """CommandResult - a model defined in Swagger"""  # noqa: E501

        self._affected_blocks = None
        self._affected_entities = None
        self._affected_items = None
        self._query_result = None
        self._success_count = None
        self.discriminator = None

        if affected_blocks is not None:
            self.affected_blocks = affected_blocks
        if affected_entities is not None:
            self.affected_entities = affected_entities
        if affected_items is not None:
            self.affected_items = affected_items
        if query_result is not None:
            self.query_result = query_result
        if success_count is not None:
            self.success_count = success_count

    @property
    def affected_blocks(self):
        """Gets the affected_blocks of this CommandResult.  # noqa: E501

        The number of blocks that were affected by this command  # noqa: E501

        :return: The affected_blocks of this CommandResult.  # noqa: E501
        :rtype: int
        """
        return self._affected_blocks

    @affected_blocks.setter
    def affected_blocks(self, affected_blocks):
        """Sets the affected_blocks of this CommandResult.

        The number of blocks that were affected by this command  # noqa: E501

        :param affected_blocks: The affected_blocks of this CommandResult.  # noqa: E501
        :type: int
        """

        self._affected_blocks = affected_blocks

    @property
    def affected_entities(self):
        """Gets the affected_entities of this CommandResult.  # noqa: E501

        The number of entities that were affected by this command  # noqa: E501

        :return: The affected_entities of this CommandResult.  # noqa: E501
        :rtype: int
        """
        return self._affected_entities

    @affected_entities.setter
    def affected_entities(self, affected_entities):
        """Sets the affected_entities of this CommandResult.

        The number of entities that were affected by this command  # noqa: E501

        :param affected_entities: The affected_entities of this CommandResult.  # noqa: E501
        :type: int
        """

        self._affected_entities = affected_entities

    @property
    def affected_items(self):
        """Gets the affected_items of this CommandResult.  # noqa: E501

        The number of items that were affected by this command  # noqa: E501

        :return: The affected_items of this CommandResult.  # noqa: E501
        :rtype: int
        """
        return self._affected_items

    @affected_items.setter
    def affected_items(self, affected_items):
        """Sets the affected_items of this CommandResult.

        The number of items that were affected by this command  # noqa: E501

        :param affected_items: The affected_items of this CommandResult.  # noqa: E501
        :type: int
        """

        self._affected_items = affected_items

    @property
    def query_result(self):
        """Gets the query_result of this CommandResult.  # noqa: E501

        The results of the query  # noqa: E501

        :return: The query_result of this CommandResult.  # noqa: E501
        :rtype: int
        """
        return self._query_result

    @query_result.setter
    def query_result(self, query_result):
        """Sets the query_result of this CommandResult.

        The results of the query  # noqa: E501

        :param query_result: The query_result of this CommandResult.  # noqa: E501
        :type: int
        """

        self._query_result = query_result

    @property
    def success_count(self):
        """Gets the success_count of this CommandResult.  # noqa: E501

        The success count  # noqa: E501

        :return: The success_count of this CommandResult.  # noqa: E501
        :rtype: int
        """
        return self._success_count

    @success_count.setter
    def success_count(self, success_count):
        """Sets the success_count of this CommandResult.

        The success count  # noqa: E501

        :param success_count: The success_count of this CommandResult.  # noqa: E501
        :type: int
        """

        self._success_count = success_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommandResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
