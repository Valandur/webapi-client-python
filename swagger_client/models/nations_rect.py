# coding: utf-8

"""
    WebAPI

    Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/...  As a quick test try reaching the route http:/localhost:8080/api/info (remember that you can only access \"localhost\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md) 

    OpenAPI spec version: <version>
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class NationsRect(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'world': 'World',
        'min_x': 'float',
        'min_y': 'float',
        'max_x': 'float',
        'max_y': 'float'
    }

    attribute_map = {
        'world': 'world',
        'min_x': 'minX',
        'min_y': 'minY',
        'max_x': 'maxX',
        'max_y': 'maxY'
    }

    def __init__(self, world=None, min_x=None, min_y=None, max_x=None, max_y=None):
        """
        NationsRect - a model defined in Swagger
        """

        self._world = None
        self._min_x = None
        self._min_y = None
        self._max_x = None
        self._max_y = None

        if world is not None:
          self.world = world
        if min_x is not None:
          self.min_x = min_x
        if min_y is not None:
          self.min_y = min_y
        if max_x is not None:
          self.max_x = max_x
        if max_y is not None:
          self.max_y = max_y

    @property
    def world(self):
        """
        Gets the world of this NationsRect.

        :return: The world of this NationsRect.
        :rtype: World
        """
        return self._world

    @world.setter
    def world(self, world):
        """
        Sets the world of this NationsRect.

        :param world: The world of this NationsRect.
        :type: World
        """

        self._world = world

    @property
    def min_x(self):
        """
        Gets the min_x of this NationsRect.
        The minimum x coordinate of this rect.

        :return: The min_x of this NationsRect.
        :rtype: float
        """
        return self._min_x

    @min_x.setter
    def min_x(self, min_x):
        """
        Sets the min_x of this NationsRect.
        The minimum x coordinate of this rect.

        :param min_x: The min_x of this NationsRect.
        :type: float
        """

        self._min_x = min_x

    @property
    def min_y(self):
        """
        Gets the min_y of this NationsRect.
        The minimum y coordinate of this rect.

        :return: The min_y of this NationsRect.
        :rtype: float
        """
        return self._min_y

    @min_y.setter
    def min_y(self, min_y):
        """
        Sets the min_y of this NationsRect.
        The minimum y coordinate of this rect.

        :param min_y: The min_y of this NationsRect.
        :type: float
        """

        self._min_y = min_y

    @property
    def max_x(self):
        """
        Gets the max_x of this NationsRect.
        The maximum x coordinate of this rect.

        :return: The max_x of this NationsRect.
        :rtype: float
        """
        return self._max_x

    @max_x.setter
    def max_x(self, max_x):
        """
        Sets the max_x of this NationsRect.
        The maximum x coordinate of this rect.

        :param max_x: The max_x of this NationsRect.
        :type: float
        """

        self._max_x = max_x

    @property
    def max_y(self):
        """
        Gets the max_y of this NationsRect.
        The maximum y coordinate of this rect.

        :return: The max_y of this NationsRect.
        :rtype: float
        """
        return self._max_y

    @max_y.setter
    def max_y(self, max_y):
        """
        Sets the max_y of this NationsRect.
        The maximum y coordinate of this rect.

        :param max_y: The max_y of this NationsRect.
        :type: float
        """

        self._max_y = max_y

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, NationsRect):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
