# coding: utf-8

"""
    WebAPI

    Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/...  As a quick test try reaching the route http:/localhost:8080/api/info (remember that you can only access \"localhost\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md) 

    OpenAPI spec version: <version>
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ServerInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'motd': 'str',
        'players': 'float',
        'max_players': 'float',
        'uptime_ticks': 'float',
        'tps': 'float',
        'has_whitelist': 'bool',
        'minecraft_version': 'str',
        'game': 'ServerInfoDetail',
        'api': 'ServerInfoDetail',
        'implementation': 'ServerInfoDetail'
    }

    attribute_map = {
        'motd': 'motd',
        'players': 'players',
        'max_players': 'maxPlayers',
        'uptime_ticks': 'uptimeTicks',
        'tps': 'tps',
        'has_whitelist': 'hasWhitelist',
        'minecraft_version': 'minecraftVersion',
        'game': 'game',
        'api': 'api',
        'implementation': 'implementation'
    }

    def __init__(self, motd=None, players=None, max_players=None, uptime_ticks=None, tps=None, has_whitelist=None, minecraft_version=None, game=None, api=None, implementation=None):
        """
        ServerInfo - a model defined in Swagger
        """

        self._motd = None
        self._players = None
        self._max_players = None
        self._uptime_ticks = None
        self._tps = None
        self._has_whitelist = None
        self._minecraft_version = None
        self._game = None
        self._api = None
        self._implementation = None

        if motd is not None:
          self.motd = motd
        if players is not None:
          self.players = players
        if max_players is not None:
          self.max_players = max_players
        if uptime_ticks is not None:
          self.uptime_ticks = uptime_ticks
        if tps is not None:
          self.tps = tps
        if has_whitelist is not None:
          self.has_whitelist = has_whitelist
        if minecraft_version is not None:
          self.minecraft_version = minecraft_version
        if game is not None:
          self.game = game
        if api is not None:
          self.api = api
        if implementation is not None:
          self.implementation = implementation

    @property
    def motd(self):
        """
        Gets the motd of this ServerInfo.
        The message of the day set on the server.

        :return: The motd of this ServerInfo.
        :rtype: str
        """
        return self._motd

    @motd.setter
    def motd(self, motd):
        """
        Sets the motd of this ServerInfo.
        The message of the day set on the server.

        :param motd: The motd of this ServerInfo.
        :type: str
        """

        self._motd = motd

    @property
    def players(self):
        """
        Gets the players of this ServerInfo.
        The amount of players currently playing on the server

        :return: The players of this ServerInfo.
        :rtype: float
        """
        return self._players

    @players.setter
    def players(self, players):
        """
        Sets the players of this ServerInfo.
        The amount of players currently playing on the server

        :param players: The players of this ServerInfo.
        :type: float
        """

        self._players = players

    @property
    def max_players(self):
        """
        Gets the max_players of this ServerInfo.
        The maximum amount of players allowed on the server

        :return: The max_players of this ServerInfo.
        :rtype: float
        """
        return self._max_players

    @max_players.setter
    def max_players(self, max_players):
        """
        Sets the max_players of this ServerInfo.
        The maximum amount of players allowed on the server

        :param max_players: The max_players of this ServerInfo.
        :type: float
        """

        self._max_players = max_players

    @property
    def uptime_ticks(self):
        """
        Gets the uptime_ticks of this ServerInfo.
        The number of ticks the server has been running

        :return: The uptime_ticks of this ServerInfo.
        :rtype: float
        """
        return self._uptime_ticks

    @uptime_ticks.setter
    def uptime_ticks(self, uptime_ticks):
        """
        Sets the uptime_ticks of this ServerInfo.
        The number of ticks the server has been running

        :param uptime_ticks: The uptime_ticks of this ServerInfo.
        :type: float
        """

        self._uptime_ticks = uptime_ticks

    @property
    def tps(self):
        """
        Gets the tps of this ServerInfo.
        The average ticks per second the server is running with. 20 is ideal.

        :return: The tps of this ServerInfo.
        :rtype: float
        """
        return self._tps

    @tps.setter
    def tps(self, tps):
        """
        Sets the tps of this ServerInfo.
        The average ticks per second the server is running with. 20 is ideal.

        :param tps: The tps of this ServerInfo.
        :type: float
        """

        self._tps = tps

    @property
    def has_whitelist(self):
        """
        Gets the has_whitelist of this ServerInfo.
        True if the server has a whitelist, false otherwise.

        :return: The has_whitelist of this ServerInfo.
        :rtype: bool
        """
        return self._has_whitelist

    @has_whitelist.setter
    def has_whitelist(self, has_whitelist):
        """
        Sets the has_whitelist of this ServerInfo.
        True if the server has a whitelist, false otherwise.

        :param has_whitelist: The has_whitelist of this ServerInfo.
        :type: bool
        """

        self._has_whitelist = has_whitelist

    @property
    def minecraft_version(self):
        """
        Gets the minecraft_version of this ServerInfo.
        The minecraft version running on the server.

        :return: The minecraft_version of this ServerInfo.
        :rtype: str
        """
        return self._minecraft_version

    @minecraft_version.setter
    def minecraft_version(self, minecraft_version):
        """
        Sets the minecraft_version of this ServerInfo.
        The minecraft version running on the server.

        :param minecraft_version: The minecraft_version of this ServerInfo.
        :type: str
        """

        self._minecraft_version = minecraft_version

    @property
    def game(self):
        """
        Gets the game of this ServerInfo.

        :return: The game of this ServerInfo.
        :rtype: ServerInfoDetail
        """
        return self._game

    @game.setter
    def game(self, game):
        """
        Sets the game of this ServerInfo.

        :param game: The game of this ServerInfo.
        :type: ServerInfoDetail
        """

        self._game = game

    @property
    def api(self):
        """
        Gets the api of this ServerInfo.

        :return: The api of this ServerInfo.
        :rtype: ServerInfoDetail
        """
        return self._api

    @api.setter
    def api(self, api):
        """
        Sets the api of this ServerInfo.

        :param api: The api of this ServerInfo.
        :type: ServerInfoDetail
        """

        self._api = api

    @property
    def implementation(self):
        """
        Gets the implementation of this ServerInfo.

        :return: The implementation of this ServerInfo.
        :rtype: ServerInfoDetail
        """
        return self._implementation

    @implementation.setter
    def implementation(self, implementation):
        """
        Sets the implementation of this ServerInfo.

        :param implementation: The implementation of this ServerInfo.
        :type: ServerInfoDetail
        """

        self._implementation = implementation

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ServerInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
