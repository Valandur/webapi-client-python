# coding: utf-8

"""
    Web-API

    Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/v5...  As a quick test try reaching the route http:/localhost:8080/api/v5/info (remember that you can only access \\\"localhost\\\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # List endpoints Lots of objects offer an endpoint to list all objects (e.g. `GET: /world` to get all worlds). These endpoints return only the properties marked 'required' by default, because the list might be quite large. If you want to return ALL data for a list endpoint add the query parameter `details`, (e.g. `GET: /world?details`).  > Remember that in this case the data returned by the endpoint might be quite large.  # Debugging endpoints Apart from the `?details` flag you can also pass some other flags for debugging purposes. Remember that you must include the first query parameter with `?`, and further ones with `&`:  `details`: Includes details for list endpoints  `accept=[json/xml]`: Manually set the accept content type. This is good for browser testing, **BUT DON'T USE THIS IN PRODUCTION, YOU CAN SUPPLY THE `Accepts` HEADER FOR THAT**  `pretty`: Pretty prints the data, also good for debugging in the browser.  An example request might look like this: `http://localhost:8080/api/v5/world?details&accpet=json&pretty&key=MY-API-KEY`  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md)  # noqa: E501

    OpenAPI spec version: 5.4.2-S7.1.0
    Contact: inithilian@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.plugin_container import PluginContainer  # noqa: F401,E501


class ServerInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'api': 'PluginContainer',
        'game': 'PluginContainer',
        'has_whitelist': 'bool',
        'implementation': 'PluginContainer',
        'max_players': 'int',
        'minecraft_version': 'str',
        'motd': 'str',
        'online_mode': 'bool',
        'players': 'int',
        'tps': 'float',
        'uptime_ticks': 'int',
        'address': 'str',
        'resource_pack': 'str'
    }

    attribute_map = {
        'api': 'api',
        'game': 'game',
        'has_whitelist': 'hasWhitelist',
        'implementation': 'implementation',
        'max_players': 'maxPlayers',
        'minecraft_version': 'minecraftVersion',
        'motd': 'motd',
        'online_mode': 'onlineMode',
        'players': 'players',
        'tps': 'tps',
        'uptime_ticks': 'uptimeTicks',
        'address': 'address',
        'resource_pack': 'resourcePack'
    }

    def __init__(self, api=None, game=None, has_whitelist=None, implementation=None, max_players=None, minecraft_version=None, motd=None, online_mode=None, players=None, tps=None, uptime_ticks=None, address=None, resource_pack=None):  # noqa: E501
        """ServerInfo - a model defined in Swagger"""  # noqa: E501

        self._api = None
        self._game = None
        self._has_whitelist = None
        self._implementation = None
        self._max_players = None
        self._minecraft_version = None
        self._motd = None
        self._online_mode = None
        self._players = None
        self._tps = None
        self._uptime_ticks = None
        self._address = None
        self._resource_pack = None
        self.discriminator = None

        self.api = api
        self.game = game
        self.has_whitelist = has_whitelist
        self.implementation = implementation
        self.max_players = max_players
        self.minecraft_version = minecraft_version
        self.motd = motd
        self.online_mode = online_mode
        self.players = players
        self.tps = tps
        self.uptime_ticks = uptime_ticks
        if address is not None:
            self.address = address
        if resource_pack is not None:
            self.resource_pack = resource_pack

    @property
    def api(self):
        """Gets the api of this ServerInfo.  # noqa: E501


        :return: The api of this ServerInfo.  # noqa: E501
        :rtype: PluginContainer
        """
        return self._api

    @api.setter
    def api(self, api):
        """Sets the api of this ServerInfo.


        :param api: The api of this ServerInfo.  # noqa: E501
        :type: PluginContainer
        """
        if api is None:
            raise ValueError("Invalid value for `api`, must not be `None`")  # noqa: E501

        self._api = api

    @property
    def game(self):
        """Gets the game of this ServerInfo.  # noqa: E501


        :return: The game of this ServerInfo.  # noqa: E501
        :rtype: PluginContainer
        """
        return self._game

    @game.setter
    def game(self, game):
        """Sets the game of this ServerInfo.


        :param game: The game of this ServerInfo.  # noqa: E501
        :type: PluginContainer
        """
        if game is None:
            raise ValueError("Invalid value for `game`, must not be `None`")  # noqa: E501

        self._game = game

    @property
    def has_whitelist(self):
        """Gets the has_whitelist of this ServerInfo.  # noqa: E501

        True if the server has activated the whitelist, false otherwise  # noqa: E501

        :return: The has_whitelist of this ServerInfo.  # noqa: E501
        :rtype: bool
        """
        return self._has_whitelist

    @has_whitelist.setter
    def has_whitelist(self, has_whitelist):
        """Sets the has_whitelist of this ServerInfo.

        True if the server has activated the whitelist, false otherwise  # noqa: E501

        :param has_whitelist: The has_whitelist of this ServerInfo.  # noqa: E501
        :type: bool
        """
        if has_whitelist is None:
            raise ValueError("Invalid value for `has_whitelist`, must not be `None`")  # noqa: E501

        self._has_whitelist = has_whitelist

    @property
    def implementation(self):
        """Gets the implementation of this ServerInfo.  # noqa: E501


        :return: The implementation of this ServerInfo.  # noqa: E501
        :rtype: PluginContainer
        """
        return self._implementation

    @implementation.setter
    def implementation(self, implementation):
        """Sets the implementation of this ServerInfo.


        :param implementation: The implementation of this ServerInfo.  # noqa: E501
        :type: PluginContainer
        """
        if implementation is None:
            raise ValueError("Invalid value for `implementation`, must not be `None`")  # noqa: E501

        self._implementation = implementation

    @property
    def max_players(self):
        """Gets the max_players of this ServerInfo.  # noqa: E501

        The maximum amount of players allowed on the server  # noqa: E501

        :return: The max_players of this ServerInfo.  # noqa: E501
        :rtype: int
        """
        return self._max_players

    @max_players.setter
    def max_players(self, max_players):
        """Sets the max_players of this ServerInfo.

        The maximum amount of players allowed on the server  # noqa: E501

        :param max_players: The max_players of this ServerInfo.  # noqa: E501
        :type: int
        """
        if max_players is None:
            raise ValueError("Invalid value for `max_players`, must not be `None`")  # noqa: E501

        self._max_players = max_players

    @property
    def minecraft_version(self):
        """Gets the minecraft_version of this ServerInfo.  # noqa: E501

        The Minecraft version running on the server  # noqa: E501

        :return: The minecraft_version of this ServerInfo.  # noqa: E501
        :rtype: str
        """
        return self._minecraft_version

    @minecraft_version.setter
    def minecraft_version(self, minecraft_version):
        """Sets the minecraft_version of this ServerInfo.

        The Minecraft version running on the server  # noqa: E501

        :param minecraft_version: The minecraft_version of this ServerInfo.  # noqa: E501
        :type: str
        """
        if minecraft_version is None:
            raise ValueError("Invalid value for `minecraft_version`, must not be `None`")  # noqa: E501

        self._minecraft_version = minecraft_version

    @property
    def motd(self):
        """Gets the motd of this ServerInfo.  # noqa: E501

        The message of the day set on the server  # noqa: E501

        :return: The motd of this ServerInfo.  # noqa: E501
        :rtype: str
        """
        return self._motd

    @motd.setter
    def motd(self, motd):
        """Sets the motd of this ServerInfo.

        The message of the day set on the server  # noqa: E501

        :param motd: The motd of this ServerInfo.  # noqa: E501
        :type: str
        """
        if motd is None:
            raise ValueError("Invalid value for `motd`, must not be `None`")  # noqa: E501

        self._motd = motd

    @property
    def online_mode(self):
        """Gets the online_mode of this ServerInfo.  # noqa: E501

        True if the server is in online mode and verifies connections, false otherwise  # noqa: E501

        :return: The online_mode of this ServerInfo.  # noqa: E501
        :rtype: bool
        """
        return self._online_mode

    @online_mode.setter
    def online_mode(self, online_mode):
        """Sets the online_mode of this ServerInfo.

        True if the server is in online mode and verifies connections, false otherwise  # noqa: E501

        :param online_mode: The online_mode of this ServerInfo.  # noqa: E501
        :type: bool
        """
        if online_mode is None:
            raise ValueError("Invalid value for `online_mode`, must not be `None`")  # noqa: E501

        self._online_mode = online_mode

    @property
    def players(self):
        """Gets the players of this ServerInfo.  # noqa: E501

        The amount of players currently playing on the server  # noqa: E501

        :return: The players of this ServerInfo.  # noqa: E501
        :rtype: int
        """
        return self._players

    @players.setter
    def players(self, players):
        """Sets the players of this ServerInfo.

        The amount of players currently playing on the server  # noqa: E501

        :param players: The players of this ServerInfo.  # noqa: E501
        :type: int
        """
        if players is None:
            raise ValueError("Invalid value for `players`, must not be `None`")  # noqa: E501

        self._players = players

    @property
    def tps(self):
        """Gets the tps of this ServerInfo.  # noqa: E501

        The average ticks per second the server is running with  # noqa: E501

        :return: The tps of this ServerInfo.  # noqa: E501
        :rtype: float
        """
        return self._tps

    @tps.setter
    def tps(self, tps):
        """Sets the tps of this ServerInfo.

        The average ticks per second the server is running with  # noqa: E501

        :param tps: The tps of this ServerInfo.  # noqa: E501
        :type: float
        """
        if tps is None:
            raise ValueError("Invalid value for `tps`, must not be `None`")  # noqa: E501

        self._tps = tps

    @property
    def uptime_ticks(self):
        """Gets the uptime_ticks of this ServerInfo.  # noqa: E501

        The number of ticks the server has been running  # noqa: E501

        :return: The uptime_ticks of this ServerInfo.  # noqa: E501
        :rtype: int
        """
        return self._uptime_ticks

    @uptime_ticks.setter
    def uptime_ticks(self, uptime_ticks):
        """Sets the uptime_ticks of this ServerInfo.

        The number of ticks the server has been running  # noqa: E501

        :param uptime_ticks: The uptime_ticks of this ServerInfo.  # noqa: E501
        :type: int
        """
        if uptime_ticks is None:
            raise ValueError("Invalid value for `uptime_ticks`, must not be `None`")  # noqa: E501

        self._uptime_ticks = uptime_ticks

    @property
    def address(self):
        """Gets the address of this ServerInfo.  # noqa: E501

        The address that the server is bound to  # noqa: E501

        :return: The address of this ServerInfo.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ServerInfo.

        The address that the server is bound to  # noqa: E501

        :param address: The address of this ServerInfo.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def resource_pack(self):
        """Gets the resource_pack of this ServerInfo.  # noqa: E501

        The name of the resource pack this is used on the server  # noqa: E501

        :return: The resource_pack of this ServerInfo.  # noqa: E501
        :rtype: str
        """
        return self._resource_pack

    @resource_pack.setter
    def resource_pack(self, resource_pack):
        """Sets the resource_pack of this ServerInfo.

        The name of the resource pack this is used on the server  # noqa: E501

        :param resource_pack: The resource_pack of this ServerInfo.  # noqa: E501
        :type: str
        """

        self._resource_pack = resource_pack

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServerInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServerInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
