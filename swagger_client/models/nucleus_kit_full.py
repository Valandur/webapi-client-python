# coding: utf-8

"""
    WebAPI

    Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/...  As a quick test try reaching the route http:/localhost:8080/api/info (remember that you can only access \"localhost\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md) 

    OpenAPI spec version: <version>
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class NucleusKitFull(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'cost': 'float',
        'cooldown': 'float',
        'first_join_kit': 'bool',
        'one_time': 'bool',
        'commands': 'list[str]',
        'stacks': 'list[ItemStack]'
    }

    attribute_map = {
        'name': 'name',
        'cost': 'cost',
        'cooldown': 'cooldown',
        'first_join_kit': 'firstJoinKit',
        'one_time': 'oneTime',
        'commands': 'commands',
        'stacks': 'stacks'
    }

    def __init__(self, name=None, cost=None, cooldown=None, first_join_kit=None, one_time=None, commands=None, stacks=None):
        """
        NucleusKitFull - a model defined in Swagger
        """

        self._name = None
        self._cost = None
        self._cooldown = None
        self._first_join_kit = None
        self._one_time = None
        self._commands = None
        self._stacks = None

        if name is not None:
          self.name = name
        if cost is not None:
          self.cost = cost
        if cooldown is not None:
          self.cooldown = cooldown
        if first_join_kit is not None:
          self.first_join_kit = first_join_kit
        if one_time is not None:
          self.one_time = one_time
        if commands is not None:
          self.commands = commands
        if stacks is not None:
          self.stacks = stacks

    @property
    def name(self):
        """
        Gets the name of this NucleusKitFull.
        The name of the kit.

        :return: The name of this NucleusKitFull.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this NucleusKitFull.
        The name of the kit.

        :param name: The name of this NucleusKitFull.
        :type: str
        """

        self._name = name

    @property
    def cost(self):
        """
        Gets the cost of this NucleusKitFull.
        The cost to buy this kit.

        :return: The cost of this NucleusKitFull.
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """
        Sets the cost of this NucleusKitFull.
        The cost to buy this kit.

        :param cost: The cost of this NucleusKitFull.
        :type: float
        """

        self._cost = cost

    @property
    def cooldown(self):
        """
        Gets the cooldown of this NucleusKitFull.
        The cooldown for this kit in milliseconds.

        :return: The cooldown of this NucleusKitFull.
        :rtype: float
        """
        return self._cooldown

    @cooldown.setter
    def cooldown(self, cooldown):
        """
        Sets the cooldown of this NucleusKitFull.
        The cooldown for this kit in milliseconds.

        :param cooldown: The cooldown of this NucleusKitFull.
        :type: float
        """

        self._cooldown = cooldown

    @property
    def first_join_kit(self):
        """
        Gets the first_join_kit of this NucleusKitFull.
        True if players receive this kit when joining the server for the first time, false otherwise.

        :return: The first_join_kit of this NucleusKitFull.
        :rtype: bool
        """
        return self._first_join_kit

    @first_join_kit.setter
    def first_join_kit(self, first_join_kit):
        """
        Sets the first_join_kit of this NucleusKitFull.
        True if players receive this kit when joining the server for the first time, false otherwise.

        :param first_join_kit: The first_join_kit of this NucleusKitFull.
        :type: bool
        """

        self._first_join_kit = first_join_kit

    @property
    def one_time(self):
        """
        Gets the one_time of this NucleusKitFull.
        True if this kit can only be received one, false otherwise.

        :return: The one_time of this NucleusKitFull.
        :rtype: bool
        """
        return self._one_time

    @one_time.setter
    def one_time(self, one_time):
        """
        Sets the one_time of this NucleusKitFull.
        True if this kit can only be received one, false otherwise.

        :param one_time: The one_time of this NucleusKitFull.
        :type: bool
        """

        self._one_time = one_time

    @property
    def commands(self):
        """
        Gets the commands of this NucleusKitFull.
        The commands that are executed for the player when receiving this kit.

        :return: The commands of this NucleusKitFull.
        :rtype: list[str]
        """
        return self._commands

    @commands.setter
    def commands(self, commands):
        """
        Sets the commands of this NucleusKitFull.
        The commands that are executed for the player when receiving this kit.

        :param commands: The commands of this NucleusKitFull.
        :type: list[str]
        """

        self._commands = commands

    @property
    def stacks(self):
        """
        Gets the stacks of this NucleusKitFull.
        The items that the player receives when aquiring this kit.

        :return: The stacks of this NucleusKitFull.
        :rtype: list[ItemStack]
        """
        return self._stacks

    @stacks.setter
    def stacks(self, stacks):
        """
        Sets the stacks of this NucleusKitFull.
        The items that the player receives when aquiring this kit.

        :param stacks: The stacks of this NucleusKitFull.
        :type: list[ItemStack]
        """

        self._stacks = stacks

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, NucleusKitFull):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
