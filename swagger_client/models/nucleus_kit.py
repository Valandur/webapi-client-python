# coding: utf-8

"""
    Web-API

    Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/v5...  As a quick test try reaching the route http:/localhost:8080/api/v5/info (remember that you can only access \\\"localhost\\\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # List endpoints Lots of objects offer an endpoint to list all objects (e.g. `GET: /world` to get all worlds). These endpoints return only the properties marked 'required' by default, because the list might be quite large. If you want to return ALL data for a list endpoint add the query parameter `details`, (e.g. `GET: /world?details`).  > Remember that in this case the data returned by the endpoint might be quite large.  # Debugging endpoints Apart from the `?details` flag you can also pass some other flags for debugging purposes. Remember that you must include the first query parameter with `?`, and further ones with `&`:  `details`: Includes details for list endpoints  `accept=[json/xml]`: Manually set the accept content type. This is good for browser testing, **BUT DON'T USE THIS IN PRODUCTION, YOU CAN SUPPLY THE `Accepts` HEADER FOR THAT**  `pretty`: Pretty prints the data, also good for debugging in the browser.  An example request might look like this: `http://localhost:8080/api/v5/world?details&accpet=json&pretty&key=MY-API-KEY`  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md)  # noqa: E501

    OpenAPI spec version: @version@
    Contact: inithilian@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.item_stack import ItemStack  # noqa: F401,E501


class NucleusKit(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'commands': 'list[str]',
        'cooldown': 'int',
        'cost': 'float',
        'first_join_kit': 'bool',
        'link': 'str',
        'name': 'str',
        'one_time': 'bool',
        'stacks': 'list[ItemStack]'
    }

    attribute_map = {
        'commands': 'commands',
        'cooldown': 'cooldown',
        'cost': 'cost',
        'first_join_kit': 'firstJoinKit',
        'link': 'link',
        'name': 'name',
        'one_time': 'oneTime',
        'stacks': 'stacks'
    }

    def __init__(self, commands=None, cooldown=None, cost=None, first_join_kit=None, link=None, name=None, one_time=None, stacks=None):  # noqa: E501
        """NucleusKit - a model defined in Swagger"""  # noqa: E501

        self._commands = None
        self._cooldown = None
        self._cost = None
        self._first_join_kit = None
        self._link = None
        self._name = None
        self._one_time = None
        self._stacks = None
        self.discriminator = None

        self.commands = commands
        self.cooldown = cooldown
        self.cost = cost
        self.first_join_kit = first_join_kit
        self.link = link
        self.name = name
        self.one_time = one_time
        self.stacks = stacks

    @property
    def commands(self):
        """Gets the commands of this NucleusKit.  # noqa: E501

        The commands that are executed when this kit is purchased/acquired by a player  # noqa: E501

        :return: The commands of this NucleusKit.  # noqa: E501
        :rtype: list[str]
        """
        return self._commands

    @commands.setter
    def commands(self, commands):
        """Sets the commands of this NucleusKit.

        The commands that are executed when this kit is purchased/acquired by a player  # noqa: E501

        :param commands: The commands of this NucleusKit.  # noqa: E501
        :type: list[str]
        """
        if commands is None:
            raise ValueError("Invalid value for `commands`, must not be `None`")  # noqa: E501

        self._commands = commands

    @property
    def cooldown(self):
        """Gets the cooldown of this NucleusKit.  # noqa: E501

        The cooldown (in seconds) this kit is on after buying it (per player)  # noqa: E501

        :return: The cooldown of this NucleusKit.  # noqa: E501
        :rtype: int
        """
        return self._cooldown

    @cooldown.setter
    def cooldown(self, cooldown):
        """Sets the cooldown of this NucleusKit.

        The cooldown (in seconds) this kit is on after buying it (per player)  # noqa: E501

        :param cooldown: The cooldown of this NucleusKit.  # noqa: E501
        :type: int
        """
        if cooldown is None:
            raise ValueError("Invalid value for `cooldown`, must not be `None`")  # noqa: E501

        self._cooldown = cooldown

    @property
    def cost(self):
        """Gets the cost of this NucleusKit.  # noqa: E501

        The cost to buy this kit  # noqa: E501

        :return: The cost of this NucleusKit.  # noqa: E501
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this NucleusKit.

        The cost to buy this kit  # noqa: E501

        :param cost: The cost of this NucleusKit.  # noqa: E501
        :type: float
        """
        if cost is None:
            raise ValueError("Invalid value for `cost`, must not be `None`")  # noqa: E501

        self._cost = cost

    @property
    def first_join_kit(self):
        """Gets the first_join_kit of this NucleusKit.  # noqa: E501

        True if this kit is awarded for joining the server the first time, false otherwise  # noqa: E501

        :return: The first_join_kit of this NucleusKit.  # noqa: E501
        :rtype: bool
        """
        return self._first_join_kit

    @first_join_kit.setter
    def first_join_kit(self, first_join_kit):
        """Sets the first_join_kit of this NucleusKit.

        True if this kit is awarded for joining the server the first time, false otherwise  # noqa: E501

        :param first_join_kit: The first_join_kit of this NucleusKit.  # noqa: E501
        :type: bool
        """
        if first_join_kit is None:
            raise ValueError("Invalid value for `first_join_kit`, must not be `None`")  # noqa: E501

        self._first_join_kit = first_join_kit

    @property
    def link(self):
        """Gets the link of this NucleusKit.  # noqa: E501

        The API link that can be used to obtain more information about this object  # noqa: E501

        :return: The link of this NucleusKit.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this NucleusKit.

        The API link that can be used to obtain more information about this object  # noqa: E501

        :param link: The link of this NucleusKit.  # noqa: E501
        :type: str
        """
        if link is None:
            raise ValueError("Invalid value for `link`, must not be `None`")  # noqa: E501

        self._link = link

    @property
    def name(self):
        """Gets the name of this NucleusKit.  # noqa: E501

        The unique name of this kit  # noqa: E501

        :return: The name of this NucleusKit.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NucleusKit.

        The unique name of this kit  # noqa: E501

        :param name: The name of this NucleusKit.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def one_time(self):
        """Gets the one_time of this NucleusKit.  # noqa: E501

        True if this kit can only be purchased/acquired once, false otherwise  # noqa: E501

        :return: The one_time of this NucleusKit.  # noqa: E501
        :rtype: bool
        """
        return self._one_time

    @one_time.setter
    def one_time(self, one_time):
        """Sets the one_time of this NucleusKit.

        True if this kit can only be purchased/acquired once, false otherwise  # noqa: E501

        :param one_time: The one_time of this NucleusKit.  # noqa: E501
        :type: bool
        """
        if one_time is None:
            raise ValueError("Invalid value for `one_time`, must not be `None`")  # noqa: E501

        self._one_time = one_time

    @property
    def stacks(self):
        """Gets the stacks of this NucleusKit.  # noqa: E501

        The ItemStacks that are awarded to the player who buys/acquires this kit  # noqa: E501

        :return: The stacks of this NucleusKit.  # noqa: E501
        :rtype: list[ItemStack]
        """
        return self._stacks

    @stacks.setter
    def stacks(self, stacks):
        """Sets the stacks of this NucleusKit.

        The ItemStacks that are awarded to the player who buys/acquires this kit  # noqa: E501

        :param stacks: The stacks of this NucleusKit.  # noqa: E501
        :type: list[ItemStack]
        """
        if stacks is None:
            raise ValueError("Invalid value for `stacks`, must not be `None`")  # noqa: E501

        self._stacks = stacks

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NucleusKit):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
