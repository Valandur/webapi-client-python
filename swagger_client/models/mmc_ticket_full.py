# coding: utf-8

"""
    WebAPI

    Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/...  As a quick test try reaching the route http:/localhost:8080/api/info (remember that you can only access \"localhost\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md) 

    OpenAPI spec version: <version>
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class MMCTicketFull(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'timestamp': 'float',
        'sender': 'Player',
        'message': 'str',
        'comment': 'str',
        'status': 'str',
        'staff': 'Player',
        'notified': 'float',
        'location': 'Location'
    }

    attribute_map = {
        'id': 'id',
        'timestamp': 'timestamp',
        'sender': 'sender',
        'message': 'message',
        'comment': 'comment',
        'status': 'status',
        'staff': 'staff',
        'notified': 'notified',
        'location': 'location'
    }

    def __init__(self, id=None, timestamp=None, sender=None, message=None, comment=None, status=None, staff=None, notified=None, location=None):
        """
        MMCTicketFull - a model defined in Swagger
        """

        self._id = None
        self._timestamp = None
        self._sender = None
        self._message = None
        self._comment = None
        self._status = None
        self._staff = None
        self._notified = None
        self._location = None

        if id is not None:
          self.id = id
        if timestamp is not None:
          self.timestamp = timestamp
        if sender is not None:
          self.sender = sender
        if message is not None:
          self.message = message
        if comment is not None:
          self.comment = comment
        if status is not None:
          self.status = status
        if staff is not None:
          self.staff = staff
        if notified is not None:
          self.notified = notified
        if location is not None:
          self.location = location

    @property
    def id(self):
        """
        Gets the id of this MMCTicketFull.
        The id of the crate.

        :return: The id of this MMCTicketFull.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this MMCTicketFull.
        The id of the crate.

        :param id: The id of this MMCTicketFull.
        :type: str
        """

        self._id = id

    @property
    def timestamp(self):
        """
        Gets the timestamp of this MMCTicketFull.
        The name of the crate.

        :return: The timestamp of this MMCTicketFull.
        :rtype: float
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """
        Sets the timestamp of this MMCTicketFull.
        The name of the crate.

        :param timestamp: The timestamp of this MMCTicketFull.
        :type: float
        """

        self._timestamp = timestamp

    @property
    def sender(self):
        """
        Gets the sender of this MMCTicketFull.

        :return: The sender of this MMCTicketFull.
        :rtype: Player
        """
        return self._sender

    @sender.setter
    def sender(self, sender):
        """
        Sets the sender of this MMCTicketFull.

        :param sender: The sender of this MMCTicketFull.
        :type: Player
        """

        self._sender = sender

    @property
    def message(self):
        """
        Gets the message of this MMCTicketFull.
        The message that the player sent in the ticket.

        :return: The message of this MMCTicketFull.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """
        Sets the message of this MMCTicketFull.
        The message that the player sent in the ticket.

        :param message: The message of this MMCTicketFull.
        :type: str
        """

        self._message = message

    @property
    def comment(self):
        """
        Gets the comment of this MMCTicketFull.
        The comment added by staff.

        :return: The comment of this MMCTicketFull.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """
        Sets the comment of this MMCTicketFull.
        The comment added by staff.

        :param comment: The comment of this MMCTicketFull.
        :type: str
        """

        self._comment = comment

    @property
    def status(self):
        """
        Gets the status of this MMCTicketFull.
        The current state of the ticket.

        :return: The status of this MMCTicketFull.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this MMCTicketFull.
        The current state of the ticket.

        :param status: The status of this MMCTicketFull.
        :type: str
        """
        allowed_values = ["Open", "Claimed", "Held", "Closed"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def staff(self):
        """
        Gets the staff of this MMCTicketFull.

        :return: The staff of this MMCTicketFull.
        :rtype: Player
        """
        return self._staff

    @staff.setter
    def staff(self, staff):
        """
        Sets the staff of this MMCTicketFull.

        :param staff: The staff of this MMCTicketFull.
        :type: Player
        """

        self._staff = staff

    @property
    def notified(self):
        """
        Gets the notified of this MMCTicketFull.
        0 if the assigned member has not been notified yet, 1 otherwise.

        :return: The notified of this MMCTicketFull.
        :rtype: float
        """
        return self._notified

    @notified.setter
    def notified(self, notified):
        """
        Sets the notified of this MMCTicketFull.
        0 if the assigned member has not been notified yet, 1 otherwise.

        :param notified: The notified of this MMCTicketFull.
        :type: float
        """

        self._notified = notified

    @property
    def location(self):
        """
        Gets the location of this MMCTicketFull.

        :return: The location of this MMCTicketFull.
        :rtype: Location
        """
        return self._location

    @location.setter
    def location(self, location):
        """
        Sets the location of this MMCTicketFull.

        :param location: The location of this MMCTicketFull.
        :type: Location
        """

        self._location = location

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, MMCTicketFull):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
