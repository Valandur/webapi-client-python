# coding: utf-8

"""
    WebAPI

    Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/...  As a quick test try reaching the route http:/localhost:8080/api/info (remember that you can only access \"localhost\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md) 

    OpenAPI spec version: <version>
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class NationsNation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uuid': 'str',
        'name': 'str',
        'tag': 'str',
        'president': 'Player'
    }

    attribute_map = {
        'uuid': 'uuid',
        'name': 'name',
        'tag': 'tag',
        'president': 'president'
    }

    def __init__(self, uuid=None, name=None, tag=None, president=None):
        """
        NationsNation - a model defined in Swagger
        """

        self._uuid = None
        self._name = None
        self._tag = None
        self._president = None

        if uuid is not None:
          self.uuid = uuid
        if name is not None:
          self.name = name
        if tag is not None:
          self.tag = tag
        if president is not None:
          self.president = president

    @property
    def uuid(self):
        """
        Gets the uuid of this NationsNation.
        The unique id of the nation.

        :return: The uuid of this NationsNation.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """
        Sets the uuid of this NationsNation.
        The unique id of the nation.

        :param uuid: The uuid of this NationsNation.
        :type: str
        """

        self._uuid = uuid

    @property
    def name(self):
        """
        Gets the name of this NationsNation.
        The name of the nation.

        :return: The name of this NationsNation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this NationsNation.
        The name of the nation.

        :param name: The name of this NationsNation.
        :type: str
        """

        self._name = name

    @property
    def tag(self):
        """
        Gets the tag of this NationsNation.
        The tag of the nation.

        :return: The tag of this NationsNation.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """
        Sets the tag of this NationsNation.
        The tag of the nation.

        :param tag: The tag of this NationsNation.
        :type: str
        """

        self._tag = tag

    @property
    def president(self):
        """
        Gets the president of this NationsNation.

        :return: The president of this NationsNation.
        :rtype: Player
        """
        return self._president

    @president.setter
    def president(self, president):
        """
        Sets the president of this NationsNation.

        :param president: The president of this NationsNation.
        :type: Player
        """

        self._president = president

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, NationsNation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
