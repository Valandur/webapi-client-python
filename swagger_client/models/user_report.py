# coding: utf-8

"""
    Web-API

    Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/v5...  As a quick test try reaching the route http:/localhost:8080/api/v5/info (remember that you can only access \\\"localhost\\\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # List endpoints Lots of objects offer an endpoint to list all objects (e.g. `GET: /world` to get all worlds). These endpoints return only the properties marked 'required' by default, because the list might be quite large. If you want to return ALL data for a list endpoint add the query parameter `details`, (e.g. `GET: /world?details`).  > Remember that in this case the data returned by the endpoint might be quite large.  # Debugging endpoints Apart from the `?details` flag you can also pass some other flags for debugging purposes. Remember that you must include the first query parameter with `?`, and further ones with `&`:  `details`: Includes details for list endpoints  `accept=[json/xml]`: Manually set the accept content type. This is good for browser testing, **BUT DON'T USE THIS IN PRODUCTION, YOU CAN SUPPLY THE `Accepts` HEADER FOR THAT**  `pretty`: Pretty prints the data, also good for debugging in the browser.  An example request might look like this: `http://localhost:8080/api/v5/world?details&accpet=json&pretty&key=MY-API-KEY`  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md)  # noqa: E501

    OpenAPI spec version: 5.4.2-S7.1.0
    Contact: inithilian@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.local_date import LocalDate  # noqa: F401,E501
from swagger_client.models.time_holder import TimeHolder  # noqa: F401,E501


class UserReport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'daily_average': 'TimeHolder',
        '_from': 'LocalDate',
        'monthly_average': 'TimeHolder',
        'name': 'str',
        'to': 'LocalDate',
        'total': 'TimeHolder',
        'uuid': 'str',
        'weekly_average': 'TimeHolder'
    }

    attribute_map = {
        'daily_average': 'dailyAverage',
        '_from': 'from',
        'monthly_average': 'monthlyAverage',
        'name': 'name',
        'to': 'to',
        'total': 'total',
        'uuid': 'uuid',
        'weekly_average': 'weeklyAverage'
    }

    def __init__(self, daily_average=None, _from=None, monthly_average=None, name=None, to=None, total=None, uuid=None, weekly_average=None):  # noqa: E501
        """UserReport - a model defined in Swagger"""  # noqa: E501

        self._daily_average = None
        self.__from = None
        self._monthly_average = None
        self._name = None
        self._to = None
        self._total = None
        self._uuid = None
        self._weekly_average = None
        self.discriminator = None

        if daily_average is not None:
            self.daily_average = daily_average
        if _from is not None:
            self._from = _from
        if monthly_average is not None:
            self.monthly_average = monthly_average
        if name is not None:
            self.name = name
        if to is not None:
            self.to = to
        if total is not None:
            self.total = total
        if uuid is not None:
            self.uuid = uuid
        if weekly_average is not None:
            self.weekly_average = weekly_average

    @property
    def daily_average(self):
        """Gets the daily_average of this UserReport.  # noqa: E501


        :return: The daily_average of this UserReport.  # noqa: E501
        :rtype: TimeHolder
        """
        return self._daily_average

    @daily_average.setter
    def daily_average(self, daily_average):
        """Sets the daily_average of this UserReport.


        :param daily_average: The daily_average of this UserReport.  # noqa: E501
        :type: TimeHolder
        """

        self._daily_average = daily_average

    @property
    def _from(self):
        """Gets the _from of this UserReport.  # noqa: E501


        :return: The _from of this UserReport.  # noqa: E501
        :rtype: LocalDate
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this UserReport.


        :param _from: The _from of this UserReport.  # noqa: E501
        :type: LocalDate
        """

        self.__from = _from

    @property
    def monthly_average(self):
        """Gets the monthly_average of this UserReport.  # noqa: E501


        :return: The monthly_average of this UserReport.  # noqa: E501
        :rtype: TimeHolder
        """
        return self._monthly_average

    @monthly_average.setter
    def monthly_average(self, monthly_average):
        """Sets the monthly_average of this UserReport.


        :param monthly_average: The monthly_average of this UserReport.  # noqa: E501
        :type: TimeHolder
        """

        self._monthly_average = monthly_average

    @property
    def name(self):
        """Gets the name of this UserReport.  # noqa: E501


        :return: The name of this UserReport.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserReport.


        :param name: The name of this UserReport.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def to(self):
        """Gets the to of this UserReport.  # noqa: E501


        :return: The to of this UserReport.  # noqa: E501
        :rtype: LocalDate
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this UserReport.


        :param to: The to of this UserReport.  # noqa: E501
        :type: LocalDate
        """

        self._to = to

    @property
    def total(self):
        """Gets the total of this UserReport.  # noqa: E501


        :return: The total of this UserReport.  # noqa: E501
        :rtype: TimeHolder
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this UserReport.


        :param total: The total of this UserReport.  # noqa: E501
        :type: TimeHolder
        """

        self._total = total

    @property
    def uuid(self):
        """Gets the uuid of this UserReport.  # noqa: E501


        :return: The uuid of this UserReport.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this UserReport.


        :param uuid: The uuid of this UserReport.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def weekly_average(self):
        """Gets the weekly_average of this UserReport.  # noqa: E501


        :return: The weekly_average of this UserReport.  # noqa: E501
        :rtype: TimeHolder
        """
        return self._weekly_average

    @weekly_average.setter
    def weekly_average(self, weekly_average):
        """Sets the weekly_average of this UserReport.


        :param weekly_average: The weekly_average of this UserReport.  # noqa: E501
        :type: TimeHolder
        """

        self._weekly_average = weekly_average

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserReport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserReport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
