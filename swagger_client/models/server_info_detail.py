# coding: utf-8

"""
    WebAPI

    Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/...  As a quick test try reaching the route http:/localhost:8080/api/info (remember that you can only access \"localhost\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md) 

    OpenAPI spec version: <version>
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ServerInfoDetail(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'version': 'str',
        'description': 'str',
        'url': 'str',
        'authors': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'version': 'version',
        'description': 'description',
        'url': 'url',
        'authors': 'authors'
    }

    def __init__(self, id=None, name=None, version=None, description=None, url=None, authors=None):
        """
        ServerInfoDetail - a model defined in Swagger
        """

        self._id = None
        self._name = None
        self._version = None
        self._description = None
        self._url = None
        self._authors = None

        if id is not None:
          self.id = id
        if name is not None:
          self.name = name
        if version is not None:
          self.version = version
        if description is not None:
          self.description = description
        if url is not None:
          self.url = url
        if authors is not None:
          self.authors = authors

    @property
    def id(self):
        """
        Gets the id of this ServerInfoDetail.
        The unique id of the api.

        :return: The id of this ServerInfoDetail.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ServerInfoDetail.
        The unique id of the api.

        :param id: The id of this ServerInfoDetail.
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this ServerInfoDetail.
        The name of the api.

        :return: The name of this ServerInfoDetail.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ServerInfoDetail.
        The name of the api.

        :param name: The name of this ServerInfoDetail.
        :type: str
        """

        self._name = name

    @property
    def version(self):
        """
        Gets the version of this ServerInfoDetail.
        The version of the api.

        :return: The version of this ServerInfoDetail.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this ServerInfoDetail.
        The version of the api.

        :param version: The version of this ServerInfoDetail.
        :type: str
        """

        self._version = version

    @property
    def description(self):
        """
        Gets the description of this ServerInfoDetail.
        The description of the api.

        :return: The description of this ServerInfoDetail.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this ServerInfoDetail.
        The description of the api.

        :param description: The description of this ServerInfoDetail.
        :type: str
        """

        self._description = description

    @property
    def url(self):
        """
        Gets the url of this ServerInfoDetail.
        The website of the api.

        :return: The url of this ServerInfoDetail.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this ServerInfoDetail.
        The website of the api.

        :param url: The url of this ServerInfoDetail.
        :type: str
        """

        self._url = url

    @property
    def authors(self):
        """
        Gets the authors of this ServerInfoDetail.
        The list of authors that worked on the api.

        :return: The authors of this ServerInfoDetail.
        :rtype: list[str]
        """
        return self._authors

    @authors.setter
    def authors(self, authors):
        """
        Sets the authors of this ServerInfoDetail.
        The list of authors that worked on the api.

        :param authors: The authors of this ServerInfoDetail.
        :type: list[str]
        """

        self._authors = authors

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ServerInfoDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
