# coding: utf-8

"""
    Web-API

    Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/v5...  As a quick test try reaching the route http:/localhost:8080/api/v5/info (remember that you can only access \\\"localhost\\\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # List endpoints Lots of objects offer an endpoint to list all objects (e.g. `GET: /world` to get all worlds). These endpoints return only the properties marked 'required' by default, because the list might be quite large. If you want to return ALL data for a list endpoint add the query parameter `details`, (e.g. `GET: /world?details`).  > Remember that in this case the data returned by the endpoint might be quite large.  # Debugging endpoints Apart from the `?details` flag you can also pass some other flags for debugging purposes. Remember that you must include the first query parameter with `?`, and further ones with `&`:  `details`: Includes details for list endpoints  `accept=[json/xml]`: Manually set the accept content type. This is good for browser testing, **BUT DON'T USE THIS IN PRODUCTION, YOU CAN SUPPLY THE `Accepts` HEADER FOR THAT**  `pretty`: Pretty prints the data, also good for debugging in the browser.  An example request might look like this: `http://localhost:8080/api/v5/world?details&accpet=json&pretty&key=MY-API-KEY`  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md)  # noqa: E501

    OpenAPI spec version: 5.4.2-S7.1.0
    Contact: inithilian@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.catalog_type import CatalogType  # noqa: F401,E501
from swagger_client.models.vector3i import Vector3i  # noqa: F401,E501


class StructureData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'author': 'str',
        'ignore_entities': 'bool',
        'integrity': 'float',
        'mode': 'CatalogType',
        'position': 'Vector3i',
        'powered': 'bool',
        'seed': 'int',
        'show_air': 'bool',
        'show_bounding_box': 'bool',
        'size': 'Vector3i'
    }

    attribute_map = {
        'author': 'author',
        'ignore_entities': 'ignoreEntities',
        'integrity': 'integrity',
        'mode': 'mode',
        'position': 'position',
        'powered': 'powered',
        'seed': 'seed',
        'show_air': 'showAir',
        'show_bounding_box': 'showBoundingBox',
        'size': 'size'
    }

    def __init__(self, author=None, ignore_entities=None, integrity=None, mode=None, position=None, powered=None, seed=None, show_air=None, show_bounding_box=None, size=None):  # noqa: E501
        """StructureData - a model defined in Swagger"""  # noqa: E501

        self._author = None
        self._ignore_entities = None
        self._integrity = None
        self._mode = None
        self._position = None
        self._powered = None
        self._seed = None
        self._show_air = None
        self._show_bounding_box = None
        self._size = None
        self.discriminator = None

        self.author = author
        self.ignore_entities = ignore_entities
        self.integrity = integrity
        self.mode = mode
        self.position = position
        self.powered = powered
        self.seed = seed
        self.show_air = show_air
        self.show_bounding_box = show_bounding_box
        self.size = size

    @property
    def author(self):
        """Gets the author of this StructureData.  # noqa: E501

        The author of this structure  # noqa: E501

        :return: The author of this StructureData.  # noqa: E501
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this StructureData.

        The author of this structure  # noqa: E501

        :param author: The author of this StructureData.  # noqa: E501
        :type: str
        """
        if author is None:
            raise ValueError("Invalid value for `author`, must not be `None`")  # noqa: E501

        self._author = author

    @property
    def ignore_entities(self):
        """Gets the ignore_entities of this StructureData.  # noqa: E501

        True if entities are not part of this structure, false otherwise  # noqa: E501

        :return: The ignore_entities of this StructureData.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_entities

    @ignore_entities.setter
    def ignore_entities(self, ignore_entities):
        """Sets the ignore_entities of this StructureData.

        True if entities are not part of this structure, false otherwise  # noqa: E501

        :param ignore_entities: The ignore_entities of this StructureData.  # noqa: E501
        :type: bool
        """
        if ignore_entities is None:
            raise ValueError("Invalid value for `ignore_entities`, must not be `None`")  # noqa: E501

        self._ignore_entities = ignore_entities

    @property
    def integrity(self):
        """Gets the integrity of this StructureData.  # noqa: E501

        The integrity of the structure  # noqa: E501

        :return: The integrity of this StructureData.  # noqa: E501
        :rtype: float
        """
        return self._integrity

    @integrity.setter
    def integrity(self, integrity):
        """Sets the integrity of this StructureData.

        The integrity of the structure  # noqa: E501

        :param integrity: The integrity of this StructureData.  # noqa: E501
        :type: float
        """
        if integrity is None:
            raise ValueError("Invalid value for `integrity`, must not be `None`")  # noqa: E501

        self._integrity = integrity

    @property
    def mode(self):
        """Gets the mode of this StructureData.  # noqa: E501

        The mode of the structure  # noqa: E501

        :return: The mode of this StructureData.  # noqa: E501
        :rtype: CatalogType
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this StructureData.

        The mode of the structure  # noqa: E501

        :param mode: The mode of this StructureData.  # noqa: E501
        :type: CatalogType
        """
        if mode is None:
            raise ValueError("Invalid value for `mode`, must not be `None`")  # noqa: E501

        self._mode = mode

    @property
    def position(self):
        """Gets the position of this StructureData.  # noqa: E501

        The position of the structure  # noqa: E501

        :return: The position of this StructureData.  # noqa: E501
        :rtype: Vector3i
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this StructureData.

        The position of the structure  # noqa: E501

        :param position: The position of this StructureData.  # noqa: E501
        :type: Vector3i
        """
        if position is None:
            raise ValueError("Invalid value for `position`, must not be `None`")  # noqa: E501

        self._position = position

    @property
    def powered(self):
        """Gets the powered of this StructureData.  # noqa: E501

        True if the structure is powered, false otherwise  # noqa: E501

        :return: The powered of this StructureData.  # noqa: E501
        :rtype: bool
        """
        return self._powered

    @powered.setter
    def powered(self, powered):
        """Sets the powered of this StructureData.

        True if the structure is powered, false otherwise  # noqa: E501

        :param powered: The powered of this StructureData.  # noqa: E501
        :type: bool
        """
        if powered is None:
            raise ValueError("Invalid value for `powered`, must not be `None`")  # noqa: E501

        self._powered = powered

    @property
    def seed(self):
        """Gets the seed of this StructureData.  # noqa: E501

        The seed of this structure  # noqa: E501

        :return: The seed of this StructureData.  # noqa: E501
        :rtype: int
        """
        return self._seed

    @seed.setter
    def seed(self, seed):
        """Sets the seed of this StructureData.

        The seed of this structure  # noqa: E501

        :param seed: The seed of this StructureData.  # noqa: E501
        :type: int
        """
        if seed is None:
            raise ValueError("Invalid value for `seed`, must not be `None`")  # noqa: E501

        self._seed = seed

    @property
    def show_air(self):
        """Gets the show_air of this StructureData.  # noqa: E501

        True if the air blocks for this structure are shown, false otherwise  # noqa: E501

        :return: The show_air of this StructureData.  # noqa: E501
        :rtype: bool
        """
        return self._show_air

    @show_air.setter
    def show_air(self, show_air):
        """Sets the show_air of this StructureData.

        True if the air blocks for this structure are shown, false otherwise  # noqa: E501

        :param show_air: The show_air of this StructureData.  # noqa: E501
        :type: bool
        """
        if show_air is None:
            raise ValueError("Invalid value for `show_air`, must not be `None`")  # noqa: E501

        self._show_air = show_air

    @property
    def show_bounding_box(self):
        """Gets the show_bounding_box of this StructureData.  # noqa: E501

        True if the bounding box for this structure is shown, false otherwise  # noqa: E501

        :return: The show_bounding_box of this StructureData.  # noqa: E501
        :rtype: bool
        """
        return self._show_bounding_box

    @show_bounding_box.setter
    def show_bounding_box(self, show_bounding_box):
        """Sets the show_bounding_box of this StructureData.

        True if the bounding box for this structure is shown, false otherwise  # noqa: E501

        :param show_bounding_box: The show_bounding_box of this StructureData.  # noqa: E501
        :type: bool
        """
        if show_bounding_box is None:
            raise ValueError("Invalid value for `show_bounding_box`, must not be `None`")  # noqa: E501

        self._show_bounding_box = show_bounding_box

    @property
    def size(self):
        """Gets the size of this StructureData.  # noqa: E501

        The size of this structure  # noqa: E501

        :return: The size of this StructureData.  # noqa: E501
        :rtype: Vector3i
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this StructureData.

        The size of this structure  # noqa: E501

        :param size: The size of this StructureData.  # noqa: E501
        :type: Vector3i
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")  # noqa: E501

        self._size = size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StructureData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StructureData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
