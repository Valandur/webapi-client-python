# coding: utf-8

"""
    WebAPI

    Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/...  As a quick test try reaching the route http:/localhost:8080/api/info (remember that you can only access \"localhost\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md) 

    OpenAPI spec version: <version>
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CommandRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'command': 'str',
        'wait_lines': 'float',
        'wait_time': 'float'
    }

    attribute_map = {
        'name': 'name',
        'command': 'command',
        'wait_lines': 'waitLines',
        'wait_time': 'waitTime'
    }

    def __init__(self, name='Web-API', command=None, wait_lines=None, wait_time=None):
        """
        CommandRequest - a model defined in Swagger
        """

        self._name = None
        self._command = None
        self._wait_lines = None
        self._wait_time = None

        if name is not None:
          self.name = name
        self.command = command
        if wait_lines is not None:
          self.wait_lines = wait_lines
        if wait_time is not None:
          self.wait_time = wait_time

    @property
    def name(self):
        """
        Gets the name of this CommandRequest.
        The name that is displayed as the executor.

        :return: The name of this CommandRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this CommandRequest.
        The name that is displayed as the executor.

        :param name: The name of this CommandRequest.
        :type: str
        """

        self._name = name

    @property
    def command(self):
        """
        Gets the command of this CommandRequest.
        The command and it's arguments that are sent to the server.

        :return: The command of this CommandRequest.
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command):
        """
        Sets the command of this CommandRequest.
        The command and it's arguments that are sent to the server.

        :param command: The command of this CommandRequest.
        :type: str
        """
        if command is None:
            raise ValueError("Invalid value for `command`, must not be `None`")

        self._command = command

    @property
    def wait_lines(self):
        """
        Gets the wait_lines of this CommandRequest.
        The minimum amount of lines of text to wait for before returning the response.

        :return: The wait_lines of this CommandRequest.
        :rtype: float
        """
        return self._wait_lines

    @wait_lines.setter
    def wait_lines(self, wait_lines):
        """
        Sets the wait_lines of this CommandRequest.
        The minimum amount of lines of text to wait for before returning the response.

        :param wait_lines: The wait_lines of this CommandRequest.
        :type: float
        """

        self._wait_lines = wait_lines

    @property
    def wait_time(self):
        """
        Gets the wait_time of this CommandRequest.
        The amount of time in milliseconds to wait for response messages from the server.

        :return: The wait_time of this CommandRequest.
        :rtype: float
        """
        return self._wait_time

    @wait_time.setter
    def wait_time(self, wait_time):
        """
        Sets the wait_time of this CommandRequest.
        The amount of time in milliseconds to wait for response messages from the server.

        :param wait_time: The wait_time of this CommandRequest.
        :type: float
        """

        self._wait_time = wait_time

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CommandRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
