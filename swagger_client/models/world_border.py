# coding: utf-8

"""
    Web-API

    Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/v5...  As a quick test try reaching the route http:/localhost:8080/api/v5/info (remember that you can only access \\\"localhost\\\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # List endpoints Lots of objects offer an endpoint to list all objects (e.g. `GET: /world` to get all worlds). These endpoints return only the properties marked 'required' by default, because the list might be quite large. If you want to return ALL data for a list endpoint add the query parameter `details`, (e.g. `GET: /world?details`).  > Remember that in this case the data returned by the endpoint might be quite large.  # Debugging endpoints Apart from the `?details` flag you can also pass some other flags for debugging purposes. Remember that you must include the first query parameter with `?`, and further ones with `&`:  `details`: Includes details for list endpoints  `accept=[json/xml]`: Manually set the accept content type. This is good for browser testing, **BUT DON'T USE THIS IN PRODUCTION, YOU CAN SUPPLY THE `Accepts` HEADER FOR THAT**  `pretty`: Pretty prints the data, also good for debugging in the browser.  An example request might look like this: `http://localhost:8080/api/v5/world?details&accpet=json&pretty&key=MY-API-KEY`  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md)  # noqa: E501

    OpenAPI spec version: @version@
    Contact: inithilian@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.vector3d import Vector3d  # noqa: F401,E501


class WorldBorder(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'center': 'Vector3d',
        'damage_amount': 'float',
        'damage_threshold': 'float',
        'diameter': 'float',
        'link': 'str',
        'new_diameter': 'float',
        'time_remaining': 'int',
        'warning_distance': 'int',
        'warning_time': 'int'
    }

    attribute_map = {
        'center': 'center',
        'damage_amount': 'damageAmount',
        'damage_threshold': 'damageThreshold',
        'diameter': 'diameter',
        'link': 'link',
        'new_diameter': 'newDiameter',
        'time_remaining': 'timeRemaining',
        'warning_distance': 'warningDistance',
        'warning_time': 'warningTime'
    }

    def __init__(self, center=None, damage_amount=None, damage_threshold=None, diameter=None, link=None, new_diameter=None, time_remaining=None, warning_distance=None, warning_time=None):  # noqa: E501
        """WorldBorder - a model defined in Swagger"""  # noqa: E501

        self._center = None
        self._damage_amount = None
        self._damage_threshold = None
        self._diameter = None
        self._link = None
        self._new_diameter = None
        self._time_remaining = None
        self._warning_distance = None
        self._warning_time = None
        self.discriminator = None

        self.center = center
        self.damage_amount = damage_amount
        self.damage_threshold = damage_threshold
        self.diameter = diameter
        self.link = link
        self.new_diameter = new_diameter
        self.time_remaining = time_remaining
        self.warning_distance = warning_distance
        self.warning_time = warning_time

    @property
    def center(self):
        """Gets the center of this WorldBorder.  # noqa: E501

        The center of the world border  # noqa: E501

        :return: The center of this WorldBorder.  # noqa: E501
        :rtype: Vector3d
        """
        return self._center

    @center.setter
    def center(self, center):
        """Sets the center of this WorldBorder.

        The center of the world border  # noqa: E501

        :param center: The center of this WorldBorder.  # noqa: E501
        :type: Vector3d
        """
        if center is None:
            raise ValueError("Invalid value for `center`, must not be `None`")  # noqa: E501

        self._center = center

    @property
    def damage_amount(self):
        """Gets the damage_amount of this WorldBorder.  # noqa: E501

        The amount of damage done to players outside the border  # noqa: E501

        :return: The damage_amount of this WorldBorder.  # noqa: E501
        :rtype: float
        """
        return self._damage_amount

    @damage_amount.setter
    def damage_amount(self, damage_amount):
        """Sets the damage_amount of this WorldBorder.

        The amount of damage done to players outside the border  # noqa: E501

        :param damage_amount: The damage_amount of this WorldBorder.  # noqa: E501
        :type: float
        """
        if damage_amount is None:
            raise ValueError("Invalid value for `damage_amount`, must not be `None`")  # noqa: E501

        self._damage_amount = damage_amount

    @property
    def damage_threshold(self):
        """Gets the damage_threshold of this WorldBorder.  # noqa: E501

        The maximum amount of damage done to a player  # noqa: E501

        :return: The damage_threshold of this WorldBorder.  # noqa: E501
        :rtype: float
        """
        return self._damage_threshold

    @damage_threshold.setter
    def damage_threshold(self, damage_threshold):
        """Sets the damage_threshold of this WorldBorder.

        The maximum amount of damage done to a player  # noqa: E501

        :param damage_threshold: The damage_threshold of this WorldBorder.  # noqa: E501
        :type: float
        """
        if damage_threshold is None:
            raise ValueError("Invalid value for `damage_threshold`, must not be `None`")  # noqa: E501

        self._damage_threshold = damage_threshold

    @property
    def diameter(self):
        """Gets the diameter of this WorldBorder.  # noqa: E501

        The diameter of the border  # noqa: E501

        :return: The diameter of this WorldBorder.  # noqa: E501
        :rtype: float
        """
        return self._diameter

    @diameter.setter
    def diameter(self, diameter):
        """Sets the diameter of this WorldBorder.

        The diameter of the border  # noqa: E501

        :param diameter: The diameter of this WorldBorder.  # noqa: E501
        :type: float
        """
        if diameter is None:
            raise ValueError("Invalid value for `diameter`, must not be `None`")  # noqa: E501

        self._diameter = diameter

    @property
    def link(self):
        """Gets the link of this WorldBorder.  # noqa: E501

        The API link that can be used to obtain more information about this object  # noqa: E501

        :return: The link of this WorldBorder.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this WorldBorder.

        The API link that can be used to obtain more information about this object  # noqa: E501

        :param link: The link of this WorldBorder.  # noqa: E501
        :type: str
        """
        if link is None:
            raise ValueError("Invalid value for `link`, must not be `None`")  # noqa: E501

        self._link = link

    @property
    def new_diameter(self):
        """Gets the new_diameter of this WorldBorder.  # noqa: E501

        The new diameter of the border, in case it is collapsing/expanding  # noqa: E501

        :return: The new_diameter of this WorldBorder.  # noqa: E501
        :rtype: float
        """
        return self._new_diameter

    @new_diameter.setter
    def new_diameter(self, new_diameter):
        """Sets the new_diameter of this WorldBorder.

        The new diameter of the border, in case it is collapsing/expanding  # noqa: E501

        :param new_diameter: The new_diameter of this WorldBorder.  # noqa: E501
        :type: float
        """
        if new_diameter is None:
            raise ValueError("Invalid value for `new_diameter`, must not be `None`")  # noqa: E501

        self._new_diameter = new_diameter

    @property
    def time_remaining(self):
        """Gets the time_remaining of this WorldBorder.  # noqa: E501

        The time remaining until the border reaches it's new size  # noqa: E501

        :return: The time_remaining of this WorldBorder.  # noqa: E501
        :rtype: int
        """
        return self._time_remaining

    @time_remaining.setter
    def time_remaining(self, time_remaining):
        """Sets the time_remaining of this WorldBorder.

        The time remaining until the border reaches it's new size  # noqa: E501

        :param time_remaining: The time_remaining of this WorldBorder.  # noqa: E501
        :type: int
        """
        if time_remaining is None:
            raise ValueError("Invalid value for `time_remaining`, must not be `None`")  # noqa: E501

        self._time_remaining = time_remaining

    @property
    def warning_distance(self):
        """Gets the warning_distance of this WorldBorder.  # noqa: E501

        The amount of distance from the border a player will receive a warning at  # noqa: E501

        :return: The warning_distance of this WorldBorder.  # noqa: E501
        :rtype: int
        """
        return self._warning_distance

    @warning_distance.setter
    def warning_distance(self, warning_distance):
        """Sets the warning_distance of this WorldBorder.

        The amount of distance from the border a player will receive a warning at  # noqa: E501

        :param warning_distance: The warning_distance of this WorldBorder.  # noqa: E501
        :type: int
        """
        if warning_distance is None:
            raise ValueError("Invalid value for `warning_distance`, must not be `None`")  # noqa: E501

        self._warning_distance = warning_distance

    @property
    def warning_time(self):
        """Gets the warning_time of this WorldBorder.  # noqa: E501

        The amount of time near a border before a warning is shown for players  # noqa: E501

        :return: The warning_time of this WorldBorder.  # noqa: E501
        :rtype: int
        """
        return self._warning_time

    @warning_time.setter
    def warning_time(self, warning_time):
        """Sets the warning_time of this WorldBorder.

        The amount of time near a border before a warning is shown for players  # noqa: E501

        :param warning_time: The warning_time of this WorldBorder.  # noqa: E501
        :type: int
        """
        if warning_time is None:
            raise ValueError("Invalid value for `warning_time`, must not be `None`")  # noqa: E501

        self._warning_time = warning_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorldBorder):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
