# coding: utf-8

"""
    Web-API

    Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/v5...  As a quick test try reaching the route http:/localhost:8080/api/v5/info (remember that you can only access \\\"localhost\\\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # List endpoints Lots of objects offer an endpoint to list all objects (e.g. `GET: /world` to get all worlds). These endpoints return only the properties marked 'required' by default, because the list might be quite large. If you want to return ALL data for a list endpoint add the query parameter `details`, (e.g. `GET: /world?details`).  > Remember that in this case the data returned by the endpoint might be quite large.  # Debugging endpoints Apart from the `?details` flag you can also pass some other flags for debugging purposes. Remember that you must include the first query parameter with `?`, and further ones with `&`:  `details`: Includes details for list endpoints  `accept=[json/xml]`: Manually set the accept content type. This is good for browser testing, **BUT DON'T USE THIS IN PRODUCTION, YOU CAN SUPPLY THE `Accepts` HEADER FOR THAT**  `pretty`: Pretty prints the data, also good for debugging in the browser.  An example request might look like this: `http://localhost:8080/api/v5/world?details&accpet=json&pretty&key=MY-API-KEY`  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md)  # noqa: E501

    OpenAPI spec version: @version@
    Contact: inithilian@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.block_state import BlockState  # noqa: F401,E501
from swagger_client.models.vector3i import Vector3i  # noqa: F401,E501


class CreateBlockOperationRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'max': 'Vector3i',
        'min': 'Vector3i',
        'type': 'str',
        'world': 'str',
        'block': 'BlockState',
        'blocks': 'list[list[list[BlockState]]]'
    }

    attribute_map = {
        'max': 'max',
        'min': 'min',
        'type': 'type',
        'world': 'world',
        'block': 'block',
        'blocks': 'blocks'
    }

    def __init__(self, max=None, min=None, type=None, world=None, block=None, blocks=None):  # noqa: E501
        """CreateBlockOperationRequest - a model defined in Swagger"""  # noqa: E501

        self._max = None
        self._min = None
        self._type = None
        self._world = None
        self._block = None
        self._blocks = None
        self.discriminator = None

        self.max = max
        self.min = min
        self.type = type
        self.world = world
        if block is not None:
            self.block = block
        if blocks is not None:
            self.blocks = blocks

    @property
    def max(self):
        """Gets the max of this CreateBlockOperationRequest.  # noqa: E501

        The maximum world coordinates spanning the cube where the operation is run  # noqa: E501

        :return: The max of this CreateBlockOperationRequest.  # noqa: E501
        :rtype: Vector3i
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this CreateBlockOperationRequest.

        The maximum world coordinates spanning the cube where the operation is run  # noqa: E501

        :param max: The max of this CreateBlockOperationRequest.  # noqa: E501
        :type: Vector3i
        """
        if max is None:
            raise ValueError("Invalid value for `max`, must not be `None`")  # noqa: E501

        self._max = max

    @property
    def min(self):
        """Gets the min of this CreateBlockOperationRequest.  # noqa: E501

        The minimum world coordinates spanning the cube where the operation is run  # noqa: E501

        :return: The min of this CreateBlockOperationRequest.  # noqa: E501
        :rtype: Vector3i
        """
        return self._min

    @min.setter
    def min(self, min):
        """Sets the min of this CreateBlockOperationRequest.

        The minimum world coordinates spanning the cube where the operation is run  # noqa: E501

        :param min: The min of this CreateBlockOperationRequest.  # noqa: E501
        :type: Vector3i
        """
        if min is None:
            raise ValueError("Invalid value for `min`, must not be `None`")  # noqa: E501

        self._min = min

    @property
    def type(self):
        """Gets the type of this CreateBlockOperationRequest.  # noqa: E501

        The type of the block operation  # noqa: E501

        :return: The type of this CreateBlockOperationRequest.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateBlockOperationRequest.

        The type of the block operation  # noqa: E501

        :param type: The type of this CreateBlockOperationRequest.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["GET", "CHANGE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def world(self):
        """Gets the world of this CreateBlockOperationRequest.  # noqa: E501

        The world that the operation is run in  # noqa: E501

        :return: The world of this CreateBlockOperationRequest.  # noqa: E501
        :rtype: str
        """
        return self._world

    @world.setter
    def world(self, world):
        """Sets the world of this CreateBlockOperationRequest.

        The world that the operation is run in  # noqa: E501

        :param world: The world of this CreateBlockOperationRequest.  # noqa: E501
        :type: str
        """
        if world is None:
            raise ValueError("Invalid value for `world`, must not be `None`")  # noqa: E501

        self._world = world

    @property
    def block(self):
        """Gets the block of this CreateBlockOperationRequest.  # noqa: E501

        The block that we want to change all other blocks into (when using an UPDATE operation  # noqa: E501

        :return: The block of this CreateBlockOperationRequest.  # noqa: E501
        :rtype: BlockState
        """
        return self._block

    @block.setter
    def block(self, block):
        """Sets the block of this CreateBlockOperationRequest.

        The block that we want to change all other blocks into (when using an UPDATE operation  # noqa: E501

        :param block: The block of this CreateBlockOperationRequest.  # noqa: E501
        :type: BlockState
        """

        self._block = block

    @property
    def blocks(self):
        """Gets the blocks of this CreateBlockOperationRequest.  # noqa: E501

        An array of blocks defining what each block in the spanned cube  # noqa: E501

        :return: The blocks of this CreateBlockOperationRequest.  # noqa: E501
        :rtype: list[list[list[BlockState]]]
        """
        return self._blocks

    @blocks.setter
    def blocks(self, blocks):
        """Sets the blocks of this CreateBlockOperationRequest.

        An array of blocks defining what each block in the spanned cube  # noqa: E501

        :param blocks: The blocks of this CreateBlockOperationRequest.  # noqa: E501
        :type: list[list[list[BlockState]]]
        """

        self._blocks = blocks

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateBlockOperationRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
