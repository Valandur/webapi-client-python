# coding: utf-8

"""
    WebAPI

    Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/...  As a quick test try reaching the route http:/localhost:8080/api/info (remember that you can only access \"localhost\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md) 

    OpenAPI spec version: <version>
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CommandCall(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'timestamp': 'str',
        'command': 'str',
        'args': 'list[str]',
        'source': 'object',
        'result': 'CommandResult'
    }

    attribute_map = {
        'timestamp': 'timestamp',
        'command': 'command',
        'args': 'args',
        'source': 'source',
        'result': 'result'
    }

    def __init__(self, timestamp=None, command=None, args=None, source=None, result=None):
        """
        CommandCall - a model defined in Swagger
        """

        self._timestamp = None
        self._command = None
        self._args = None
        self._source = None
        self._result = None

        if timestamp is not None:
          self.timestamp = timestamp
        if command is not None:
          self.command = command
        if args is not None:
          self.args = args
        if source is not None:
          self.source = source
        if result is not None:
          self.result = result

    @property
    def timestamp(self):
        """
        Gets the timestamp of this CommandCall.
        The timestamp when the message was sent (server time).

        :return: The timestamp of this CommandCall.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """
        Sets the timestamp of this CommandCall.
        The timestamp when the message was sent (server time).

        :param timestamp: The timestamp of this CommandCall.
        :type: str
        """

        self._timestamp = timestamp

    @property
    def command(self):
        """
        Gets the command of this CommandCall.
        The name of the command that was executed.

        :return: The command of this CommandCall.
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command):
        """
        Sets the command of this CommandCall.
        The name of the command that was executed.

        :param command: The command of this CommandCall.
        :type: str
        """

        self._command = command

    @property
    def args(self):
        """
        Gets the args of this CommandCall.
        The command arguments passed to the command.

        :return: The args of this CommandCall.
        :rtype: list[str]
        """
        return self._args

    @args.setter
    def args(self, args):
        """
        Sets the args of this CommandCall.
        The command arguments passed to the command.

        :param args: The args of this CommandCall.
        :type: list[str]
        """

        self._args = args

    @property
    def source(self):
        """
        Gets the source of this CommandCall.
        An object describing the source (executor) of the command. Usually a player or the console.

        :return: The source of this CommandCall.
        :rtype: object
        """
        return self._source

    @source.setter
    def source(self, source):
        """
        Sets the source of this CommandCall.
        An object describing the source (executor) of the command. Usually a player or the console.

        :param source: The source of this CommandCall.
        :type: object
        """

        self._source = source

    @property
    def result(self):
        """
        Gets the result of this CommandCall.

        :return: The result of this CommandCall.
        :rtype: CommandResult
        """
        return self._result

    @result.setter
    def result(self, result):
        """
        Sets the result of this CommandCall.

        :param result: The result of this CommandCall.
        :type: CommandResult
        """

        self._result = result

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CommandCall):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
