# coding: utf-8

"""
    Web-API

    Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/v5...  As a quick test try reaching the route http:/localhost:8080/api/v5/info (remember that you can only access \\\"localhost\\\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # List endpoints Lots of objects offer an endpoint to list all objects (e.g. `GET: /world` to get all worlds). These endpoints return only the properties marked 'required' by default, because the list might be quite large. If you want to return ALL data for a list endpoint add the query parameter `details`, (e.g. `GET: /world?details`).  > Remember that in this case the data returned by the endpoint might be quite large.  # Debugging endpoints Apart from the `?details` flag you can also pass some other flags for debugging purposes. Remember that you must include the first query parameter with `?`, and further ones with `&`:  `details`: Includes details for list endpoints  `accept=[json/xml]`: Manually set the accept content type. This is good for browser testing, **BUT DON'T USE THIS IN PRODUCTION, YOU CAN SUPPLY THE `Accepts` HEADER FOR THAT**  `pretty`: Pretty prints the data, also good for debugging in the browser.  An example request might look like this: `http://localhost:8080/api/v5/world?details&accpet=json&pretty&key=MY-API-KEY`  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md)  # noqa: E501

    OpenAPI spec version: @version@
    Contact: inithilian@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.husky_crates_crate_reward import HuskyCratesCrateReward  # noqa: F401,E501


class HuskyCratesCrate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'free': 'bool',
        'free_delay': 'int',
        'id': 'str',
        'link': 'str',
        'name': 'str',
        'rewards': 'list[HuskyCratesCrateReward]',
        'scramble_rewards': 'bool',
        'type': 'str'
    }

    attribute_map = {
        'free': 'free',
        'free_delay': 'freeDelay',
        'id': 'id',
        'link': 'link',
        'name': 'name',
        'rewards': 'rewards',
        'scramble_rewards': 'scrambleRewards',
        'type': 'type'
    }

    def __init__(self, free=None, free_delay=None, id=None, link=None, name=None, rewards=None, scramble_rewards=None, type=None):  # noqa: E501
        """HuskyCratesCrate - a model defined in Swagger"""  # noqa: E501

        self._free = None
        self._free_delay = None
        self._id = None
        self._link = None
        self._name = None
        self._rewards = None
        self._scramble_rewards = None
        self._type = None
        self.discriminator = None

        self.free = free
        self.free_delay = free_delay
        self.id = id
        self.link = link
        self.name = name
        self.rewards = rewards
        self.scramble_rewards = scramble_rewards
        self.type = type

    @property
    def free(self):
        """Gets the free of this HuskyCratesCrate.  # noqa: E501

        True if this crate is free to open, false otherwise  # noqa: E501

        :return: The free of this HuskyCratesCrate.  # noqa: E501
        :rtype: bool
        """
        return self._free

    @free.setter
    def free(self, free):
        """Sets the free of this HuskyCratesCrate.

        True if this crate is free to open, false otherwise  # noqa: E501

        :param free: The free of this HuskyCratesCrate.  # noqa: E501
        :type: bool
        """
        if free is None:
            raise ValueError("Invalid value for `free`, must not be `None`")  # noqa: E501

        self._free = free

    @property
    def free_delay(self):
        """Gets the free_delay of this HuskyCratesCrate.  # noqa: E501

        In case this crate is free, this interval specifies the time (in seconds) after which this crate can be opened again  # noqa: E501

        :return: The free_delay of this HuskyCratesCrate.  # noqa: E501
        :rtype: int
        """
        return self._free_delay

    @free_delay.setter
    def free_delay(self, free_delay):
        """Sets the free_delay of this HuskyCratesCrate.

        In case this crate is free, this interval specifies the time (in seconds) after which this crate can be opened again  # noqa: E501

        :param free_delay: The free_delay of this HuskyCratesCrate.  # noqa: E501
        :type: int
        """
        if free_delay is None:
            raise ValueError("Invalid value for `free_delay`, must not be `None`")  # noqa: E501

        self._free_delay = free_delay

    @property
    def id(self):
        """Gets the id of this HuskyCratesCrate.  # noqa: E501

        The unique id of this crate  # noqa: E501

        :return: The id of this HuskyCratesCrate.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HuskyCratesCrate.

        The unique id of this crate  # noqa: E501

        :param id: The id of this HuskyCratesCrate.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def link(self):
        """Gets the link of this HuskyCratesCrate.  # noqa: E501

        The API link that can be used to obtain more information about this object  # noqa: E501

        :return: The link of this HuskyCratesCrate.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this HuskyCratesCrate.

        The API link that can be used to obtain more information about this object  # noqa: E501

        :param link: The link of this HuskyCratesCrate.  # noqa: E501
        :type: str
        """
        if link is None:
            raise ValueError("Invalid value for `link`, must not be `None`")  # noqa: E501

        self._link = link

    @property
    def name(self):
        """Gets the name of this HuskyCratesCrate.  # noqa: E501

        The name of the crate  # noqa: E501

        :return: The name of this HuskyCratesCrate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this HuskyCratesCrate.

        The name of the crate  # noqa: E501

        :param name: The name of this HuskyCratesCrate.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def rewards(self):
        """Gets the rewards of this HuskyCratesCrate.  # noqa: E501

        The possible rewards awarded for opening this crate  # noqa: E501

        :return: The rewards of this HuskyCratesCrate.  # noqa: E501
        :rtype: list[HuskyCratesCrateReward]
        """
        return self._rewards

    @rewards.setter
    def rewards(self, rewards):
        """Sets the rewards of this HuskyCratesCrate.

        The possible rewards awarded for opening this crate  # noqa: E501

        :param rewards: The rewards of this HuskyCratesCrate.  # noqa: E501
        :type: list[HuskyCratesCrateReward]
        """
        if rewards is None:
            raise ValueError("Invalid value for `rewards`, must not be `None`")  # noqa: E501

        self._rewards = rewards

    @property
    def scramble_rewards(self):
        """Gets the scramble_rewards of this HuskyCratesCrate.  # noqa: E501

        True if the rewards are scrambled, false otherwise  # noqa: E501

        :return: The scramble_rewards of this HuskyCratesCrate.  # noqa: E501
        :rtype: bool
        """
        return self._scramble_rewards

    @scramble_rewards.setter
    def scramble_rewards(self, scramble_rewards):
        """Sets the scramble_rewards of this HuskyCratesCrate.

        True if the rewards are scrambled, false otherwise  # noqa: E501

        :param scramble_rewards: The scramble_rewards of this HuskyCratesCrate.  # noqa: E501
        :type: bool
        """
        if scramble_rewards is None:
            raise ValueError("Invalid value for `scramble_rewards`, must not be `None`")  # noqa: E501

        self._scramble_rewards = scramble_rewards

    @property
    def type(self):
        """Gets the type of this HuskyCratesCrate.  # noqa: E501

        The type of crate  # noqa: E501

        :return: The type of this HuskyCratesCrate.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this HuskyCratesCrate.

        The type of crate  # noqa: E501

        :param type: The type of this HuskyCratesCrate.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["Spinner", "Roulette", "Instant", "Simple"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HuskyCratesCrate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
