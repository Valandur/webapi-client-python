# coding: utf-8

"""
    Web-API

    Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/v5...  As a quick test try reaching the route http:/localhost:8080/api/v5/info (remember that you can only access \\\"localhost\\\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # List endpoints Lots of objects offer an endpoint to list all objects (e.g. `GET: /world` to get all worlds). These endpoints return only the properties marked 'required' by default, because the list might be quite large. If you want to return ALL data for a list endpoint add the query parameter `details`, (e.g. `GET: /world?details`).  > Remember that in this case the data returned by the endpoint might be quite large.  # Debugging endpoints Apart from the `?details` flag you can also pass some other flags for debugging purposes. Remember that you must include the first query parameter with `?`, and further ones with `&`:  `details`: Includes details for list endpoints  `accept=[json/xml]`: Manually set the accept content type. This is good for browser testing, **BUT DON'T USE THIS IN PRODUCTION, YOU CAN SUPPLY THE `Accepts` HEADER FOR THAT**  `pretty`: Pretty prints the data, also good for debugging in the browser.  An example request might look like this: `http://localhost:8080/api/v5/world?details&accpet=json&pretty&key=MY-API-KEY`  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md)  # noqa: E501

    OpenAPI spec version: 5.4.2-S7.1.0
    Contact: inithilian@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.catalog_type_entity_type import CatalogTypeEntityType  # noqa: F401,E501
from swagger_client.models.location import Location  # noqa: F401,E501
from swagger_client.models.villager_shops_stock_item import VillagerShopsStockItem  # noqa: F401,E501


class VillagerShopsShop(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entity_type': 'CatalogTypeEntityType',
        'link': 'str',
        'entity_variant': 'str',
        'location': 'Location',
        'name': 'str',
        'owner': 'str',
        'rotation': 'float',
        'stock_container': 'Location',
        'stock_items': 'list[VillagerShopsStockItem]',
        'uid': 'str'
    }

    attribute_map = {
        'entity_type': 'entityType',
        'link': 'link',
        'entity_variant': 'entityVariant',
        'location': 'location',
        'name': 'name',
        'owner': 'owner',
        'rotation': 'rotation',
        'stock_container': 'stockContainer',
        'stock_items': 'stockItems',
        'uid': 'uid'
    }

    def __init__(self, entity_type=None, link=None, entity_variant=None, location=None, name=None, owner=None, rotation=None, stock_container=None, stock_items=None, uid=None):  # noqa: E501
        """VillagerShopsShop - a model defined in Swagger"""  # noqa: E501

        self._entity_type = None
        self._link = None
        self._entity_variant = None
        self._location = None
        self._name = None
        self._owner = None
        self._rotation = None
        self._stock_container = None
        self._stock_items = None
        self._uid = None
        self.discriminator = None

        self.entity_type = entity_type
        self.link = link
        if entity_variant is not None:
            self.entity_variant = entity_variant
        if location is not None:
            self.location = location
        if name is not None:
            self.name = name
        if owner is not None:
            self.owner = owner
        if rotation is not None:
            self.rotation = rotation
        if stock_container is not None:
            self.stock_container = stock_container
        if stock_items is not None:
            self.stock_items = stock_items
        if uid is not None:
            self.uid = uid

    @property
    def entity_type(self):
        """Gets the entity_type of this VillagerShopsShop.  # noqa: E501

        The minecraft entity type string for this shops visual entity  # noqa: E501

        :return: The entity_type of this VillagerShopsShop.  # noqa: E501
        :rtype: CatalogTypeEntityType
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this VillagerShopsShop.

        The minecraft entity type string for this shops visual entity  # noqa: E501

        :param entity_type: The entity_type of this VillagerShopsShop.  # noqa: E501
        :type: CatalogTypeEntityType
        """
        if entity_type is None:
            raise ValueError("Invalid value for `entity_type`, must not be `None`")  # noqa: E501

        self._entity_type = entity_type

    @property
    def link(self):
        """Gets the link of this VillagerShopsShop.  # noqa: E501

        The API link that can be used to obtain more information about this object  # noqa: E501

        :return: The link of this VillagerShopsShop.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this VillagerShopsShop.

        The API link that can be used to obtain more information about this object  # noqa: E501

        :param link: The link of this VillagerShopsShop.  # noqa: E501
        :type: str
        """
        if link is None:
            raise ValueError("Invalid value for `link`, must not be `None`")  # noqa: E501

        self._link = link

    @property
    def entity_variant(self):
        """Gets the entity_variant of this VillagerShopsShop.  # noqa: E501

        A very dynamic variant string for vanilla mobs, most variants as in the minecraft wiki should be supported  # noqa: E501

        :return: The entity_variant of this VillagerShopsShop.  # noqa: E501
        :rtype: str
        """
        return self._entity_variant

    @entity_variant.setter
    def entity_variant(self, entity_variant):
        """Sets the entity_variant of this VillagerShopsShop.

        A very dynamic variant string for vanilla mobs, most variants as in the minecraft wiki should be supported  # noqa: E501

        :param entity_variant: The entity_variant of this VillagerShopsShop.  # noqa: E501
        :type: str
        """

        self._entity_variant = entity_variant

    @property
    def location(self):
        """Gets the location of this VillagerShopsShop.  # noqa: E501

        Where the shop is currently located  # noqa: E501

        :return: The location of this VillagerShopsShop.  # noqa: E501
        :rtype: Location
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this VillagerShopsShop.

        Where the shop is currently located  # noqa: E501

        :param location: The location of this VillagerShopsShop.  # noqa: E501
        :type: Location
        """

        self._location = location

    @property
    def name(self):
        """Gets the name of this VillagerShopsShop.  # noqa: E501

        The escaped shop name  # noqa: E501

        :return: The name of this VillagerShopsShop.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VillagerShopsShop.

        The escaped shop name  # noqa: E501

        :param name: The name of this VillagerShopsShop.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def owner(self):
        """Gets the owner of this VillagerShopsShop.  # noqa: E501

        If this shop is a player shop this conatins the UUID of this shops owner. Omitting this field or setting it to null will remove the player-shop association.  # noqa: E501

        :return: The owner of this VillagerShopsShop.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this VillagerShopsShop.

        If this shop is a player shop this conatins the UUID of this shops owner. Omitting this field or setting it to null will remove the player-shop association.  # noqa: E501

        :param owner: The owner of this VillagerShopsShop.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def rotation(self):
        """Gets the rotation of this VillagerShopsShop.  # noqa: E501

        The mobs roations around their up-axis  # noqa: E501

        :return: The rotation of this VillagerShopsShop.  # noqa: E501
        :rtype: float
        """
        return self._rotation

    @rotation.setter
    def rotation(self, rotation):
        """Sets the rotation of this VillagerShopsShop.

        The mobs roations around their up-axis  # noqa: E501

        :param rotation: The rotation of this VillagerShopsShop.  # noqa: E501
        :type: float
        """

        self._rotation = rotation

    @property
    def stock_container(self):
        """Gets the stock_container of this VillagerShopsShop.  # noqa: E501

        Location where a container should reside for stocking items. Omitting this field or setting it to null will remove the stock container. Having a player-shop without container is undefined behaviour!  # noqa: E501

        :return: The stock_container of this VillagerShopsShop.  # noqa: E501
        :rtype: Location
        """
        return self._stock_container

    @stock_container.setter
    def stock_container(self, stock_container):
        """Sets the stock_container of this VillagerShopsShop.

        Location where a container should reside for stocking items. Omitting this field or setting it to null will remove the stock container. Having a player-shop without container is undefined behaviour!  # noqa: E501

        :param stock_container: The stock_container of this VillagerShopsShop.  # noqa: E501
        :type: Location
        """

        self._stock_container = stock_container

    @property
    def stock_items(self):
        """Gets the stock_items of this VillagerShopsShop.  # noqa: E501

        Returns a list of all stock items currently listed. This property is read only.  # noqa: E501

        :return: The stock_items of this VillagerShopsShop.  # noqa: E501
        :rtype: list[VillagerShopsStockItem]
        """
        return self._stock_items

    @stock_items.setter
    def stock_items(self, stock_items):
        """Sets the stock_items of this VillagerShopsShop.

        Returns a list of all stock items currently listed. This property is read only.  # noqa: E501

        :param stock_items: The stock_items of this VillagerShopsShop.  # noqa: E501
        :type: list[VillagerShopsStockItem]
        """

        self._stock_items = stock_items

    @property
    def uid(self):
        """Gets the uid of this VillagerShopsShop.  # noqa: E501

        The unique shop identifier; this is not the mob uuid  # noqa: E501

        :return: The uid of this VillagerShopsShop.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this VillagerShopsShop.

        The unique shop identifier; this is not the mob uuid  # noqa: E501

        :param uid: The uid of this VillagerShopsShop.  # noqa: E501
        :type: str
        """

        self._uid = uid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VillagerShopsShop):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
