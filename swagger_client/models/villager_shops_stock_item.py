# coding: utf-8

"""
    Web-API

    Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/v5...  As a quick test try reaching the route http:/localhost:8080/api/v5/info (remember that you can only access \\\"localhost\\\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # List endpoints Lots of objects offer an endpoint to list all objects (e.g. `GET: /world` to get all worlds). These endpoints return only the properties marked 'required' by default, because the list might be quite large. If you want to return ALL data for a list endpoint add the query parameter `details`, (e.g. `GET: /world?details`).  > Remember that in this case the data returned by the endpoint might be quite large.  # Debugging endpoints Apart from the `?details` flag you can also pass some other flags for debugging purposes. Remember that you must include the first query parameter with `?`, and further ones with `&`:  `details`: Includes details for list endpoints  `accept=[json/xml]`: Manually set the accept content type. This is good for browser testing, **BUT DON'T USE THIS IN PRODUCTION, YOU CAN SUPPLY THE `Accepts` HEADER FOR THAT**  `pretty`: Pretty prints the data, also good for debugging in the browser.  An example request might look like this: `http://localhost:8080/api/v5/world?details&accpet=json&pretty&key=MY-API-KEY`  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md)  # noqa: E501

    OpenAPI spec version: 5.4.2-S7.1.0
    Contact: inithilian@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.catalog_type_currency import CatalogTypeCurrency  # noqa: F401,E501
from swagger_client.models.item_stack import ItemStack  # noqa: F401,E501


class VillagerShopsStockItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'buy_price': 'float',
        'currency': 'CatalogTypeCurrency',
        'has_stock': 'bool',
        'item': 'ItemStack',
        'max_stock': 'int',
        'sell_price': 'float',
        'shop_id': 'str',
        'stock': 'int',
        'id': 'int',
        'link': 'str'
    }

    attribute_map = {
        'buy_price': 'buyPrice',
        'currency': 'currency',
        'has_stock': 'hasStock',
        'item': 'item',
        'max_stock': 'maxStock',
        'sell_price': 'sellPrice',
        'shop_id': 'shopId',
        'stock': 'stock',
        'id': 'id',
        'link': 'link'
    }

    def __init__(self, buy_price=None, currency=None, has_stock=None, item=None, max_stock=None, sell_price=None, shop_id=None, stock=None, id=None, link=None):  # noqa: E501
        """VillagerShopsStockItem - a model defined in Swagger"""  # noqa: E501

        self._buy_price = None
        self._currency = None
        self._has_stock = None
        self._item = None
        self._max_stock = None
        self._sell_price = None
        self._shop_id = None
        self._stock = None
        self._id = None
        self._link = None
        self.discriminator = None

        self.buy_price = buy_price
        self.currency = currency
        self.has_stock = has_stock
        self.item = item
        self.max_stock = max_stock
        self.sell_price = sell_price
        self.shop_id = shop_id
        self.stock = stock
        if id is not None:
            self.id = id
        if link is not None:
            self.link = link

    @property
    def buy_price(self):
        """Gets the buy_price of this VillagerShopsStockItem.  # noqa: E501

        The amount of money this stack consts to buy as player  # noqa: E501

        :return: The buy_price of this VillagerShopsStockItem.  # noqa: E501
        :rtype: float
        """
        return self._buy_price

    @buy_price.setter
    def buy_price(self, buy_price):
        """Sets the buy_price of this VillagerShopsStockItem.

        The amount of money this stack consts to buy as player  # noqa: E501

        :param buy_price: The buy_price of this VillagerShopsStockItem.  # noqa: E501
        :type: float
        """
        if buy_price is None:
            raise ValueError("Invalid value for `buy_price`, must not be `None`")  # noqa: E501

        self._buy_price = buy_price

    @property
    def currency(self):
        """Gets the currency of this VillagerShopsStockItem.  # noqa: E501

        The currency for this item listing  # noqa: E501

        :return: The currency of this VillagerShopsStockItem.  # noqa: E501
        :rtype: CatalogTypeCurrency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this VillagerShopsStockItem.

        The currency for this item listing  # noqa: E501

        :param currency: The currency of this VillagerShopsStockItem.  # noqa: E501
        :type: CatalogTypeCurrency
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def has_stock(self):
        """Gets the has_stock of this VillagerShopsStockItem.  # noqa: E501

        Returns wether this shop has a limited stock  # noqa: E501

        :return: The has_stock of this VillagerShopsStockItem.  # noqa: E501
        :rtype: bool
        """
        return self._has_stock

    @has_stock.setter
    def has_stock(self, has_stock):
        """Sets the has_stock of this VillagerShopsStockItem.

        Returns wether this shop has a limited stock  # noqa: E501

        :param has_stock: The has_stock of this VillagerShopsStockItem.  # noqa: E501
        :type: bool
        """
        if has_stock is None:
            raise ValueError("Invalid value for `has_stock`, must not be `None`")  # noqa: E501

        self._has_stock = has_stock

    @property
    def item(self):
        """Gets the item of this VillagerShopsStockItem.  # noqa: E501

        The raw ItemStack data for this shop listing  # noqa: E501

        :return: The item of this VillagerShopsStockItem.  # noqa: E501
        :rtype: ItemStack
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this VillagerShopsStockItem.

        The raw ItemStack data for this shop listing  # noqa: E501

        :param item: The item of this VillagerShopsStockItem.  # noqa: E501
        :type: ItemStack
        """
        if item is None:
            raise ValueError("Invalid value for `item`, must not be `None`")  # noqa: E501

        self._item = item

    @property
    def max_stock(self):
        """Gets the max_stock of this VillagerShopsStockItem.  # noqa: E501

        If this shop has a limited stock, returns how many of these items can be stocked, 0 is unlimited  # noqa: E501

        :return: The max_stock of this VillagerShopsStockItem.  # noqa: E501
        :rtype: int
        """
        return self._max_stock

    @max_stock.setter
    def max_stock(self, max_stock):
        """Sets the max_stock of this VillagerShopsStockItem.

        If this shop has a limited stock, returns how many of these items can be stocked, 0 is unlimited  # noqa: E501

        :param max_stock: The max_stock of this VillagerShopsStockItem.  # noqa: E501
        :type: int
        """
        if max_stock is None:
            raise ValueError("Invalid value for `max_stock`, must not be `None`")  # noqa: E501

        self._max_stock = max_stock

    @property
    def sell_price(self):
        """Gets the sell_price of this VillagerShopsStockItem.  # noqa: E501

        The amount of money this stack earns the player when selling  # noqa: E501

        :return: The sell_price of this VillagerShopsStockItem.  # noqa: E501
        :rtype: float
        """
        return self._sell_price

    @sell_price.setter
    def sell_price(self, sell_price):
        """Sets the sell_price of this VillagerShopsStockItem.

        The amount of money this stack earns the player when selling  # noqa: E501

        :param sell_price: The sell_price of this VillagerShopsStockItem.  # noqa: E501
        :type: float
        """
        if sell_price is None:
            raise ValueError("Invalid value for `sell_price`, must not be `None`")  # noqa: E501

        self._sell_price = sell_price

    @property
    def shop_id(self):
        """Gets the shop_id of this VillagerShopsStockItem.  # noqa: E501

        The shop uuid offering this item listing  # noqa: E501

        :return: The shop_id of this VillagerShopsStockItem.  # noqa: E501
        :rtype: str
        """
        return self._shop_id

    @shop_id.setter
    def shop_id(self, shop_id):
        """Sets the shop_id of this VillagerShopsStockItem.

        The shop uuid offering this item listing  # noqa: E501

        :param shop_id: The shop_id of this VillagerShopsStockItem.  # noqa: E501
        :type: str
        """
        if shop_id is None:
            raise ValueError("Invalid value for `shop_id`, must not be `None`")  # noqa: E501

        self._shop_id = shop_id

    @property
    def stock(self):
        """Gets the stock of this VillagerShopsStockItem.  # noqa: E501

        If this shop has a limited stock, returns how many items are stocked, otherwise returns items stack size  # noqa: E501

        :return: The stock of this VillagerShopsStockItem.  # noqa: E501
        :rtype: int
        """
        return self._stock

    @stock.setter
    def stock(self, stock):
        """Sets the stock of this VillagerShopsStockItem.

        If this shop has a limited stock, returns how many items are stocked, otherwise returns items stack size  # noqa: E501

        :param stock: The stock of this VillagerShopsStockItem.  # noqa: E501
        :type: int
        """
        if stock is None:
            raise ValueError("Invalid value for `stock`, must not be `None`")  # noqa: E501

        self._stock = stock

    @property
    def id(self):
        """Gets the id of this VillagerShopsStockItem.  # noqa: E501

        The index of this item withing the shops inventory  # noqa: E501

        :return: The id of this VillagerShopsStockItem.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VillagerShopsStockItem.

        The index of this item withing the shops inventory  # noqa: E501

        :param id: The id of this VillagerShopsStockItem.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def link(self):
        """Gets the link of this VillagerShopsStockItem.  # noqa: E501


        :return: The link of this VillagerShopsStockItem.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this VillagerShopsStockItem.


        :param link: The link of this VillagerShopsStockItem.  # noqa: E501
        :type: str
        """

        self._link = link

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VillagerShopsStockItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
