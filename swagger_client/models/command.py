# coding: utf-8

"""
    Web-API

    Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/v5...  As a quick test try reaching the route http:/localhost:8080/api/v5/info (remember that you can only access \\\"localhost\\\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # List endpoints Lots of objects offer an endpoint to list all objects (e.g. `GET: /world` to get all worlds). These endpoints return only the properties marked 'required' by default, because the list might be quite large. If you want to return ALL data for a list endpoint add the query parameter `details`, (e.g. `GET: /world?details`).  > Remember that in this case the data returned by the endpoint might be quite large.  # Debugging endpoints Apart from the `?details` flag you can also pass some other flags for debugging purposes. Remember that you must include the first query parameter with `?`, and further ones with `&`:  `details`: Includes details for list endpoints  `accept=[json/xml]`: Manually set the accept content type. This is good for browser testing, **BUT DON'T USE THIS IN PRODUCTION, YOU CAN SUPPLY THE `Accepts` HEADER FOR THAT**  `pretty`: Pretty prints the data, also good for debugging in the browser.  An example request might look like this: `http://localhost:8080/api/v5/world?details&accpet=json&pretty&key=MY-API-KEY`  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md)  # noqa: E501

    OpenAPI spec version: 5.4.2-S7.1.0
    Contact: inithilian@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Command(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'aliases': 'list[str]',
        'description': 'str',
        'help': 'str',
        'link': 'str',
        'name': 'str',
        'usage': 'str'
    }

    attribute_map = {
        'aliases': 'aliases',
        'description': 'description',
        'help': 'help',
        'link': 'link',
        'name': 'name',
        'usage': 'usage'
    }

    def __init__(self, aliases=None, description=None, help=None, link=None, name=None, usage=None):  # noqa: E501
        """Command - a model defined in Swagger"""  # noqa: E501

        self._aliases = None
        self._description = None
        self._help = None
        self._link = None
        self._name = None
        self._usage = None
        self.discriminator = None

        self.aliases = aliases
        self.description = description
        self.help = help
        self.link = link
        self.name = name
        self.usage = usage

    @property
    def aliases(self):
        """Gets the aliases of this Command.  # noqa: E501

        All the aliases that were registered for this command  # noqa: E501

        :return: The aliases of this Command.  # noqa: E501
        :rtype: list[str]
        """
        return self._aliases

    @aliases.setter
    def aliases(self, aliases):
        """Sets the aliases of this Command.

        All the aliases that were registered for this command  # noqa: E501

        :param aliases: The aliases of this Command.  # noqa: E501
        :type: list[str]
        """
        if aliases is None:
            raise ValueError("Invalid value for `aliases`, must not be `None`")  # noqa: E501

        self._aliases = aliases

    @property
    def description(self):
        """Gets the description of this Command.  # noqa: E501

        The description provided with the command  # noqa: E501

        :return: The description of this Command.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Command.

        The description provided with the command  # noqa: E501

        :param description: The description of this Command.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def help(self):
        """Gets the help of this Command.  # noqa: E501

        Extended help information on the usage of the command  # noqa: E501

        :return: The help of this Command.  # noqa: E501
        :rtype: str
        """
        return self._help

    @help.setter
    def help(self, help):
        """Sets the help of this Command.

        Extended help information on the usage of the command  # noqa: E501

        :param help: The help of this Command.  # noqa: E501
        :type: str
        """
        if help is None:
            raise ValueError("Invalid value for `help`, must not be `None`")  # noqa: E501

        self._help = help

    @property
    def link(self):
        """Gets the link of this Command.  # noqa: E501

        The API link that can be used to obtain more information about this object  # noqa: E501

        :return: The link of this Command.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this Command.

        The API link that can be used to obtain more information about this object  # noqa: E501

        :param link: The link of this Command.  # noqa: E501
        :type: str
        """
        if link is None:
            raise ValueError("Invalid value for `link`, must not be `None`")  # noqa: E501

        self._link = link

    @property
    def name(self):
        """Gets the name of this Command.  # noqa: E501

        The name of the command, sometimes also referred to as primary alias.  # noqa: E501

        :return: The name of this Command.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Command.

        The name of the command, sometimes also referred to as primary alias.  # noqa: E501

        :param name: The name of this Command.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def usage(self):
        """Gets the usage of this Command.  # noqa: E501

        A short description of the usage of this command  # noqa: E501

        :return: The usage of this Command.  # noqa: E501
        :rtype: str
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """Sets the usage of this Command.

        A short description of the usage of this command  # noqa: E501

        :param usage: The usage of this Command.  # noqa: E501
        :type: str
        """
        if usage is None:
            raise ValueError("Invalid value for `usage`, must not be `None`")  # noqa: E501

        self._usage = usage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Command, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Command):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
