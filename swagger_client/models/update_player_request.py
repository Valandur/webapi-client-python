# coding: utf-8

"""
    WebAPI

    Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/...  As a quick test try reaching the route http:/localhost:8080/api/info (remember that you can only access \"localhost\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md) 

    OpenAPI spec version: <version>
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class UpdatePlayerRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'world': 'str',
        'position': 'Vector3',
        'velocity': 'Vector3',
        'rotation': 'Vector3',
        'scale': 'Vector3',
        'food_level': 'float',
        'exhaustion': 'float',
        'saturation': 'float',
        'total_experience': 'float',
        'level': 'float',
        'experience_since_level': 'float',
        'health': 'float',
        'max_health': 'float',
        'damage': 'DamageRequest1'
    }

    attribute_map = {
        'world': 'world',
        'position': 'position',
        'velocity': 'velocity',
        'rotation': 'rotation',
        'scale': 'scale',
        'food_level': 'foodLevel',
        'exhaustion': 'exhaustion',
        'saturation': 'saturation',
        'total_experience': 'totalExperience',
        'level': 'level',
        'experience_since_level': 'experienceSinceLevel',
        'health': 'health',
        'max_health': 'maxHealth',
        'damage': 'damage'
    }

    def __init__(self, world=None, position=None, velocity=None, rotation=None, scale=None, food_level=None, exhaustion=None, saturation=None, total_experience=None, level=None, experience_since_level=None, health=None, max_health=None, damage=None):
        """
        UpdatePlayerRequest - a model defined in Swagger
        """

        self._world = None
        self._position = None
        self._velocity = None
        self._rotation = None
        self._scale = None
        self._food_level = None
        self._exhaustion = None
        self._saturation = None
        self._total_experience = None
        self._level = None
        self._experience_since_level = None
        self._health = None
        self._max_health = None
        self._damage = None

        if world is not None:
          self.world = world
        if position is not None:
          self.position = position
        if velocity is not None:
          self.velocity = velocity
        if rotation is not None:
          self.rotation = rotation
        if scale is not None:
          self.scale = scale
        if food_level is not None:
          self.food_level = food_level
        if exhaustion is not None:
          self.exhaustion = exhaustion
        if saturation is not None:
          self.saturation = saturation
        if total_experience is not None:
          self.total_experience = total_experience
        if level is not None:
          self.level = level
        if experience_since_level is not None:
          self.experience_since_level = experience_since_level
        if health is not None:
          self.health = health
        if max_health is not None:
          self.max_health = max_health
        if damage is not None:
          self.damage = damage

    @property
    def world(self):
        """
        Gets the world of this UpdatePlayerRequest.
        The UUID or name of the world that the player is moved to.

        :return: The world of this UpdatePlayerRequest.
        :rtype: str
        """
        return self._world

    @world.setter
    def world(self, world):
        """
        Sets the world of this UpdatePlayerRequest.
        The UUID or name of the world that the player is moved to.

        :param world: The world of this UpdatePlayerRequest.
        :type: str
        """

        self._world = world

    @property
    def position(self):
        """
        Gets the position of this UpdatePlayerRequest.

        :return: The position of this UpdatePlayerRequest.
        :rtype: Vector3
        """
        return self._position

    @position.setter
    def position(self, position):
        """
        Sets the position of this UpdatePlayerRequest.

        :param position: The position of this UpdatePlayerRequest.
        :type: Vector3
        """

        self._position = position

    @property
    def velocity(self):
        """
        Gets the velocity of this UpdatePlayerRequest.

        :return: The velocity of this UpdatePlayerRequest.
        :rtype: Vector3
        """
        return self._velocity

    @velocity.setter
    def velocity(self, velocity):
        """
        Sets the velocity of this UpdatePlayerRequest.

        :param velocity: The velocity of this UpdatePlayerRequest.
        :type: Vector3
        """

        self._velocity = velocity

    @property
    def rotation(self):
        """
        Gets the rotation of this UpdatePlayerRequest.

        :return: The rotation of this UpdatePlayerRequest.
        :rtype: Vector3
        """
        return self._rotation

    @rotation.setter
    def rotation(self, rotation):
        """
        Sets the rotation of this UpdatePlayerRequest.

        :param rotation: The rotation of this UpdatePlayerRequest.
        :type: Vector3
        """

        self._rotation = rotation

    @property
    def scale(self):
        """
        Gets the scale of this UpdatePlayerRequest.

        :return: The scale of this UpdatePlayerRequest.
        :rtype: Vector3
        """
        return self._scale

    @scale.setter
    def scale(self, scale):
        """
        Sets the scale of this UpdatePlayerRequest.

        :param scale: The scale of this UpdatePlayerRequest.
        :type: Vector3
        """

        self._scale = scale

    @property
    def food_level(self):
        """
        Gets the food_level of this UpdatePlayerRequest.
        The new food level of the player.

        :return: The food_level of this UpdatePlayerRequest.
        :rtype: float
        """
        return self._food_level

    @food_level.setter
    def food_level(self, food_level):
        """
        Sets the food_level of this UpdatePlayerRequest.
        The new food level of the player.

        :param food_level: The food_level of this UpdatePlayerRequest.
        :type: float
        """

        self._food_level = food_level

    @property
    def exhaustion(self):
        """
        Gets the exhaustion of this UpdatePlayerRequest.
        The new exhaustion level of the player.

        :return: The exhaustion of this UpdatePlayerRequest.
        :rtype: float
        """
        return self._exhaustion

    @exhaustion.setter
    def exhaustion(self, exhaustion):
        """
        Sets the exhaustion of this UpdatePlayerRequest.
        The new exhaustion level of the player.

        :param exhaustion: The exhaustion of this UpdatePlayerRequest.
        :type: float
        """

        self._exhaustion = exhaustion

    @property
    def saturation(self):
        """
        Gets the saturation of this UpdatePlayerRequest.
        The new saturation level of the player.

        :return: The saturation of this UpdatePlayerRequest.
        :rtype: float
        """
        return self._saturation

    @saturation.setter
    def saturation(self, saturation):
        """
        Sets the saturation of this UpdatePlayerRequest.
        The new saturation level of the player.

        :param saturation: The saturation of this UpdatePlayerRequest.
        :type: float
        """

        self._saturation = saturation

    @property
    def total_experience(self):
        """
        Gets the total_experience of this UpdatePlayerRequest.
        The total amount of experience the player has. This implicitly also sets the level.

        :return: The total_experience of this UpdatePlayerRequest.
        :rtype: float
        """
        return self._total_experience

    @total_experience.setter
    def total_experience(self, total_experience):
        """
        Sets the total_experience of this UpdatePlayerRequest.
        The total amount of experience the player has. This implicitly also sets the level.

        :param total_experience: The total_experience of this UpdatePlayerRequest.
        :type: float
        """

        self._total_experience = total_experience

    @property
    def level(self):
        """
        Gets the level of this UpdatePlayerRequest.
        The current level of the player. This is also defined by the total amount of experience the player has.

        :return: The level of this UpdatePlayerRequest.
        :rtype: float
        """
        return self._level

    @level.setter
    def level(self, level):
        """
        Sets the level of this UpdatePlayerRequest.
        The current level of the player. This is also defined by the total amount of experience the player has.

        :param level: The level of this UpdatePlayerRequest.
        :type: float
        """

        self._level = level

    @property
    def experience_since_level(self):
        """
        Gets the experience_since_level of this UpdatePlayerRequest.
        The amount of experience since the last level up that the player has collected.

        :return: The experience_since_level of this UpdatePlayerRequest.
        :rtype: float
        """
        return self._experience_since_level

    @experience_since_level.setter
    def experience_since_level(self, experience_since_level):
        """
        Sets the experience_since_level of this UpdatePlayerRequest.
        The amount of experience since the last level up that the player has collected.

        :param experience_since_level: The experience_since_level of this UpdatePlayerRequest.
        :type: float
        """

        self._experience_since_level = experience_since_level

    @property
    def health(self):
        """
        Gets the health of this UpdatePlayerRequest.
        The current amount of health the player has.

        :return: The health of this UpdatePlayerRequest.
        :rtype: float
        """
        return self._health

    @health.setter
    def health(self, health):
        """
        Sets the health of this UpdatePlayerRequest.
        The current amount of health the player has.

        :param health: The health of this UpdatePlayerRequest.
        :type: float
        """

        self._health = health

    @property
    def max_health(self):
        """
        Gets the max_health of this UpdatePlayerRequest.
        The total amount of health the player can have at maximum.

        :return: The max_health of this UpdatePlayerRequest.
        :rtype: float
        """
        return self._max_health

    @max_health.setter
    def max_health(self, max_health):
        """
        Sets the max_health of this UpdatePlayerRequest.
        The total amount of health the player can have at maximum.

        :param max_health: The max_health of this UpdatePlayerRequest.
        :type: float
        """

        self._max_health = max_health

    @property
    def damage(self):
        """
        Gets the damage of this UpdatePlayerRequest.

        :return: The damage of this UpdatePlayerRequest.
        :rtype: DamageRequest1
        """
        return self._damage

    @damage.setter
    def damage(self, damage):
        """
        Sets the damage of this UpdatePlayerRequest.

        :param damage: The damage of this UpdatePlayerRequest.
        :type: DamageRequest1
        """

        self._damage = damage

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, UpdatePlayerRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
