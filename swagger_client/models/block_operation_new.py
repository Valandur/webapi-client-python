# coding: utf-8

"""
    WebAPI

    Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/...  As a quick test try reaching the route http:/localhost:8080/api/info (remember that you can only access \"localhost\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md) 

    OpenAPI spec version: <version>
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class BlockOperationNew(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'world': 'str',
        'min': 'Vector3',
        'max': 'Vector3',
        'block': 'BlockFull',
        'blocks': 'list[list[list[BlockFull]]]'
    }

    attribute_map = {
        'type': 'type',
        'world': 'world',
        'min': 'min',
        'max': 'max',
        'block': 'block',
        'blocks': 'blocks'
    }

    def __init__(self, type=None, world=None, min=None, max=None, block=None, blocks=None):
        """
        BlockOperationNew - a model defined in Swagger
        """

        self._type = None
        self._world = None
        self._min = None
        self._max = None
        self._block = None
        self._blocks = None

        self.type = type
        self.world = world
        self.min = min
        self.max = max
        if block is not None:
          self.block = block
        if blocks is not None:
          self.blocks = blocks

    @property
    def type(self):
        """
        Gets the type of this BlockOperationNew.
        The type of action to perform. `GET` to fetch world blocks, `UPDATE` to change world blocks.

        :return: The type of this BlockOperationNew.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this BlockOperationNew.
        The type of action to perform. `GET` to fetch world blocks, `UPDATE` to change world blocks.

        :param type: The type of this BlockOperationNew.
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")
        allowed_values = ["GET", "UPDATE"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def world(self):
        """
        Gets the world of this BlockOperationNew.
        The UUID of the world that the block update is applied to.  Either the property `block` or `blocks` has to be set.  If the property `block` is set then all the blocks within the area defined by `min` and `max` are changed to the specified block.  If the property `blocks` is set then it defines nested arrays of the blocks within the area defined by `min` and `max`. The arrays should contain the blocks such that a block located at [min.X + x, min.Y + y, min.Z + z] can be accessed by `blocks[x][y][z]`, where `min` is the vecotor defined by the `min` property. 

        :return: The world of this BlockOperationNew.
        :rtype: str
        """
        return self._world

    @world.setter
    def world(self, world):
        """
        Sets the world of this BlockOperationNew.
        The UUID of the world that the block update is applied to.  Either the property `block` or `blocks` has to be set.  If the property `block` is set then all the blocks within the area defined by `min` and `max` are changed to the specified block.  If the property `blocks` is set then it defines nested arrays of the blocks within the area defined by `min` and `max`. The arrays should contain the blocks such that a block located at [min.X + x, min.Y + y, min.Z + z] can be accessed by `blocks[x][y][z]`, where `min` is the vecotor defined by the `min` property. 

        :param world: The world of this BlockOperationNew.
        :type: str
        """
        if world is None:
            raise ValueError("Invalid value for `world`, must not be `None`")

        self._world = world

    @property
    def min(self):
        """
        Gets the min of this BlockOperationNew.

        :return: The min of this BlockOperationNew.
        :rtype: Vector3
        """
        return self._min

    @min.setter
    def min(self, min):
        """
        Sets the min of this BlockOperationNew.

        :param min: The min of this BlockOperationNew.
        :type: Vector3
        """
        if min is None:
            raise ValueError("Invalid value for `min`, must not be `None`")

        self._min = min

    @property
    def max(self):
        """
        Gets the max of this BlockOperationNew.

        :return: The max of this BlockOperationNew.
        :rtype: Vector3
        """
        return self._max

    @max.setter
    def max(self, max):
        """
        Sets the max of this BlockOperationNew.

        :param max: The max of this BlockOperationNew.
        :type: Vector3
        """
        if max is None:
            raise ValueError("Invalid value for `max`, must not be `None`")

        self._max = max

    @property
    def block(self):
        """
        Gets the block of this BlockOperationNew.

        :return: The block of this BlockOperationNew.
        :rtype: BlockFull
        """
        return self._block

    @block.setter
    def block(self, block):
        """
        Sets the block of this BlockOperationNew.

        :param block: The block of this BlockOperationNew.
        :type: BlockFull
        """

        self._block = block

    @property
    def blocks(self):
        """
        Gets the blocks of this BlockOperationNew.

        :return: The blocks of this BlockOperationNew.
        :rtype: list[list[list[BlockFull]]]
        """
        return self._blocks

    @blocks.setter
    def blocks(self, blocks):
        """
        Sets the blocks of this BlockOperationNew.

        :param blocks: The blocks of this BlockOperationNew.
        :type: list[list[list[BlockFull]]]
        """

        self._blocks = blocks

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, BlockOperationNew):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
