# coding: utf-8

"""
    WebAPI

    Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/...  As a quick test try reaching the route http:/localhost:8080/api/info (remember that you can only access \"localhost\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md) 

    OpenAPI spec version: <version>
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class NationsZone(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uuid': 'str',
        'name': 'str',
        'rect': 'NationsRect',
        'owner': 'Player',
        'co_owners': 'list[Player]',
        'flags': 'object',
        'for_sale': 'bool',
        'price': 'str'
    }

    attribute_map = {
        'uuid': 'uuid',
        'name': 'name',
        'rect': 'rect',
        'owner': 'owner',
        'co_owners': 'coOwners',
        'flags': 'flags',
        'for_sale': 'forSale',
        'price': 'price'
    }

    def __init__(self, uuid=None, name=None, rect=None, owner=None, co_owners=None, flags=None, for_sale=None, price=None):
        """
        NationsZone - a model defined in Swagger
        """

        self._uuid = None
        self._name = None
        self._rect = None
        self._owner = None
        self._co_owners = None
        self._flags = None
        self._for_sale = None
        self._price = None

        if uuid is not None:
          self.uuid = uuid
        if name is not None:
          self.name = name
        if rect is not None:
          self.rect = rect
        if owner is not None:
          self.owner = owner
        if co_owners is not None:
          self.co_owners = co_owners
        if flags is not None:
          self.flags = flags
        if for_sale is not None:
          self.for_sale = for_sale
        if price is not None:
          self.price = price

    @property
    def uuid(self):
        """
        Gets the uuid of this NationsZone.
        The unique uuid of this zone.

        :return: The uuid of this NationsZone.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """
        Sets the uuid of this NationsZone.
        The unique uuid of this zone.

        :param uuid: The uuid of this NationsZone.
        :type: str
        """

        self._uuid = uuid

    @property
    def name(self):
        """
        Gets the name of this NationsZone.
        The name of the zone.

        :return: The name of this NationsZone.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this NationsZone.
        The name of the zone.

        :param name: The name of this NationsZone.
        :type: str
        """

        self._name = name

    @property
    def rect(self):
        """
        Gets the rect of this NationsZone.

        :return: The rect of this NationsZone.
        :rtype: NationsRect
        """
        return self._rect

    @rect.setter
    def rect(self, rect):
        """
        Sets the rect of this NationsZone.

        :param rect: The rect of this NationsZone.
        :type: NationsRect
        """

        self._rect = rect

    @property
    def owner(self):
        """
        Gets the owner of this NationsZone.

        :return: The owner of this NationsZone.
        :rtype: Player
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """
        Sets the owner of this NationsZone.

        :param owner: The owner of this NationsZone.
        :type: Player
        """

        self._owner = owner

    @property
    def co_owners(self):
        """
        Gets the co_owners of this NationsZone.
        The list of co-owners of this zone.

        :return: The co_owners of this NationsZone.
        :rtype: list[Player]
        """
        return self._co_owners

    @co_owners.setter
    def co_owners(self, co_owners):
        """
        Sets the co_owners of this NationsZone.
        The list of co-owners of this zone.

        :param co_owners: The co_owners of this NationsZone.
        :type: list[Player]
        """

        self._co_owners = co_owners

    @property
    def flags(self):
        """
        Gets the flags of this NationsZone.
        A map of boolean flags.

        :return: The flags of this NationsZone.
        :rtype: object
        """
        return self._flags

    @flags.setter
    def flags(self, flags):
        """
        Sets the flags of this NationsZone.
        A map of boolean flags.

        :param flags: The flags of this NationsZone.
        :type: object
        """

        self._flags = flags

    @property
    def for_sale(self):
        """
        Gets the for_sale of this NationsZone.
        True if this zone is for sale, false otherwise.

        :return: The for_sale of this NationsZone.
        :rtype: bool
        """
        return self._for_sale

    @for_sale.setter
    def for_sale(self, for_sale):
        """
        Sets the for_sale of this NationsZone.
        True if this zone is for sale, false otherwise.

        :param for_sale: The for_sale of this NationsZone.
        :type: bool
        """

        self._for_sale = for_sale

    @property
    def price(self):
        """
        Gets the price of this NationsZone.
        The price of this zone. **This is a string because this number might be too large to hold in a regular number object.**

        :return: The price of this NationsZone.
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """
        Sets the price of this NationsZone.
        The price of this zone. **This is a string because this number might be too large to hold in a regular number object.**

        :param price: The price of this NationsZone.
        :type: str
        """

        self._price = price

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, NationsZone):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
