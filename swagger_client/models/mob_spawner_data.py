# coding: utf-8

"""
    Web-API

    Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/v5...  As a quick test try reaching the route http:/localhost:8080/api/v5/info (remember that you can only access \\\"localhost\\\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # List endpoints Lots of objects offer an endpoint to list all objects (e.g. `GET: /world` to get all worlds). These endpoints return only the properties marked 'required' by default, because the list might be quite large. If you want to return ALL data for a list endpoint add the query parameter `details`, (e.g. `GET: /world?details`).  > Remember that in this case the data returned by the endpoint might be quite large.  # Debugging endpoints Apart from the `?details` flag you can also pass some other flags for debugging purposes. Remember that you must include the first query parameter with `?`, and further ones with `&`:  `details`: Includes details for list endpoints  `accept=[json/xml]`: Manually set the accept content type. This is good for browser testing, **BUT DON'T USE THIS IN PRODUCTION, YOU CAN SUPPLY THE `Accepts` HEADER FOR THAT**  `pretty`: Pretty prints the data, also good for debugging in the browser.  An example request might look like this: `http://localhost:8080/api/v5/world?details&accpet=json&pretty&key=MY-API-KEY`  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md)  # noqa: E501

    OpenAPI spec version: 5.4.2-S7.1.0
    Contact: inithilian@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.entity_archtype import EntityArchtype  # noqa: F401,E501
from swagger_client.models.table_entry_entity_archetype import TableEntryEntityArchetype  # noqa: F401,E501


class MobSpawnerData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'maximum_nearby_entities': 'int',
        'maximum_spawn_delay': 'int',
        'minimum_spawn_delay': 'int',
        'next_entity_to_spawn': 'EntityArchtype',
        'possible_entities_to_spawn': 'list[TableEntryEntityArchetype]',
        'remaining_delay': 'int',
        'required_player_range': 'int',
        'spawn_count': 'int',
        'spawn_range': 'int'
    }

    attribute_map = {
        'maximum_nearby_entities': 'maximumNearbyEntities',
        'maximum_spawn_delay': 'maximumSpawnDelay',
        'minimum_spawn_delay': 'minimumSpawnDelay',
        'next_entity_to_spawn': 'nextEntityToSpawn',
        'possible_entities_to_spawn': 'possibleEntitiesToSpawn',
        'remaining_delay': 'remainingDelay',
        'required_player_range': 'requiredPlayerRange',
        'spawn_count': 'spawnCount',
        'spawn_range': 'spawnRange'
    }

    def __init__(self, maximum_nearby_entities=None, maximum_spawn_delay=None, minimum_spawn_delay=None, next_entity_to_spawn=None, possible_entities_to_spawn=None, remaining_delay=None, required_player_range=None, spawn_count=None, spawn_range=None):  # noqa: E501
        """MobSpawnerData - a model defined in Swagger"""  # noqa: E501

        self._maximum_nearby_entities = None
        self._maximum_spawn_delay = None
        self._minimum_spawn_delay = None
        self._next_entity_to_spawn = None
        self._possible_entities_to_spawn = None
        self._remaining_delay = None
        self._required_player_range = None
        self._spawn_count = None
        self._spawn_range = None
        self.discriminator = None

        self.maximum_nearby_entities = maximum_nearby_entities
        self.maximum_spawn_delay = maximum_spawn_delay
        self.minimum_spawn_delay = minimum_spawn_delay
        self.next_entity_to_spawn = next_entity_to_spawn
        self.possible_entities_to_spawn = possible_entities_to_spawn
        self.remaining_delay = remaining_delay
        self.required_player_range = required_player_range
        self.spawn_count = spawn_count
        self.spawn_range = spawn_range

    @property
    def maximum_nearby_entities(self):
        """Gets the maximum_nearby_entities of this MobSpawnerData.  # noqa: E501

        The maximum number of nearby entities for another mob to spawn  # noqa: E501

        :return: The maximum_nearby_entities of this MobSpawnerData.  # noqa: E501
        :rtype: int
        """
        return self._maximum_nearby_entities

    @maximum_nearby_entities.setter
    def maximum_nearby_entities(self, maximum_nearby_entities):
        """Sets the maximum_nearby_entities of this MobSpawnerData.

        The maximum number of nearby entities for another mob to spawn  # noqa: E501

        :param maximum_nearby_entities: The maximum_nearby_entities of this MobSpawnerData.  # noqa: E501
        :type: int
        """
        if maximum_nearby_entities is None:
            raise ValueError("Invalid value for `maximum_nearby_entities`, must not be `None`")  # noqa: E501

        self._maximum_nearby_entities = maximum_nearby_entities

    @property
    def maximum_spawn_delay(self):
        """Gets the maximum_spawn_delay of this MobSpawnerData.  # noqa: E501

        The maximum delay between two consecutive spawns  # noqa: E501

        :return: The maximum_spawn_delay of this MobSpawnerData.  # noqa: E501
        :rtype: int
        """
        return self._maximum_spawn_delay

    @maximum_spawn_delay.setter
    def maximum_spawn_delay(self, maximum_spawn_delay):
        """Sets the maximum_spawn_delay of this MobSpawnerData.

        The maximum delay between two consecutive spawns  # noqa: E501

        :param maximum_spawn_delay: The maximum_spawn_delay of this MobSpawnerData.  # noqa: E501
        :type: int
        """
        if maximum_spawn_delay is None:
            raise ValueError("Invalid value for `maximum_spawn_delay`, must not be `None`")  # noqa: E501

        self._maximum_spawn_delay = maximum_spawn_delay

    @property
    def minimum_spawn_delay(self):
        """Gets the minimum_spawn_delay of this MobSpawnerData.  # noqa: E501

        The minimum delay between two consecutive spawns  # noqa: E501

        :return: The minimum_spawn_delay of this MobSpawnerData.  # noqa: E501
        :rtype: int
        """
        return self._minimum_spawn_delay

    @minimum_spawn_delay.setter
    def minimum_spawn_delay(self, minimum_spawn_delay):
        """Sets the minimum_spawn_delay of this MobSpawnerData.

        The minimum delay between two consecutive spawns  # noqa: E501

        :param minimum_spawn_delay: The minimum_spawn_delay of this MobSpawnerData.  # noqa: E501
        :type: int
        """
        if minimum_spawn_delay is None:
            raise ValueError("Invalid value for `minimum_spawn_delay`, must not be `None`")  # noqa: E501

        self._minimum_spawn_delay = minimum_spawn_delay

    @property
    def next_entity_to_spawn(self):
        """Gets the next_entity_to_spawn of this MobSpawnerData.  # noqa: E501

        The next entity type that will be spawned by this spawner  # noqa: E501

        :return: The next_entity_to_spawn of this MobSpawnerData.  # noqa: E501
        :rtype: EntityArchtype
        """
        return self._next_entity_to_spawn

    @next_entity_to_spawn.setter
    def next_entity_to_spawn(self, next_entity_to_spawn):
        """Sets the next_entity_to_spawn of this MobSpawnerData.

        The next entity type that will be spawned by this spawner  # noqa: E501

        :param next_entity_to_spawn: The next_entity_to_spawn of this MobSpawnerData.  # noqa: E501
        :type: EntityArchtype
        """
        if next_entity_to_spawn is None:
            raise ValueError("Invalid value for `next_entity_to_spawn`, must not be `None`")  # noqa: E501

        self._next_entity_to_spawn = next_entity_to_spawn

    @property
    def possible_entities_to_spawn(self):
        """Gets the possible_entities_to_spawn of this MobSpawnerData.  # noqa: E501

        A weighted table of probability for each entity type to spawn  # noqa: E501

        :return: The possible_entities_to_spawn of this MobSpawnerData.  # noqa: E501
        :rtype: list[TableEntryEntityArchetype]
        """
        return self._possible_entities_to_spawn

    @possible_entities_to_spawn.setter
    def possible_entities_to_spawn(self, possible_entities_to_spawn):
        """Sets the possible_entities_to_spawn of this MobSpawnerData.

        A weighted table of probability for each entity type to spawn  # noqa: E501

        :param possible_entities_to_spawn: The possible_entities_to_spawn of this MobSpawnerData.  # noqa: E501
        :type: list[TableEntryEntityArchetype]
        """
        if possible_entities_to_spawn is None:
            raise ValueError("Invalid value for `possible_entities_to_spawn`, must not be `None`")  # noqa: E501

        self._possible_entities_to_spawn = possible_entities_to_spawn

    @property
    def remaining_delay(self):
        """Gets the remaining_delay of this MobSpawnerData.  # noqa: E501

        The remaining time until the next spawn attempt  # noqa: E501

        :return: The remaining_delay of this MobSpawnerData.  # noqa: E501
        :rtype: int
        """
        return self._remaining_delay

    @remaining_delay.setter
    def remaining_delay(self, remaining_delay):
        """Sets the remaining_delay of this MobSpawnerData.

        The remaining time until the next spawn attempt  # noqa: E501

        :param remaining_delay: The remaining_delay of this MobSpawnerData.  # noqa: E501
        :type: int
        """
        if remaining_delay is None:
            raise ValueError("Invalid value for `remaining_delay`, must not be `None`")  # noqa: E501

        self._remaining_delay = remaining_delay

    @property
    def required_player_range(self):
        """Gets the required_player_range of this MobSpawnerData.  # noqa: E501

        The block range within there must be a player to trigger the spawn  # noqa: E501

        :return: The required_player_range of this MobSpawnerData.  # noqa: E501
        :rtype: int
        """
        return self._required_player_range

    @required_player_range.setter
    def required_player_range(self, required_player_range):
        """Sets the required_player_range of this MobSpawnerData.

        The block range within there must be a player to trigger the spawn  # noqa: E501

        :param required_player_range: The required_player_range of this MobSpawnerData.  # noqa: E501
        :type: int
        """
        if required_player_range is None:
            raise ValueError("Invalid value for `required_player_range`, must not be `None`")  # noqa: E501

        self._required_player_range = required_player_range

    @property
    def spawn_count(self):
        """Gets the spawn_count of this MobSpawnerData.  # noqa: E501

        The amount of entities that will spawn in one attempt  # noqa: E501

        :return: The spawn_count of this MobSpawnerData.  # noqa: E501
        :rtype: int
        """
        return self._spawn_count

    @spawn_count.setter
    def spawn_count(self, spawn_count):
        """Sets the spawn_count of this MobSpawnerData.

        The amount of entities that will spawn in one attempt  # noqa: E501

        :param spawn_count: The spawn_count of this MobSpawnerData.  # noqa: E501
        :type: int
        """
        if spawn_count is None:
            raise ValueError("Invalid value for `spawn_count`, must not be `None`")  # noqa: E501

        self._spawn_count = spawn_count

    @property
    def spawn_range(self):
        """Gets the spawn_range of this MobSpawnerData.  # noqa: E501

        The range from the spawner within which the entities will spawn  # noqa: E501

        :return: The spawn_range of this MobSpawnerData.  # noqa: E501
        :rtype: int
        """
        return self._spawn_range

    @spawn_range.setter
    def spawn_range(self, spawn_range):
        """Sets the spawn_range of this MobSpawnerData.

        The range from the spawner within which the entities will spawn  # noqa: E501

        :param spawn_range: The spawn_range of this MobSpawnerData.  # noqa: E501
        :type: int
        """
        if spawn_range is None:
            raise ValueError("Invalid value for `spawn_range`, must not be `None`")  # noqa: E501

        self._spawn_range = spawn_range

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MobSpawnerData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MobSpawnerData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
