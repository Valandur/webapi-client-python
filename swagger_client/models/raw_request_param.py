# coding: utf-8

"""
    WebAPI

    Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/...  As a quick test try reaching the route http:/localhost:8080/api/info (remember that you can only access \"localhost\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md) 

    OpenAPI spec version: <version>
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RawRequestParam(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'value': 'object',
        'optional': 'bool'
    }

    attribute_map = {
        'type': 'type',
        'value': 'value',
        'optional': 'optional'
    }

    def __init__(self, type=None, value=None, optional=None):
        """
        RawRequestParam - a model defined in Swagger
        """

        self._type = None
        self._value = None
        self._optional = None

        if type is not None:
          self.type = type
        if value is not None:
          self.value = value
        if optional is not None:
          self.optional = optional

    @property
    def type(self):
        """
        Gets the type of this RawRequestParam.
        The type of the parameter. This defines how the value is interpreted.

        :return: The type of this RawRequestParam.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this RawRequestParam.
        The type of the parameter. This defines how the value is interpreted.

        :param type: The type of this RawRequestParam.
        :type: str
        """
        allowed_values = ["int", "integer", "float", "double", "bool", "boolean", "byte", "char", "long", "short", "string", "enum", "class", "vector3d", "vector3i", "text", "world", "player", "itemstack"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def value(self):
        """
        Gets the value of this RawRequestParam.
        The value of the parameter. Base types (like integer, float, boolean, etc.) are converted to the correct type and then passed to the method. Some parameters are handled differently, they are listed below along with their usage:  - class: Interpreted as the fully qualified classname of a class which is loaded and passed | - vector3(i/d): Converted to a Vector3(i/d) object. Requires the properties \"x\", \"y\" and \"z\" - text: Converted to a sponge text - world: Assumed to be the UUID of a world which is fetched and passed - player: Assumed to be the UUID of the player which is fetched and passed. - itemstack: Converted to a new item stack. Requires the properties \"itemType\" and \"amount\" 

        :return: The value of this RawRequestParam.
        :rtype: object
        """
        return self._value

    @value.setter
    def value(self, value):
        """
        Sets the value of this RawRequestParam.
        The value of the parameter. Base types (like integer, float, boolean, etc.) are converted to the correct type and then passed to the method. Some parameters are handled differently, they are listed below along with their usage:  - class: Interpreted as the fully qualified classname of a class which is loaded and passed | - vector3(i/d): Converted to a Vector3(i/d) object. Requires the properties \"x\", \"y\" and \"z\" - text: Converted to a sponge text - world: Assumed to be the UUID of a world which is fetched and passed - player: Assumed to be the UUID of the player which is fetched and passed. - itemstack: Converted to a new item stack. Requires the properties \"itemType\" and \"amount\" 

        :param value: The value of this RawRequestParam.
        :type: object
        """

        self._value = value

    @property
    def optional(self):
        """
        Gets the optional of this RawRequestParam.
        True if the value should be wrapped into an optional value, false otherwise.

        :return: The optional of this RawRequestParam.
        :rtype: bool
        """
        return self._optional

    @optional.setter
    def optional(self, optional):
        """
        Sets the optional of this RawRequestParam.
        True if the value should be wrapped into an optional value, false otherwise.

        :param optional: The optional of this RawRequestParam.
        :type: bool
        """

        self._optional = optional

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RawRequestParam):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
