# coding: utf-8

"""
    Web-API

    Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/v5...  As a quick test try reaching the route http:/localhost:8080/api/v5/info (remember that you can only access \\\"localhost\\\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # List endpoints Lots of objects offer an endpoint to list all objects (e.g. `GET: /world` to get all worlds). These endpoints return only the properties marked 'required' by default, because the list might be quite large. If you want to return ALL data for a list endpoint add the query parameter `details`, (e.g. `GET: /world?details`).  > Remember that in this case the data returned by the endpoint might be quite large.  # Debugging endpoints Apart from the `?details` flag you can also pass some other flags for debugging purposes. Remember that you must include the first query parameter with `?`, and further ones with `&`:  `details`: Includes details for list endpoints  `accept=[json/xml]`: Manually set the accept content type. This is good for browser testing, **BUT DON'T USE THIS IN PRODUCTION, YOU CAN SUPPLY THE `Accepts` HEADER FOR THAT**  `pretty`: Pretty prints the data, also good for debugging in the browser.  An example request might look like this: `http://localhost:8080/api/v5/world?details&accpet=json&pretty&key=MY-API-KEY`  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md)  # noqa: E501

    OpenAPI spec version: @version@
    Contact: inithilian@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Currency(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'default_fraction_digits': 'int',
        'display_name': 'str',
        'id': 'str',
        'name': 'str',
        'plural_display_name': 'str',
        'symbol': 'str'
    }

    attribute_map = {
        'default_fraction_digits': 'defaultFractionDigits',
        'display_name': 'displayName',
        'id': 'id',
        'name': 'name',
        'plural_display_name': 'pluralDisplayName',
        'symbol': 'symbol'
    }

    def __init__(self, default_fraction_digits=None, display_name=None, id=None, name=None, plural_display_name=None, symbol=None):  # noqa: E501
        """Currency - a model defined in Swagger"""  # noqa: E501

        self._default_fraction_digits = None
        self._display_name = None
        self._id = None
        self._name = None
        self._plural_display_name = None
        self._symbol = None
        self.discriminator = None

        if default_fraction_digits is not None:
            self.default_fraction_digits = default_fraction_digits
        if display_name is not None:
            self.display_name = display_name
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if plural_display_name is not None:
            self.plural_display_name = plural_display_name
        if symbol is not None:
            self.symbol = symbol

    @property
    def default_fraction_digits(self):
        """Gets the default_fraction_digits of this Currency.  # noqa: E501


        :return: The default_fraction_digits of this Currency.  # noqa: E501
        :rtype: int
        """
        return self._default_fraction_digits

    @default_fraction_digits.setter
    def default_fraction_digits(self, default_fraction_digits):
        """Sets the default_fraction_digits of this Currency.


        :param default_fraction_digits: The default_fraction_digits of this Currency.  # noqa: E501
        :type: int
        """

        self._default_fraction_digits = default_fraction_digits

    @property
    def display_name(self):
        """Gets the display_name of this Currency.  # noqa: E501


        :return: The display_name of this Currency.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Currency.


        :param display_name: The display_name of this Currency.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def id(self):
        """Gets the id of this Currency.  # noqa: E501


        :return: The id of this Currency.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Currency.


        :param id: The id of this Currency.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Currency.  # noqa: E501


        :return: The name of this Currency.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Currency.


        :param name: The name of this Currency.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def plural_display_name(self):
        """Gets the plural_display_name of this Currency.  # noqa: E501


        :return: The plural_display_name of this Currency.  # noqa: E501
        :rtype: str
        """
        return self._plural_display_name

    @plural_display_name.setter
    def plural_display_name(self, plural_display_name):
        """Sets the plural_display_name of this Currency.


        :param plural_display_name: The plural_display_name of this Currency.  # noqa: E501
        :type: str
        """

        self._plural_display_name = plural_display_name

    @property
    def symbol(self):
        """Gets the symbol of this Currency.  # noqa: E501


        :return: The symbol of this Currency.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this Currency.


        :param symbol: The symbol of this Currency.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Currency):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
