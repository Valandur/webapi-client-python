# coding: utf-8

"""
    WebAPI

    Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/...  As a quick test try reaching the route http:/localhost:8080/api/info (remember that you can only access \"localhost\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md) 

    OpenAPI spec version: <version>
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CommandFull(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'link': 'str',
        'aliases': 'list[str]',
        'usage': 'str',
        'help': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'link': 'link',
        'aliases': 'aliases',
        'usage': 'usage',
        'help': 'help'
    }

    def __init__(self, name=None, description=None, link=None, aliases=None, usage=None, help=None):
        """
        CommandFull - a model defined in Swagger
        """

        self._name = None
        self._description = None
        self._link = None
        self._aliases = None
        self._usage = None
        self._help = None

        if name is not None:
          self.name = name
        if description is not None:
          self.description = description
        if link is not None:
          self.link = link
        if aliases is not None:
          self.aliases = aliases
        if usage is not None:
          self.usage = usage
        if help is not None:
          self.help = help

    @property
    def name(self):
        """
        Gets the name of this CommandFull.
        The main name of the command.

        :return: The name of this CommandFull.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this CommandFull.
        The main name of the command.

        :param name: The name of this CommandFull.
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this CommandFull.
        Describes what the command does.

        :return: The description of this CommandFull.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this CommandFull.
        Describes what the command does.

        :param description: The description of this CommandFull.
        :type: str
        """

        self._description = description

    @property
    def link(self):
        """
        Gets the link of this CommandFull.
        The API URL which contains detailed information about this command.

        :return: The link of this CommandFull.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """
        Sets the link of this CommandFull.
        The API URL which contains detailed information about this command.

        :param link: The link of this CommandFull.
        :type: str
        """

        self._link = link

    @property
    def aliases(self):
        """
        Gets the aliases of this CommandFull.
        All the aliases with which the command can be executed.

        :return: The aliases of this CommandFull.
        :rtype: list[str]
        """
        return self._aliases

    @aliases.setter
    def aliases(self, aliases):
        """
        Sets the aliases of this CommandFull.
        All the aliases with which the command can be executed.

        :param aliases: The aliases of this CommandFull.
        :type: list[str]
        """

        self._aliases = aliases

    @property
    def usage(self):
        """
        Gets the usage of this CommandFull.
        The usage instructions for the command.

        :return: The usage of this CommandFull.
        :rtype: str
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """
        Sets the usage of this CommandFull.
        The usage instructions for the command.

        :param usage: The usage of this CommandFull.
        :type: str
        """

        self._usage = usage

    @property
    def help(self):
        """
        Gets the help of this CommandFull.
        More information about the command.

        :return: The help of this CommandFull.
        :rtype: str
        """
        return self._help

    @help.setter
    def help(self, help):
        """
        Sets the help of this CommandFull.
        More information about the command.

        :param help: The help of this CommandFull.
        :type: str
        """

        self._help = help

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CommandFull):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
