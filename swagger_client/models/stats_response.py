# coding: utf-8

"""
    WebAPI

    Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/...  As a quick test try reaching the route http:/localhost:8080/api/info (remember that you can only access \"localhost\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md) 

    OpenAPI spec version: <version>
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class StatsResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ok': 'Ok',
        'tps': 'list[Stat]',
        'players': 'list[Stat]',
        'cpu': 'list[Stat]',
        'memory': 'list[Stat]',
        'disk': 'list[Stat]'
    }

    attribute_map = {
        'ok': 'ok',
        'tps': 'tps',
        'players': 'players',
        'cpu': 'cpu',
        'memory': 'memory',
        'disk': 'disk'
    }

    def __init__(self, ok=None, tps=None, players=None, cpu=None, memory=None, disk=None):
        """
        StatsResponse - a model defined in Swagger
        """

        self._ok = None
        self._tps = None
        self._players = None
        self._cpu = None
        self._memory = None
        self._disk = None

        if ok is not None:
          self.ok = ok
        if tps is not None:
          self.tps = tps
        if players is not None:
          self.players = players
        if cpu is not None:
          self.cpu = cpu
        if memory is not None:
          self.memory = memory
        if disk is not None:
          self.disk = disk

    @property
    def ok(self):
        """
        Gets the ok of this StatsResponse.

        :return: The ok of this StatsResponse.
        :rtype: Ok
        """
        return self._ok

    @ok.setter
    def ok(self, ok):
        """
        Sets the ok of this StatsResponse.

        :param ok: The ok of this StatsResponse.
        :type: Ok
        """

        self._ok = ok

    @property
    def tps(self):
        """
        Gets the tps of this StatsResponse.
        Array of time and TPS values

        :return: The tps of this StatsResponse.
        :rtype: list[Stat]
        """
        return self._tps

    @tps.setter
    def tps(self, tps):
        """
        Sets the tps of this StatsResponse.
        Array of time and TPS values

        :param tps: The tps of this StatsResponse.
        :type: list[Stat]
        """

        self._tps = tps

    @property
    def players(self):
        """
        Gets the players of this StatsResponse.
        Array of time and player count values

        :return: The players of this StatsResponse.
        :rtype: list[Stat]
        """
        return self._players

    @players.setter
    def players(self, players):
        """
        Sets the players of this StatsResponse.
        Array of time and player count values

        :param players: The players of this StatsResponse.
        :type: list[Stat]
        """

        self._players = players

    @property
    def cpu(self):
        """
        Gets the cpu of this StatsResponse.
        Array of time and CPU load values

        :return: The cpu of this StatsResponse.
        :rtype: list[Stat]
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu):
        """
        Sets the cpu of this StatsResponse.
        Array of time and CPU load values

        :param cpu: The cpu of this StatsResponse.
        :type: list[Stat]
        """

        self._cpu = cpu

    @property
    def memory(self):
        """
        Gets the memory of this StatsResponse.
        Array of time and memory load values

        :return: The memory of this StatsResponse.
        :rtype: list[Stat]
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """
        Sets the memory of this StatsResponse.
        Array of time and memory load values

        :param memory: The memory of this StatsResponse.
        :type: list[Stat]
        """

        self._memory = memory

    @property
    def disk(self):
        """
        Gets the disk of this StatsResponse.
        Array of time and disk usage values

        :return: The disk of this StatsResponse.
        :rtype: list[Stat]
        """
        return self._disk

    @disk.setter
    def disk(self, disk):
        """
        Sets the disk of this StatsResponse.
        Array of time and disk usage values

        :param disk: The disk of this StatsResponse.
        :type: list[Stat]
        """

        self._disk = disk

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, StatsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
