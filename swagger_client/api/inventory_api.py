# coding: utf-8

"""
    Web-API

    Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/v5...  As a quick test try reaching the route http:/localhost:8080/api/v5/info (remember that you can only access \\\"localhost\\\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # List endpoints Lots of objects offer an endpoint to list all objects (e.g. `GET: /world` to get all worlds). These endpoints return only the properties marked 'required' by default, because the list might be quite large. If you want to return ALL data for a list endpoint add the query parameter `details`, (e.g. `GET: /world?details`).  > Remember that in this case the data returned by the endpoint might be quite large.  # Debugging endpoints Apart from the `?details` flag you can also pass some other flags for debugging purposes. Remember that you must include the first query parameter with `?`, and further ones with `&`:  `details`: Includes details for list endpoints  `accept=[json/xml]`: Manually set the accept content type. This is good for browser testing, **BUT DON'T USE THIS IN PRODUCTION, YOU CAN SUPPLY THE `Accepts` HEADER FOR THAT**  `pretty`: Pretty prints the data, also good for debugging in the browser.  An example request might look like this: `http://localhost:8080/api/v5/world?details&accpet=json&pretty&key=MY-API-KEY`  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md)  # noqa: E501

    OpenAPI spec version: 5.4.2-S7.1.0
    Contact: inithilian@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class InventoryApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_element(self, mid, page, y, x, **kwargs):  # noqa: E501
        """Add element  # noqa: E501

        Adds an element to the menu     **Required permissions:**    - **megamenus.megamenus.menu.edit**     # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_element(mid, page, y, x, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mid: (required)
        :param int page: (required)
        :param int y: (required)
        :param int x: (required)
        :param MegaMenusElement body:
        :param bool details: Add to include additional details, omit or false otherwise
        :param str accept: Override the 'Accept' request header (useful for debugging your requests)
        :param bool pretty: Add to make the Web-API pretty print the response (useful for debugging your requests)
        :return: MegaMenusElement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_element_with_http_info(mid, page, y, x, **kwargs)  # noqa: E501
        else:
            (data) = self.add_element_with_http_info(mid, page, y, x, **kwargs)  # noqa: E501
            return data

    def add_element_with_http_info(self, mid, page, y, x, **kwargs):  # noqa: E501
        """Add element  # noqa: E501

        Adds an element to the menu     **Required permissions:**    - **megamenus.megamenus.menu.edit**     # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_element_with_http_info(mid, page, y, x, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mid: (required)
        :param int page: (required)
        :param int y: (required)
        :param int x: (required)
        :param MegaMenusElement body:
        :param bool details: Add to include additional details, omit or false otherwise
        :param str accept: Override the 'Accept' request header (useful for debugging your requests)
        :param bool pretty: Add to make the Web-API pretty print the response (useful for debugging your requests)
        :return: MegaMenusElement
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mid', 'page', 'y', 'x', 'body', 'details', 'accept', 'pretty']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_element" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mid' is set
        if ('mid' not in params or
                params['mid'] is None):
            raise ValueError("Missing the required parameter `mid` when calling `add_element`")  # noqa: E501
        # verify the required parameter 'page' is set
        if ('page' not in params or
                params['page'] is None):
            raise ValueError("Missing the required parameter `page` when calling `add_element`")  # noqa: E501
        # verify the required parameter 'y' is set
        if ('y' not in params or
                params['y'] is None):
            raise ValueError("Missing the required parameter `y` when calling `add_element`")  # noqa: E501
        # verify the required parameter 'x' is set
        if ('x' not in params or
                params['x'] is None):
            raise ValueError("Missing the required parameter `x` when calling `add_element`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mid' in params:
            path_params['mid'] = params['mid']  # noqa: E501
        if 'page' in params:
            path_params['page'] = params['page']  # noqa: E501
        if 'y' in params:
            path_params['y'] = params['y']  # noqa: E501
        if 'x' in params:
            path_params['x'] = params['x']  # noqa: E501

        query_params = []
        if 'details' in params:
            query_params.append(('details', params['details']))  # noqa: E501
        if 'accept' in params:
            query_params.append(('accept', params['accept']))  # noqa: E501
        if 'pretty' in params:
            query_params.append(('pretty', params['pretty']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyHeader', 'ApiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/megamenus/menu/{mid}/{page}/{y}/{x}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MegaMenusElement',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def close_renderer(self, mid, viewer, **kwargs):  # noqa: E501
        """Close renderer  # noqa: E501

        Close the renderer for this viewer     **Required permissions:**    - **megamenus.megamenus.renderer.close**     # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.close_renderer(mid, viewer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mid: (required)
        :param str viewer: (required)
        :param bool details: Add to include additional details, omit or false otherwise
        :param str accept: Override the 'Accept' request header (useful for debugging your requests)
        :param bool pretty: Add to make the Web-API pretty print the response (useful for debugging your requests)
        :return: MegaMenusRenderer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.close_renderer_with_http_info(mid, viewer, **kwargs)  # noqa: E501
        else:
            (data) = self.close_renderer_with_http_info(mid, viewer, **kwargs)  # noqa: E501
            return data

    def close_renderer_with_http_info(self, mid, viewer, **kwargs):  # noqa: E501
        """Close renderer  # noqa: E501

        Close the renderer for this viewer     **Required permissions:**    - **megamenus.megamenus.renderer.close**     # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.close_renderer_with_http_info(mid, viewer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mid: (required)
        :param str viewer: (required)
        :param bool details: Add to include additional details, omit or false otherwise
        :param str accept: Override the 'Accept' request header (useful for debugging your requests)
        :param bool pretty: Add to make the Web-API pretty print the response (useful for debugging your requests)
        :return: MegaMenusRenderer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mid', 'viewer', 'details', 'accept', 'pretty']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method close_renderer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mid' is set
        if ('mid' not in params or
                params['mid'] is None):
            raise ValueError("Missing the required parameter `mid` when calling `close_renderer`")  # noqa: E501
        # verify the required parameter 'viewer' is set
        if ('viewer' not in params or
                params['viewer'] is None):
            raise ValueError("Missing the required parameter `viewer` when calling `close_renderer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mid' in params:
            path_params['mid'] = params['mid']  # noqa: E501
        if 'viewer' in params:
            path_params['viewer'] = params['viewer']  # noqa: E501

        query_params = []
        if 'details' in params:
            query_params.append(('details', params['details']))  # noqa: E501
        if 'accept' in params:
            query_params.append(('accept', params['accept']))  # noqa: E501
        if 'pretty' in params:
            query_params.append(('pretty', params['pretty']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyHeader', 'ApiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/megamenus/render/{mid}/{viewer}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MegaMenusRenderer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_menu(self, **kwargs):  # noqa: E501
        """Create menu  # noqa: E501

        Creates a new menu     **Required permissions:**    - **megamenus.megamenus.menu.create**     # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_menu(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MenuMenusMenu body:
        :param bool details: Add to include additional details, omit or false otherwise
        :param str accept: Override the 'Accept' request header (useful for debugging your requests)
        :param bool pretty: Add to make the Web-API pretty print the response (useful for debugging your requests)
        :return: MenuMenusMenu
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_menu_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_menu_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_menu_with_http_info(self, **kwargs):  # noqa: E501
        """Create menu  # noqa: E501

        Creates a new menu     **Required permissions:**    - **megamenus.megamenus.menu.create**     # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_menu_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MenuMenusMenu body:
        :param bool details: Add to include additional details, omit or false otherwise
        :param str accept: Override the 'Accept' request header (useful for debugging your requests)
        :param bool pretty: Add to make the Web-API pretty print the response (useful for debugging your requests)
        :return: MenuMenusMenu
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'details', 'accept', 'pretty']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_menu" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'details' in params:
            query_params.append(('details', params['details']))  # noqa: E501
        if 'accept' in params:
            query_params.append(('accept', params['accept']))  # noqa: E501
        if 'pretty' in params:
            query_params.append(('pretty', params['pretty']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyHeader', 'ApiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/megamenus/menu', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MenuMenusMenu',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_renderer(self, mid, **kwargs):  # noqa: E501
        """Create menu  # noqa: E501

        Creates a new menu     **Required permissions:**    - **megamenus.megamenus.renderer.create**     # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_renderer(mid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mid: (required)
        :param MegaMenusRenderer body:
        :param bool details: Add to include additional details, omit or false otherwise
        :param str accept: Override the 'Accept' request header (useful for debugging your requests)
        :param bool pretty: Add to make the Web-API pretty print the response (useful for debugging your requests)
        :return: MegaMenusRenderer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_renderer_with_http_info(mid, **kwargs)  # noqa: E501
        else:
            (data) = self.create_renderer_with_http_info(mid, **kwargs)  # noqa: E501
            return data

    def create_renderer_with_http_info(self, mid, **kwargs):  # noqa: E501
        """Create menu  # noqa: E501

        Creates a new menu     **Required permissions:**    - **megamenus.megamenus.renderer.create**     # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_renderer_with_http_info(mid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mid: (required)
        :param MegaMenusRenderer body:
        :param bool details: Add to include additional details, omit or false otherwise
        :param str accept: Override the 'Accept' request header (useful for debugging your requests)
        :param bool pretty: Add to make the Web-API pretty print the response (useful for debugging your requests)
        :return: MegaMenusRenderer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mid', 'body', 'details', 'accept', 'pretty']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_renderer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mid' is set
        if ('mid' not in params or
                params['mid'] is None):
            raise ValueError("Missing the required parameter `mid` when calling `create_renderer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mid' in params:
            path_params['mid'] = params['mid']  # noqa: E501

        query_params = []
        if 'details' in params:
            query_params.append(('details', params['details']))  # noqa: E501
        if 'accept' in params:
            query_params.append(('accept', params['accept']))  # noqa: E501
        if 'pretty' in params:
            query_params.append(('pretty', params['pretty']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyHeader', 'ApiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/megamenus/render/{mid}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MegaMenusRenderer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_element(self, mid, page, x, y, **kwargs):  # noqa: E501
        """Delete menu  # noqa: E501

        Deletes a menu element     **Required permissions:**    - **megamenus.megamenus.menu.edit**     # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_element(mid, page, x, y, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mid: (required)
        :param int page: (required)
        :param int x: (required)
        :param int y: (required)
        :param bool details: Add to include additional details, omit or false otherwise
        :param str accept: Override the 'Accept' request header (useful for debugging your requests)
        :param bool pretty: Add to make the Web-API pretty print the response (useful for debugging your requests)
        :return: MegaMenusElement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_element_with_http_info(mid, page, x, y, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_element_with_http_info(mid, page, x, y, **kwargs)  # noqa: E501
            return data

    def delete_element_with_http_info(self, mid, page, x, y, **kwargs):  # noqa: E501
        """Delete menu  # noqa: E501

        Deletes a menu element     **Required permissions:**    - **megamenus.megamenus.menu.edit**     # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_element_with_http_info(mid, page, x, y, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mid: (required)
        :param int page: (required)
        :param int x: (required)
        :param int y: (required)
        :param bool details: Add to include additional details, omit or false otherwise
        :param str accept: Override the 'Accept' request header (useful for debugging your requests)
        :param bool pretty: Add to make the Web-API pretty print the response (useful for debugging your requests)
        :return: MegaMenusElement
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mid', 'page', 'x', 'y', 'details', 'accept', 'pretty']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_element" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mid' is set
        if ('mid' not in params or
                params['mid'] is None):
            raise ValueError("Missing the required parameter `mid` when calling `delete_element`")  # noqa: E501
        # verify the required parameter 'page' is set
        if ('page' not in params or
                params['page'] is None):
            raise ValueError("Missing the required parameter `page` when calling `delete_element`")  # noqa: E501
        # verify the required parameter 'x' is set
        if ('x' not in params or
                params['x'] is None):
            raise ValueError("Missing the required parameter `x` when calling `delete_element`")  # noqa: E501
        # verify the required parameter 'y' is set
        if ('y' not in params or
                params['y'] is None):
            raise ValueError("Missing the required parameter `y` when calling `delete_element`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mid' in params:
            path_params['mid'] = params['mid']  # noqa: E501
        if 'page' in params:
            path_params['page'] = params['page']  # noqa: E501
        if 'x' in params:
            path_params['x'] = params['x']  # noqa: E501
        if 'y' in params:
            path_params['y'] = params['y']  # noqa: E501

        query_params = []
        if 'details' in params:
            query_params.append(('details', params['details']))  # noqa: E501
        if 'accept' in params:
            query_params.append(('accept', params['accept']))  # noqa: E501
        if 'pretty' in params:
            query_params.append(('pretty', params['pretty']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyHeader', 'ApiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/megamenus/menu/{mid}/{page}/{y}/{x}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MegaMenusElement',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_menu(self, mid, **kwargs):  # noqa: E501
        """Delete menu  # noqa: E501

        Deletes a menu     **Required permissions:**    - **megamenus.megamenus.menu.delete**     # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_menu(mid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mid: (required)
        :param bool details: Add to include additional details, omit or false otherwise
        :param str accept: Override the 'Accept' request header (useful for debugging your requests)
        :param bool pretty: Add to make the Web-API pretty print the response (useful for debugging your requests)
        :return: MenuMenusMenu
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_menu_with_http_info(mid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_menu_with_http_info(mid, **kwargs)  # noqa: E501
            return data

    def delete_menu_with_http_info(self, mid, **kwargs):  # noqa: E501
        """Delete menu  # noqa: E501

        Deletes a menu     **Required permissions:**    - **megamenus.megamenus.menu.delete**     # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_menu_with_http_info(mid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mid: (required)
        :param bool details: Add to include additional details, omit or false otherwise
        :param str accept: Override the 'Accept' request header (useful for debugging your requests)
        :param bool pretty: Add to make the Web-API pretty print the response (useful for debugging your requests)
        :return: MenuMenusMenu
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mid', 'details', 'accept', 'pretty']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_menu" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mid' is set
        if ('mid' not in params or
                params['mid'] is None):
            raise ValueError("Missing the required parameter `mid` when calling `delete_menu`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mid' in params:
            path_params['mid'] = params['mid']  # noqa: E501

        query_params = []
        if 'details' in params:
            query_params.append(('details', params['details']))  # noqa: E501
        if 'accept' in params:
            query_params.append(('accept', params['accept']))  # noqa: E501
        if 'pretty' in params:
            query_params.append(('pretty', params['pretty']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyHeader', 'ApiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/megamenus/menu/{mid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MenuMenusMenu',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_page(self, mid, page, **kwargs):  # noqa: E501
        """Delete a page of elements  # noqa: E501

             **Required permissions:**    - **megamenus.megamenus.menu.delete**     # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_page(mid, page, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mid: (required)
        :param int page: (required)
        :param bool details: Add to include additional details, omit or false otherwise
        :param str accept: Override the 'Accept' request header (useful for debugging your requests)
        :param bool pretty: Add to make the Web-API pretty print the response (useful for debugging your requests)
        :return: MenuMenusMenu
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_page_with_http_info(mid, page, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_page_with_http_info(mid, page, **kwargs)  # noqa: E501
            return data

    def delete_page_with_http_info(self, mid, page, **kwargs):  # noqa: E501
        """Delete a page of elements  # noqa: E501

             **Required permissions:**    - **megamenus.megamenus.menu.delete**     # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_page_with_http_info(mid, page, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mid: (required)
        :param int page: (required)
        :param bool details: Add to include additional details, omit or false otherwise
        :param str accept: Override the 'Accept' request header (useful for debugging your requests)
        :param bool pretty: Add to make the Web-API pretty print the response (useful for debugging your requests)
        :return: MenuMenusMenu
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mid', 'page', 'details', 'accept', 'pretty']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_page" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mid' is set
        if ('mid' not in params or
                params['mid'] is None):
            raise ValueError("Missing the required parameter `mid` when calling `delete_page`")  # noqa: E501
        # verify the required parameter 'page' is set
        if ('page' not in params or
                params['page'] is None):
            raise ValueError("Missing the required parameter `page` when calling `delete_page`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mid' in params:
            path_params['mid'] = params['mid']  # noqa: E501
        if 'page' in params:
            path_params['page'] = params['page']  # noqa: E501

        query_params = []
        if 'details' in params:
            query_params.append(('details', params['details']))  # noqa: E501
        if 'accept' in params:
            query_params.append(('accept', params['accept']))  # noqa: E501
        if 'pretty' in params:
            query_params.append(('pretty', params['pretty']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyHeader', 'ApiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/megamenus/menu/{mid}/{page}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MenuMenusMenu',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_renderer(self, mid, **kwargs):  # noqa: E501
        """Delete menu  # noqa: E501

        Closes this renderer for all currently active viewers     **Required permissions:**    - **megamenus.megamenus.renderer.close**     # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_renderer(mid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mid: (required)
        :param bool details: Add to include additional details, omit or false otherwise
        :param str accept: Override the 'Accept' request header (useful for debugging your requests)
        :param bool pretty: Add to make the Web-API pretty print the response (useful for debugging your requests)
        :return: MegaMenusRenderer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_renderer_with_http_info(mid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_renderer_with_http_info(mid, **kwargs)  # noqa: E501
            return data

    def delete_renderer_with_http_info(self, mid, **kwargs):  # noqa: E501
        """Delete menu  # noqa: E501

        Closes this renderer for all currently active viewers     **Required permissions:**    - **megamenus.megamenus.renderer.close**     # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_renderer_with_http_info(mid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mid: (required)
        :param bool details: Add to include additional details, omit or false otherwise
        :param str accept: Override the 'Accept' request header (useful for debugging your requests)
        :param bool pretty: Add to make the Web-API pretty print the response (useful for debugging your requests)
        :return: MegaMenusRenderer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mid', 'details', 'accept', 'pretty']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_renderer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mid' is set
        if ('mid' not in params or
                params['mid'] is None):
            raise ValueError("Missing the required parameter `mid` when calling `delete_renderer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mid' in params:
            path_params['mid'] = params['mid']  # noqa: E501

        query_params = []
        if 'details' in params:
            query_params.append(('details', params['details']))  # noqa: E501
        if 'accept' in params:
            query_params.append(('accept', params['accept']))  # noqa: E501
        if 'pretty' in params:
            query_params.append(('pretty', params['pretty']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyHeader', 'ApiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/megamenus/renderer/{mid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MegaMenusRenderer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def find_renderer(self, viewer, **kwargs):  # noqa: E501
        """Get the renderer for viewer  # noqa: E501

        Returns the renderer the viewer is currently subject to     **Required permissions:**    - **megamenus.megamenus.renderer.get**     # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_renderer(viewer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str viewer: (required)
        :param bool details: Add to include additional details, omit or false otherwise
        :param str accept: Override the 'Accept' request header (useful for debugging your requests)
        :param bool pretty: Add to make the Web-API pretty print the response (useful for debugging your requests)
        :return: MegaMenusRenderer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.find_renderer_with_http_info(viewer, **kwargs)  # noqa: E501
        else:
            (data) = self.find_renderer_with_http_info(viewer, **kwargs)  # noqa: E501
            return data

    def find_renderer_with_http_info(self, viewer, **kwargs):  # noqa: E501
        """Get the renderer for viewer  # noqa: E501

        Returns the renderer the viewer is currently subject to     **Required permissions:**    - **megamenus.megamenus.renderer.get**     # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_renderer_with_http_info(viewer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str viewer: (required)
        :param bool details: Add to include additional details, omit or false otherwise
        :param str accept: Override the 'Accept' request header (useful for debugging your requests)
        :param bool pretty: Add to make the Web-API pretty print the response (useful for debugging your requests)
        :return: MegaMenusRenderer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['viewer', 'details', 'accept', 'pretty']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_renderer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'viewer' is set
        if ('viewer' not in params or
                params['viewer'] is None):
            raise ValueError("Missing the required parameter `viewer` when calling `find_renderer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'viewer' in params:
            path_params['viewer'] = params['viewer']  # noqa: E501

        query_params = []
        if 'details' in params:
            query_params.append(('details', params['details']))  # noqa: E501
        if 'accept' in params:
            query_params.append(('accept', params['accept']))  # noqa: E501
        if 'pretty' in params:
            query_params.append(('pretty', params['pretty']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyHeader', 'ApiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/megamenus/render/find/{viewer}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MegaMenusRenderer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_element(self, mid, page, x, y, **kwargs):  # noqa: E501
        """Get menu  # noqa: E501

        Read a menu with all elements     **Required permissions:**    - **megamenus.megamenus.menu.edit**     # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_element(mid, page, x, y, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mid: (required)
        :param int page: (required)
        :param int x: (required)
        :param int y: (required)
        :param bool details: Add to include additional details, omit or false otherwise
        :param str accept: Override the 'Accept' request header (useful for debugging your requests)
        :param bool pretty: Add to make the Web-API pretty print the response (useful for debugging your requests)
        :return: MegaMenusElement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_element_with_http_info(mid, page, x, y, **kwargs)  # noqa: E501
        else:
            (data) = self.get_element_with_http_info(mid, page, x, y, **kwargs)  # noqa: E501
            return data

    def get_element_with_http_info(self, mid, page, x, y, **kwargs):  # noqa: E501
        """Get menu  # noqa: E501

        Read a menu with all elements     **Required permissions:**    - **megamenus.megamenus.menu.edit**     # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_element_with_http_info(mid, page, x, y, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mid: (required)
        :param int page: (required)
        :param int x: (required)
        :param int y: (required)
        :param bool details: Add to include additional details, omit or false otherwise
        :param str accept: Override the 'Accept' request header (useful for debugging your requests)
        :param bool pretty: Add to make the Web-API pretty print the response (useful for debugging your requests)
        :return: MegaMenusElement
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mid', 'page', 'x', 'y', 'details', 'accept', 'pretty']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_element" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mid' is set
        if ('mid' not in params or
                params['mid'] is None):
            raise ValueError("Missing the required parameter `mid` when calling `get_element`")  # noqa: E501
        # verify the required parameter 'page' is set
        if ('page' not in params or
                params['page'] is None):
            raise ValueError("Missing the required parameter `page` when calling `get_element`")  # noqa: E501
        # verify the required parameter 'x' is set
        if ('x' not in params or
                params['x'] is None):
            raise ValueError("Missing the required parameter `x` when calling `get_element`")  # noqa: E501
        # verify the required parameter 'y' is set
        if ('y' not in params or
                params['y'] is None):
            raise ValueError("Missing the required parameter `y` when calling `get_element`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mid' in params:
            path_params['mid'] = params['mid']  # noqa: E501
        if 'page' in params:
            path_params['page'] = params['page']  # noqa: E501
        if 'x' in params:
            path_params['x'] = params['x']  # noqa: E501
        if 'y' in params:
            path_params['y'] = params['y']  # noqa: E501

        query_params = []
        if 'details' in params:
            query_params.append(('details', params['details']))  # noqa: E501
        if 'accept' in params:
            query_params.append(('accept', params['accept']))  # noqa: E501
        if 'pretty' in params:
            query_params.append(('pretty', params['pretty']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyHeader', 'ApiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/megamenus/menu/{mid}/{page}/{y}/{x}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MegaMenusElement',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_menu(self, mid, **kwargs):  # noqa: E501
        """Get menu  # noqa: E501

        Read a menu with all elements     **Required permissions:**    - **megamenus.megamenus.menu.get**     # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_menu(mid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mid: (required)
        :param bool details: Add to include additional details, omit or false otherwise
        :param str accept: Override the 'Accept' request header (useful for debugging your requests)
        :param bool pretty: Add to make the Web-API pretty print the response (useful for debugging your requests)
        :return: MenuMenusMenu
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_menu_with_http_info(mid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_menu_with_http_info(mid, **kwargs)  # noqa: E501
            return data

    def get_menu_with_http_info(self, mid, **kwargs):  # noqa: E501
        """Get menu  # noqa: E501

        Read a menu with all elements     **Required permissions:**    - **megamenus.megamenus.menu.get**     # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_menu_with_http_info(mid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mid: (required)
        :param bool details: Add to include additional details, omit or false otherwise
        :param str accept: Override the 'Accept' request header (useful for debugging your requests)
        :param bool pretty: Add to make the Web-API pretty print the response (useful for debugging your requests)
        :return: MenuMenusMenu
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mid', 'details', 'accept', 'pretty']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_menu" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mid' is set
        if ('mid' not in params or
                params['mid'] is None):
            raise ValueError("Missing the required parameter `mid` when calling `get_menu`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mid' in params:
            path_params['mid'] = params['mid']  # noqa: E501

        query_params = []
        if 'details' in params:
            query_params.append(('details', params['details']))  # noqa: E501
        if 'accept' in params:
            query_params.append(('accept', params['accept']))  # noqa: E501
        if 'pretty' in params:
            query_params.append(('pretty', params['pretty']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyHeader', 'ApiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/megamenus/menu/{mid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MenuMenusMenu',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_page(self, mid, page, **kwargs):  # noqa: E501
        """Reads a single page of elements  # noqa: E501

             **Required permissions:**    - **megamenus.megamenus.menu.get**     # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_page(mid, page, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mid: (required)
        :param int page: (required)
        :param bool details: Add to include additional details, omit or false otherwise
        :param str accept: Override the 'Accept' request header (useful for debugging your requests)
        :param bool pretty: Add to make the Web-API pretty print the response (useful for debugging your requests)
        :return: list[MegaMenusElement]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_page_with_http_info(mid, page, **kwargs)  # noqa: E501
        else:
            (data) = self.get_page_with_http_info(mid, page, **kwargs)  # noqa: E501
            return data

    def get_page_with_http_info(self, mid, page, **kwargs):  # noqa: E501
        """Reads a single page of elements  # noqa: E501

             **Required permissions:**    - **megamenus.megamenus.menu.get**     # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_page_with_http_info(mid, page, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mid: (required)
        :param int page: (required)
        :param bool details: Add to include additional details, omit or false otherwise
        :param str accept: Override the 'Accept' request header (useful for debugging your requests)
        :param bool pretty: Add to make the Web-API pretty print the response (useful for debugging your requests)
        :return: list[MegaMenusElement]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mid', 'page', 'details', 'accept', 'pretty']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_page" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mid' is set
        if ('mid' not in params or
                params['mid'] is None):
            raise ValueError("Missing the required parameter `mid` when calling `get_page`")  # noqa: E501
        # verify the required parameter 'page' is set
        if ('page' not in params or
                params['page'] is None):
            raise ValueError("Missing the required parameter `page` when calling `get_page`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mid' in params:
            path_params['mid'] = params['mid']  # noqa: E501
        if 'page' in params:
            path_params['page'] = params['page']  # noqa: E501

        query_params = []
        if 'details' in params:
            query_params.append(('details', params['details']))  # noqa: E501
        if 'accept' in params:
            query_params.append(('accept', params['accept']))  # noqa: E501
        if 'pretty' in params:
            query_params.append(('pretty', params['pretty']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyHeader', 'ApiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/megamenus/menu/{mid}/{page}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MegaMenusElement]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_renderer(self, mid, **kwargs):  # noqa: E501
        """Get the renderer for this menu  # noqa: E501

             **Required permissions:**    - **megamenus.megamenus.renderer.get**     # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_renderer(mid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mid: (required)
        :param bool details: Add to include additional details, omit or false otherwise
        :param str accept: Override the 'Accept' request header (useful for debugging your requests)
        :param bool pretty: Add to make the Web-API pretty print the response (useful for debugging your requests)
        :return: MegaMenusRenderer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_renderer_with_http_info(mid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_renderer_with_http_info(mid, **kwargs)  # noqa: E501
            return data

    def get_renderer_with_http_info(self, mid, **kwargs):  # noqa: E501
        """Get the renderer for this menu  # noqa: E501

             **Required permissions:**    - **megamenus.megamenus.renderer.get**     # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_renderer_with_http_info(mid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mid: (required)
        :param bool details: Add to include additional details, omit or false otherwise
        :param str accept: Override the 'Accept' request header (useful for debugging your requests)
        :param bool pretty: Add to make the Web-API pretty print the response (useful for debugging your requests)
        :return: MegaMenusRenderer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mid', 'details', 'accept', 'pretty']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_renderer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mid' is set
        if ('mid' not in params or
                params['mid'] is None):
            raise ValueError("Missing the required parameter `mid` when calling `get_renderer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mid' in params:
            path_params['mid'] = params['mid']  # noqa: E501

        query_params = []
        if 'details' in params:
            query_params.append(('details', params['details']))  # noqa: E501
        if 'accept' in params:
            query_params.append(('accept', params['accept']))  # noqa: E501
        if 'pretty' in params:
            query_params.append(('pretty', params['pretty']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyHeader', 'ApiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/megamenus/render/{mid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MegaMenusRenderer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_menus(self, **kwargs):  # noqa: E501
        """List menus  # noqa: E501

        Returns a list of all menus     **Required permissions:**    - **megamenus.megamenus.menu.list**     # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_menus(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool details: Add to include additional details, omit or false otherwise
        :param str accept: Override the 'Accept' request header (useful for debugging your requests)
        :param bool pretty: Add to make the Web-API pretty print the response (useful for debugging your requests)
        :return: list[MenuMenusMenu]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_menus_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_menus_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_menus_with_http_info(self, **kwargs):  # noqa: E501
        """List menus  # noqa: E501

        Returns a list of all menus     **Required permissions:**    - **megamenus.megamenus.menu.list**     # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_menus_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool details: Add to include additional details, omit or false otherwise
        :param str accept: Override the 'Accept' request header (useful for debugging your requests)
        :param bool pretty: Add to make the Web-API pretty print the response (useful for debugging your requests)
        :return: list[MenuMenusMenu]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['details', 'accept', 'pretty']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_menus" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'details' in params:
            query_params.append(('details', params['details']))  # noqa: E501
        if 'accept' in params:
            query_params.append(('accept', params['accept']))  # noqa: E501
        if 'pretty' in params:
            query_params.append(('pretty', params['pretty']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyHeader', 'ApiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/megamenus/menu', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MenuMenusMenu]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_renderer(self, **kwargs):  # noqa: E501
        """List renderer  # noqa: E501

        Returns a list of all renderer for menus created with WebAPI     **Required permissions:**    - **megamenus.megamenus.renderer.list**     # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_renderer(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool details: Add to include additional details, omit or false otherwise
        :param str accept: Override the 'Accept' request header (useful for debugging your requests)
        :param bool pretty: Add to make the Web-API pretty print the response (useful for debugging your requests)
        :return: list[MegaMenusRenderer]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_renderer_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_renderer_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_renderer_with_http_info(self, **kwargs):  # noqa: E501
        """List renderer  # noqa: E501

        Returns a list of all renderer for menus created with WebAPI     **Required permissions:**    - **megamenus.megamenus.renderer.list**     # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_renderer_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool details: Add to include additional details, omit or false otherwise
        :param str accept: Override the 'Accept' request header (useful for debugging your requests)
        :param bool pretty: Add to make the Web-API pretty print the response (useful for debugging your requests)
        :return: list[MegaMenusRenderer]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['details', 'accept', 'pretty']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_renderer" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'details' in params:
            query_params.append(('details', params['details']))  # noqa: E501
        if 'accept' in params:
            query_params.append(('accept', params['accept']))  # noqa: E501
        if 'pretty' in params:
            query_params.append(('pretty', params['pretty']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyHeader', 'ApiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/megamenus/render', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MegaMenusRenderer]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def open_renderer(self, mid, viewer, **kwargs):  # noqa: E501
        """Open renderer  # noqa: E501

        Opens the renderer to viewer, effectively opening the menu     **Required permissions:**    - **megamenus.megamenus.renderer.open**     # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.open_renderer(mid, viewer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mid: (required)
        :param str viewer: (required)
        :param bool details: Add to include additional details, omit or false otherwise
        :param str accept: Override the 'Accept' request header (useful for debugging your requests)
        :param bool pretty: Add to make the Web-API pretty print the response (useful for debugging your requests)
        :return: MegaMenusRenderer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.open_renderer_with_http_info(mid, viewer, **kwargs)  # noqa: E501
        else:
            (data) = self.open_renderer_with_http_info(mid, viewer, **kwargs)  # noqa: E501
            return data

    def open_renderer_with_http_info(self, mid, viewer, **kwargs):  # noqa: E501
        """Open renderer  # noqa: E501

        Opens the renderer to viewer, effectively opening the menu     **Required permissions:**    - **megamenus.megamenus.renderer.open**     # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.open_renderer_with_http_info(mid, viewer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mid: (required)
        :param str viewer: (required)
        :param bool details: Add to include additional details, omit or false otherwise
        :param str accept: Override the 'Accept' request header (useful for debugging your requests)
        :param bool pretty: Add to make the Web-API pretty print the response (useful for debugging your requests)
        :return: MegaMenusRenderer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mid', 'viewer', 'details', 'accept', 'pretty']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method open_renderer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mid' is set
        if ('mid' not in params or
                params['mid'] is None):
            raise ValueError("Missing the required parameter `mid` when calling `open_renderer`")  # noqa: E501
        # verify the required parameter 'viewer' is set
        if ('viewer' not in params or
                params['viewer'] is None):
            raise ValueError("Missing the required parameter `viewer` when calling `open_renderer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mid' in params:
            path_params['mid'] = params['mid']  # noqa: E501
        if 'viewer' in params:
            path_params['viewer'] = params['viewer']  # noqa: E501

        query_params = []
        if 'details' in params:
            query_params.append(('details', params['details']))  # noqa: E501
        if 'accept' in params:
            query_params.append(('accept', params['accept']))  # noqa: E501
        if 'pretty' in params:
            query_params.append(('pretty', params['pretty']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyHeader', 'ApiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/megamenus/render/{mid}/{viewer}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MegaMenusRenderer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_element(self, mid, page, x, y, **kwargs):  # noqa: E501
        """Update menu  # noqa: E501

        Update a menu element     **Required permissions:**    - **megamenus.megamenus.menu.edit**     # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_element(mid, page, x, y, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mid: (required)
        :param int page: (required)
        :param int x: (required)
        :param int y: (required)
        :param MegaMenusElement body:
        :param bool details: Add to include additional details, omit or false otherwise
        :param str accept: Override the 'Accept' request header (useful for debugging your requests)
        :param bool pretty: Add to make the Web-API pretty print the response (useful for debugging your requests)
        :return: MegaMenusElement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_element_with_http_info(mid, page, x, y, **kwargs)  # noqa: E501
        else:
            (data) = self.set_element_with_http_info(mid, page, x, y, **kwargs)  # noqa: E501
            return data

    def set_element_with_http_info(self, mid, page, x, y, **kwargs):  # noqa: E501
        """Update menu  # noqa: E501

        Update a menu element     **Required permissions:**    - **megamenus.megamenus.menu.edit**     # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_element_with_http_info(mid, page, x, y, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mid: (required)
        :param int page: (required)
        :param int x: (required)
        :param int y: (required)
        :param MegaMenusElement body:
        :param bool details: Add to include additional details, omit or false otherwise
        :param str accept: Override the 'Accept' request header (useful for debugging your requests)
        :param bool pretty: Add to make the Web-API pretty print the response (useful for debugging your requests)
        :return: MegaMenusElement
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mid', 'page', 'x', 'y', 'body', 'details', 'accept', 'pretty']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_element" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mid' is set
        if ('mid' not in params or
                params['mid'] is None):
            raise ValueError("Missing the required parameter `mid` when calling `set_element`")  # noqa: E501
        # verify the required parameter 'page' is set
        if ('page' not in params or
                params['page'] is None):
            raise ValueError("Missing the required parameter `page` when calling `set_element`")  # noqa: E501
        # verify the required parameter 'x' is set
        if ('x' not in params or
                params['x'] is None):
            raise ValueError("Missing the required parameter `x` when calling `set_element`")  # noqa: E501
        # verify the required parameter 'y' is set
        if ('y' not in params or
                params['y'] is None):
            raise ValueError("Missing the required parameter `y` when calling `set_element`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mid' in params:
            path_params['mid'] = params['mid']  # noqa: E501
        if 'page' in params:
            path_params['page'] = params['page']  # noqa: E501
        if 'x' in params:
            path_params['x'] = params['x']  # noqa: E501
        if 'y' in params:
            path_params['y'] = params['y']  # noqa: E501

        query_params = []
        if 'details' in params:
            query_params.append(('details', params['details']))  # noqa: E501
        if 'accept' in params:
            query_params.append(('accept', params['accept']))  # noqa: E501
        if 'pretty' in params:
            query_params.append(('pretty', params['pretty']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyHeader', 'ApiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/megamenus/menu/{mid}/{page}/{y}/{x}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MegaMenusElement',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_menu(self, mid, **kwargs):  # noqa: E501
        """Update menu  # noqa: E501

        This will only update the title, elements have to be addressed through the respective endpoints     **Required permissions:**    - **megamenus.megamenus.menu.update**     # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_menu(mid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mid: (required)
        :param MenuMenusMenu body:
        :param bool details: Add to include additional details, omit or false otherwise
        :param str accept: Override the 'Accept' request header (useful for debugging your requests)
        :param bool pretty: Add to make the Web-API pretty print the response (useful for debugging your requests)
        :return: MenuMenusMenu
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_menu_with_http_info(mid, **kwargs)  # noqa: E501
        else:
            (data) = self.set_menu_with_http_info(mid, **kwargs)  # noqa: E501
            return data

    def set_menu_with_http_info(self, mid, **kwargs):  # noqa: E501
        """Update menu  # noqa: E501

        This will only update the title, elements have to be addressed through the respective endpoints     **Required permissions:**    - **megamenus.megamenus.menu.update**     # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_menu_with_http_info(mid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mid: (required)
        :param MenuMenusMenu body:
        :param bool details: Add to include additional details, omit or false otherwise
        :param str accept: Override the 'Accept' request header (useful for debugging your requests)
        :param bool pretty: Add to make the Web-API pretty print the response (useful for debugging your requests)
        :return: MenuMenusMenu
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mid', 'body', 'details', 'accept', 'pretty']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_menu" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mid' is set
        if ('mid' not in params or
                params['mid'] is None):
            raise ValueError("Missing the required parameter `mid` when calling `set_menu`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mid' in params:
            path_params['mid'] = params['mid']  # noqa: E501

        query_params = []
        if 'details' in params:
            query_params.append(('details', params['details']))  # noqa: E501
        if 'accept' in params:
            query_params.append(('accept', params['accept']))  # noqa: E501
        if 'pretty' in params:
            query_params.append(('pretty', params['pretty']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyHeader', 'ApiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/megamenus/menu/{mid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MenuMenusMenu',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
