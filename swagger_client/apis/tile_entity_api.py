# coding: utf-8

"""
    WebAPI

    Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/...  As a quick test try reaching the route http:/localhost:8080/api/info (remember that you can only access \"localhost\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md) 

    OpenAPI spec version: <version>
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class TileEntityApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def execute_tile_entity_method(self, world_uuid, x, y, z, request, **kwargs):
        """
        Execute tile entity methods
        Provides direct access to the underlaying tile entity object and can execute any method on it.  > Required permission: tile-entity.method 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.execute_tile_entity_method(world_uuid, x, y, z, request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str world_uuid: The uuid of the world the tile entity is in. (required)
        :param int x: The x-coordinate of the tile entity. (required)
        :param int y: The y-coordinate of the tile entity. (required)
        :param int z: The z-coordinate of the tile entity. (required)
        :param RawRequest request: Information about which method to execute. (required)
        :return: ExecuteTileEntityMethodResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.execute_tile_entity_method_with_http_info(world_uuid, x, y, z, request, **kwargs)
        else:
            (data) = self.execute_tile_entity_method_with_http_info(world_uuid, x, y, z, request, **kwargs)
            return data

    def execute_tile_entity_method_with_http_info(self, world_uuid, x, y, z, request, **kwargs):
        """
        Execute tile entity methods
        Provides direct access to the underlaying tile entity object and can execute any method on it.  > Required permission: tile-entity.method 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.execute_tile_entity_method_with_http_info(world_uuid, x, y, z, request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str world_uuid: The uuid of the world the tile entity is in. (required)
        :param int x: The x-coordinate of the tile entity. (required)
        :param int y: The y-coordinate of the tile entity. (required)
        :param int z: The z-coordinate of the tile entity. (required)
        :param RawRequest request: Information about which method to execute. (required)
        :return: ExecuteTileEntityMethodResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['world_uuid', 'x', 'y', 'z', 'request']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method execute_tile_entity_method" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'world_uuid' is set
        if ('world_uuid' not in params) or (params['world_uuid'] is None):
            raise ValueError("Missing the required parameter `world_uuid` when calling `execute_tile_entity_method`")
        # verify the required parameter 'x' is set
        if ('x' not in params) or (params['x'] is None):
            raise ValueError("Missing the required parameter `x` when calling `execute_tile_entity_method`")
        # verify the required parameter 'y' is set
        if ('y' not in params) or (params['y'] is None):
            raise ValueError("Missing the required parameter `y` when calling `execute_tile_entity_method`")
        # verify the required parameter 'z' is set
        if ('z' not in params) or (params['z'] is None):
            raise ValueError("Missing the required parameter `z` when calling `execute_tile_entity_method`")
        # verify the required parameter 'request' is set
        if ('request' not in params) or (params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `execute_tile_entity_method`")


        collection_formats = {}

        path_params = {}
        if 'world_uuid' in params:
            path_params['worldUuid'] = params['world_uuid']
        if 'x' in params:
            path_params['x'] = params['x']
        if 'y' in params:
            path_params['y'] = params['y']
        if 'z' in params:
            path_params['z'] = params['z']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/xml'])

        # Authentication setting
        auth_settings = ['headerKey', 'queryKey']

        return self.api_client.call_api('/tile-entity/{worldUuid}/{x}/{y}/{z}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ExecuteTileEntityMethodResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_tile_entities(self, **kwargs):
        """
        Tile entities list
        Get a list of all tile entities on the server (in all worlds, unless specified).  > Required permission: tile-entity.list 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_tile_entities(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str world: The uuid of the world to filter entities by.
        :param str type: The TileEntityType id to filter the tile entities by.
        :param str limit: The maximum amount of tile entities to return.
        :return: TileEntitiesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_tile_entities_with_http_info(**kwargs)
        else:
            (data) = self.get_tile_entities_with_http_info(**kwargs)
            return data

    def get_tile_entities_with_http_info(self, **kwargs):
        """
        Tile entities list
        Get a list of all tile entities on the server (in all worlds, unless specified).  > Required permission: tile-entity.list 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_tile_entities_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str world: The uuid of the world to filter entities by.
        :param str type: The TileEntityType id to filter the tile entities by.
        :param str limit: The maximum amount of tile entities to return.
        :return: TileEntitiesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['world', 'type', 'limit']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tile_entities" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'world' in params:
            query_params.append(('world', params['world']))
        if 'type' in params:
            query_params.append(('type', params['type']))
        if 'limit' in params:
            query_params.append(('limit', params['limit']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/xml'])

        # Authentication setting
        auth_settings = ['headerKey', 'queryKey']

        return self.api_client.call_api('/tile-entity', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TileEntitiesResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_tile_entity(self, world_uuid, x, y, z, **kwargs):
        """
        Detailed tile entity info
        Get detailed information about a tile entity.  > Required permission: tile-entity.one 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_tile_entity(world_uuid, x, y, z, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str world_uuid: The uuid of the world the tile entity is in. (required)
        :param int x: The x-coordinate of the tile entity. (required)
        :param int y: The y-coordinate of the tile entity. (required)
        :param int z: The z-coordinate of the tile entity. (required)
        :param str fields: An optional list of additional fields to get.
        :param str methods: An optional list of additional methods to get.
        :return: TileEntityResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_tile_entity_with_http_info(world_uuid, x, y, z, **kwargs)
        else:
            (data) = self.get_tile_entity_with_http_info(world_uuid, x, y, z, **kwargs)
            return data

    def get_tile_entity_with_http_info(self, world_uuid, x, y, z, **kwargs):
        """
        Detailed tile entity info
        Get detailed information about a tile entity.  > Required permission: tile-entity.one 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_tile_entity_with_http_info(world_uuid, x, y, z, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str world_uuid: The uuid of the world the tile entity is in. (required)
        :param int x: The x-coordinate of the tile entity. (required)
        :param int y: The y-coordinate of the tile entity. (required)
        :param int z: The z-coordinate of the tile entity. (required)
        :param str fields: An optional list of additional fields to get.
        :param str methods: An optional list of additional methods to get.
        :return: TileEntityResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['world_uuid', 'x', 'y', 'z', 'fields', 'methods']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tile_entity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'world_uuid' is set
        if ('world_uuid' not in params) or (params['world_uuid'] is None):
            raise ValueError("Missing the required parameter `world_uuid` when calling `get_tile_entity`")
        # verify the required parameter 'x' is set
        if ('x' not in params) or (params['x'] is None):
            raise ValueError("Missing the required parameter `x` when calling `get_tile_entity`")
        # verify the required parameter 'y' is set
        if ('y' not in params) or (params['y'] is None):
            raise ValueError("Missing the required parameter `y` when calling `get_tile_entity`")
        # verify the required parameter 'z' is set
        if ('z' not in params) or (params['z'] is None):
            raise ValueError("Missing the required parameter `z` when calling `get_tile_entity`")


        collection_formats = {}

        path_params = {}
        if 'world_uuid' in params:
            path_params['worldUuid'] = params['world_uuid']
        if 'x' in params:
            path_params['x'] = params['x']
        if 'y' in params:
            path_params['y'] = params['y']
        if 'z' in params:
            path_params['z'] = params['z']

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))
        if 'methods' in params:
            query_params.append(('methods', params['methods']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/xml'])

        # Authentication setting
        auth_settings = ['headerKey', 'queryKey']

        return self.api_client.call_api('/tile-entity/{worldUuid}/{x}/{y}/{z}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TileEntityResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
